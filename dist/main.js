/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./report/results.html":
/*!*****************************!*\
  !*** ./report/results.html ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Module\nvar code = \"    <section class=\\\"suite\\\">\\n      <h1>Rewrite Rules</h1>\\n      <dl>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/get-form-definition?(.+)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /global-assets/hekate-form-definition.jsp?paOkLwmsXxcPh</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/get-form-definition?paOkLwmsXxcPh&#x27; to equal &#x27;/global-assets/hekate-form-definition&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/zink-gen/(.+)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /global-assets/zink.jsp?env=dev&#x26;src=ilmSYHYQeCrrK</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/zink/(.+)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /_generated/zink/srSNmiqSrCgRa</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /iframe/sign-in/general$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /iframe/sign-in/general/index.html</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cache-check.png</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /global-assets/cache-check.jsp?dwiajXUpKpyEs</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cache-check.png?dwiajXUpKpyEs&#x27; to equal &#x27;/global-assets/cache-check.jsp?dwiajX&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/resource-center/innovation-blog/*</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/ndQiMlFwSQdMb?csbpfxsGGkzWF</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/innovation-blog/n&#x2026;&#x27; to equal &#x27;/en/blog/ndQiMlFwSQdMb?csbpfxsGGkzWF&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/resource-center/innovation-blog/*</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/YrtErAWmqCTuH</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/innovation-blog/Y&#x2026;&#x27; to equal &#x27;/en/blog/YrtErAWmqCTuH&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/innovation-blog$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/?pbMnjqkuKklXh</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/?sWLxCQmcWVpDh</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog?sWLxCQmcWVpDh&#x27; to equal &#x27;/en/blog/?sWLxCQmcWVpDh&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/signup/?(.+)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/sign-up?hFQMgpttnEiCB</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/signup?(.+)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/sign-up?iDvruKqUAiqmf</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/([a-z][a-z])/signup?(.+)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/sign-up?xTfeKfPxyKacB</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/([a-z][a-z])/signup$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/sign-up</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/signup$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/sign-up</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/signup/$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/sign-up</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/de$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /de/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/fr$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /fr/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/it$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /it/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/legal$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/legal/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/de/resource-center$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /de/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/fr/resource-center$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /fr/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/it/resource-center$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /it/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resource-center/webinars/$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/featurescript$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/features/custom-features</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-pricing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/pricing</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/contact$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/contact</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/tw$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/tw/$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/tw/contact$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/contact</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cn/contact$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/contact</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/kr/contact$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/contact</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/jp/contact$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/contact</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/es/contact$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/contact</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/full-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/platform</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/features-and-pricing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/pricing</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/benefits$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/platform</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/innovation-blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/&#x27; to equal &#x27;/en/resource-center/innovation-blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-for-macs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/platform</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/products/education$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/education/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/education$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/education/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/products/standard$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/platform</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/products/professional$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/platform</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/products/enterprise$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/platform</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/request-a-demo-form$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/demo-request</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/about-us#founders$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/about-us&#x27; to equal &#x27;/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/learn$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/edu$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/education/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/edu#edu-faq$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/education/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/video$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/roi-calculator$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/roi-calculator</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/pricing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/pricing</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/edu/signup$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/sign-up</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/learn-cad-online$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  https://learn.onshape.com/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/topic/webinars$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/user-group-network$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/user-group-network/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/contact-onshape-team$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/contact</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/tutorials$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/education-plan$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/education/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customers$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/user-stories/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/robots-to-the-rescue/guidelines$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/robots-to-the-rescue/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/covid-19-support$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/covid-19-support</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/featurescript#custom$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/features/custom-features</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/featurescript#start$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/features/custom-features</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customfeatures$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/features/custom-features</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/edu/college-curriculum$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/education/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/topic/tutorials$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/products/free$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/products/free</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/faqs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/platform</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/new/signup$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/sign-up</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/eula$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/legal/terms-of-use</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/m/privacy-policy$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/privacy-center/privacy-policy</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/m/eula$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/legal/terms-of-use</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/api-access$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  https://dev-portal.onshape.com/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/tw/m/welcome$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /m/welcome</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/de/m/welcome$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /m/welcome</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/tw/m/contact-onshape-team$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/contact</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/de/m/contact-onshape-team$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/contact</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cn/m/contact-onshape-team$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/contact</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/kr/m/contact-onshape-team$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/contact</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/tw/m/contact-onshape-team$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/contact</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/de/m/contact-onshape-team$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/contact</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/de/m/welcome$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /m/welcome</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cn/m/welcome$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /m/welcome</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/kr/m/welcome$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /m/welcome</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/tw/m/welcome$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /m/welcome</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/modern-3d-cad-signup$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/modern-3d-cad-mobile-android-ppcs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/modern-3d-cad-mobile-android-ppcs-0</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/modern-3d-cad-g2$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/modern-3d-cad-g2-2</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/products$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/platform</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/product$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/platform</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/products/edu$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/education/&#x27; to equal &#x27;/en/education&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/featurescript$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /features/custom-features</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/features/custom-features&#x27; to equal &#x27;/features/custom-features&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/terms-of-use$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/legal/terms-of-use</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/demo$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /demo-request</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/privacy$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/privacy-center</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/log-in$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  https://cad.onshape.com/signin</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/sign-in$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  https://cad.onshape.com/signin</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/login$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  https://cad.onshape.com/signin</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/legal/privacy-policy$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/privacy-center/privacy-policy</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/m/legal$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/legal</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/legal/&#x27; to equal &#x27;/en/legal&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/m/terms-of-use$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/legal/terms-of-use</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/blog$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/innovation-blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/&#x27; to equal &#x27;/en/resource-center/innovation-blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/events$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /learn/webinars</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/products/enterprise$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/platform</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/products/professional$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/platform</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/products/standard$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/platform</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/modern-3d-cad-reddit$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/request-an-onshape-professional-trial$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /request-a-trial-of-onshape-professional</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/6-practices-for-highly-effective-pdm-users-a-day-in-the-life-of-a-product-development-team-10312019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/6-practices-for-highly-effective-pdm-users-a-day-in-the-life-of-a-product-development-team</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/products/education$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/education/&#x27; to equal &#x27;/en/education&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/ask-me-anything-jon-hirschtick-01302020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/ask-me-anything-jon-hirschtick</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/dixie-iron-works-switches-to-onshape-traceparts$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/dixie-iron-works</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/dixie-iron-works-switches-to-onshape-outbrain$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/dixie-iron-works</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/hirebotics-switches-to-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/hirebotics-video</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/hirebotics-switches-to-onshape-designworld$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/hirebotics</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/premier-custom-built-0$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/premier-custom-built-nurture</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/solidworks-workgroup-pdm-get-onshape-demo$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/&#x27; to equal &#x27;/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/modern-3d-cad-brand-ppcs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/request-a-demo-form$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /demo-request</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/demo-request&#x27; to equal &#x27;/demo-request&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/robotstotherescue$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /robots-to-the-rescue</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/robots2therescue$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /robots-to-the-rescue</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/introduction-to-pdm-data-management-best-practices-11142019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/introduction-to-pdm-data-management-best-practices-111419</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/ebooks/g2-europe-regional-satisfaction-index$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/ebooks/g2-europe-regional-satisfaction-index</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/accelerating-product-development-with-the-cloud-4-takeaways-from-new-research-051420$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/accelerating-product-development-with-the-cloud-4-takeaways-from-new-research</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/managing-your-design-process-with-external-contractors-and-suppliers-052120$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/managing-your-design-process-with-external-contractors-and-suppliers</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/signup$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /lp/3d-cad-free-trial-ebook</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/lp/sign-up&#x27; to equal &#x27;/lp/3d-cad-free-trial-ebook&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/advanced-tips-tricks-for-creating-exploded-views-in-onshape-052820$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/advanced-tips-tricks-for-creating-exploded-views-in-onshape</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/whats-new-in-onshape-060420$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/whats-new-in-onshape-may</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/onshape-essential-tips-best-practices-when-importing-data-061820$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/onshape-essential-tips-best-practices-when-importing-data</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/how-engineering-teams-optimize-collaboration-with-onshape-a-panel-discussion-062520$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/how-engineering-teams-optimize-collaboration-with-onshape-a-panel-discussion</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/creating-community-how-your-business-can-supercharge-its-online-customer-relationships-060220$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/creating-community-how-your-business-can-supercharge-its-online-customer-relationships</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/eduenterprise$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/education-enterprise</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/6-reasons-why-onshape-is-the-best-choice-for-solidworks-users-07062020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /resources/webinars/6-reasons-why-onshape-is-the-best-choice-for-solidworks-users-07162020</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/6-reasons-why-onshape-is-the-&#x2026;&#x27; to equal &#x27;/resources/webinars/6-reasons-why-ons&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/6-reasons-why-onshape-is-the-best-choice-for-solidworks-users-07162020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/6-reasons-why-onshape-is-the-best-choice-for-solidworks-users</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/introducing-onshape-education-enterprise-a-new-cad-platform-for-schools-universities-072320$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/introducing-onshape-education-enterprise-a-new-cad-platform-for-schools-universities</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/whats-new-in-onshape-072320$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/whats-new-in-onshape-072320</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/onshape-on-the-iphone-a-hands-on-tutorial-081320$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/onshape-on-the-iphone-a-hands-on-tutorial</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/making-the-switch-to-onshape-for-k12-education-081820$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/making-the-switch-to-onshape-for-k12-education</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/making-the-switch-to-onshape-for-university-education-081920$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/making-the-switch-to-onshape-for-university-education</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/mapping-your-business-processes-from-solidworks-to-onshape-08192020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/mapping-your-business-processes-from-solidworks-to-onshape</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/organizing-your-company-in-a-cloud-based-design-system-a-technical-exploration-061120$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/organizing-your-company-in-a-cloud-based-design-system</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/using-onshape-with-web-conferencing-tools-to-teach-cad-remotely-082520$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/using-onshape-with-web-conferencing-tools-to-teach-cad-remotely</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/why-siemens-teamcenter-users-should-consider-onshape-082620$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/why-siemens-teamcenter-users-should-consider-onshape-for-multi-site-collaboration</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/onshape-essential-tips-restore-032620$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/onshape-essential-tips-restore</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/ask-the-professorhow-to-achieve-a-truly-concurrent-development-process-011620$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/cloud-based-design-for-your-business-a-technical-exploration-part-1-how-to-achieve-a-truly-concurrent-development-process</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/5-critical-conclusions-from-the-state-of-product-design-hardware-development-2019-08222019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/5-critical-conclusions-from-the-state-of-product-design-hardware-development-2019-report-082219</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/how-engineering-teams-can-adapt-to-changing-work-environments-040120$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/how-engineering-teams-can-adapt-to-changing-work-environments-a-panel-discussion</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/modern-3d-cad-reddit$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /videos/tackling-the-top-challenges-impacting-product-developers-today</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/lp/3d-cad-free-trial-ad&#x27; to equal &#x27;/videos/tackling-the-top-challenges-i&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/whats-new-in-onshape-092420$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/whats-new-in-onshape-092420</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/onshape-for-the-university-classroom-050720$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/onshape-for-the-university-classroom</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/4-reasons-to-consider-saas-product-design-tools-for-your-company-02132020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/4-reasons-to-consider-saas-product-design-tools-for-your-company</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/top-5-product-development-improvements-to-consider-in-2020-01092020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /videos/top-5-product-development-improvements-to-consider-in-2020</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/signup/manifesto$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/signup/real-time-data-management$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/signup/agile-product-design-cad-platform$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/modern-3d-cad-ppcs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/modern-3d-cad-ad-freeaccount$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/signup/real-time-deployment-and-access$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/modern-3d-cad-gmad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/first-look-at-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/modern-3d-cad-ppc-ar$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/modern-cad-finally-techwireasia$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/modern-3d-cad-ad-freeaccount$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/signup/6-things$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/cutsforth-switches-to-onshape-digitalengineering$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/cutsforth-video</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/cutsforth-switches-to-onshape-outbrain$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/cutsforth-video</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/cutsforth-switches-to-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /lp/cutsforth-video</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/hirebotics-switches-to-onshape-designworld $</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /lp/hirebotics-video</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/lp/hirebotics&#x27; to equal &#x27;/lp/hirebotics-video&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/faqs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/platform</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/support$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  https://cad.onshape.com/help/Content/contactus_And.htm?tocpath=_____17</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/sitemap$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/&#x27; to equal &#x27;/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/press-room$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  https://www.ptc.com/en/news</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/careers$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  https://careers.ptc.com/TGnewUI/Search/home/HomeWithPreLoad?partnerid=2&#x26;siteid=5213&#x26;PageType=searchResults&#x26;SearchType=linkquery&#x26;LinkID=4393247</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/jobs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  https://careers.ptc.com/TGnewUI/Search/home/HomeWithPreLoad?partnerid=2&#x26;siteid=5213&#x26;PageType=searchResults&#x26;SearchType=linkquery&#x26;LinkID=4393247</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/m/contact-onshape-team$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/contact</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/contact-sales$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/contact</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/partners/apply$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/contact</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/.well-known/apple-app-site-association$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /.well-known/apple-app-site-association.json</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/ptcs-onshape-teams-up-with-first-for-robots-to-the-rescue-design-competition$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/tutorial-collaboration$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/training-working-alongside-your-existing-cad-system$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/essentials-multipart$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/what-is-the-state-of-product-development-and-hardware-design-in-2020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshapes-core-values-our-statement-of-principles$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/your-time-is-worth-more-than-you-think$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/copies-copies-copies$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customers/voltea$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/user-stories/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/finding-free-public-wifi-on-the-go$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/introducing-onshape-teams$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-fully-maximizing-onshape-help$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-documents-data-in-one-place$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/dont-be-fooled-by-fake-branching-merging$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/introducing-onshape-companies$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/essentials-part-studios$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-companies$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-google-solved-the-version-control-problem$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/introducing-the-onshape-app-store$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/topic/whats-new$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/are-you-sick-of-asking$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customers/inboard$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/user-stories/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/author/lou-gallo$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/traditional-cad-subscriptions$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/capex-vs-opex-an-engineers-guide-to-controlling-cad-costs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-onshape-saves-us-a-day-on-nearly-every-manufacturing-job$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customers/openspaceagency$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/user-stories/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/announcing-the-state-of-product-development-and-hardware-design-2019-report$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/parametric-modeling-2.0-onshapes-modern-approach-to-configurations$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customers/auxiliary-design-school$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/user-stories/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-now-supports-3dconnexion-3d-mice$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-for-ipad-pro$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/multipart-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-launches-new-learning-center-for-full-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customers/taiga-motors$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/user-stories/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/if-you-havent-seen-onshape-in-the-last-6-months-read-this$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-are-companies-leveraging-the-power-of-onshape-configurations$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/stop-wasting-time-emailing-cad-files$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-now-offers-professional-grade-cad-training-for-free$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/edit-history-and-versioning$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/what-happens-during-a-modern-cad-crash$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-sharing-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/collaboration-simultaneous-editing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/what-cad-experts-are-saying-about-design-data-management-2.0$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/tutorial-intro-assemblies-and-subassemblies$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-to-improve-on-traditional-cad-security-with-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-i-chose-an-engineering-career$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customers/scotrenewables$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/user-stories/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/backward-compatibility-problems-belong-in-your-rear-view-mirror$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/author/neil-cooke$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-assemblies-for-solidworks-users-071018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/merging-branches$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customers/zyci$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/user-stories/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/avoiding-the-blue-screen-of-death-welcome-to-a-new-generation-of-cad-reliability$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/reflections-on-develop3d-live$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customers/carbon-black-global$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/user-stories/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/browser-wars$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/creating-weldments-11-09-16$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-we-started-from-scratch-again-in-the-cad-business$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customers/greensight-agronomics$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/user-stories/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/say-goodbye-to-cad-file-checkout-copies$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/happy-first-birthday-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customers/walkabout-mother-bins$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/user-stories/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-i-love-engineering$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/partner-spotlight-how-to-use-simsolid-cloud-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/parametric-modeling-2.0-a-modern-approach-to-multi-part-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customers/luke$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/user-stories/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/mit-uses-onshape-for-new-additive-manufacturing-course-for-engineers-and-executives$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-part-studios-vs.-assemblies$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-is-full-cloud-cad-such-a-big-deal-infographic$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/introducing-onshape-enterprise$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-is-the-perfect-cad-for-open-source$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customers/loxta$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/user-stories/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/unfolding-onshape-sheet-metal$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-taking-advantage-of-onshapes-browser-based-tools$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/merging-branches-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customers/thinklabs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/user-stories/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/a-supermajority-of-companies-still-have-problems-locating-the-correct-version-of-design-data$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/enhancement-requests$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/3-examples-of-using-the-onshape-app$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/please-help-support-team-onshapes-ride-for-cancer-research$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/direct-editing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customers/actronika$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/user-stories/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customers/voxel-innovations$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/user-stories/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/customers/perrinn$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/user-stories/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-advanced-search-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-1-2-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/introducing-design-data-management-2.0$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-taymer-international-creates-its-own-industry-specific-cad-features-for-machine-design/cad-blog/how-taymer-international-creates-its-own-industry-specific-cad-features-for-machine-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/using-mate-connectors$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/a-closer-look-at-onshape-enterprise-projects-role-based-access-control$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/coca-cola-uses-onshape-to-improve-beverage-equipment-at-14000-mcdonalds-restaurants$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/part-studios$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/jon-hirschticks-new-generation-of-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-an-aviation-startup-chose-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/germain-racing-chooses-onshape-for-nascar-car-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/taymer-engineers-create-cad-features-for-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/hy5-designs-the-first-hydraulic-prosthetic-hand$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/how-onshape-helped-petrak-cut-design-time-by-weeks$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/how-onshape-streamlines-collaboration$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-voxel-innovates-with-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-philteds-chose-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-hydroworx-switched-from-solidworks-to-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/behind-the-scenes-of-cloud-cad-validation,-testing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/smart-gun-engineering-to-save-lives$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/real-time-cad-deployment-expediting-agile-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/how-they-made-the-first-electric-skateboard$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/fighting-drought-in-california-with-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/what-built-in-pdm-and-analytics-mean-for-oil-gas$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/in-the-middle-of-nowhere-it&#x27;s-ok,-with-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/modern-cad-adaptable-to-your-needs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/reclaim-lost-hours-with-comprehensive-edit-history$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/how-dodson-motorsport-eliminated-design-gridlock$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/how-farmbot-engineers-eliminated-design-gridlock$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/how-taiga-motors-eliminated-design-gridlock$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/how-universal-logic-ensures-accurate-machine-parts$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-nafco-designed-with-cloud-cad-from-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/how-zipaid-used-onshape-to-design-on-the-road$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-absolute-machinery-chose-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-bellaseno-chose-onshape-to-design-implants$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-ionq-chose-onshape-for-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-loxtra-hardware-chose-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/biotech-startup-bellaseno-chooses-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/bellaseno-chooses-onshape-for-designing-3d-printed-breast-implants$ </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule  ^/en/resource-center/user-stories/trek-selects-onshapes-product-development-platform-to-drive-innovation$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule \\n        ^/en/resource-center/user-stories/baby-gear-manufacturer-philteds-chooses-onshape-for-consumer-product-design$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule \\n        ^/en/resource-center/user-stories/bmf-material-technology-teams-up-with-onshape-for-high-precision-manufacturing$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/case-study-template-draft$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule \\n        ^/en/resource-center/user-stories/fhe-engineers-design-safer-pressure-control-equipment-to-protect-oil-and-gas-workers$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/fhe$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/xing-mobility$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/oceangate$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/evts$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/bst-engineers-design-tough-drones-with-onshape?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/bst-engineers-design-tough-drones-with-onshape?VakygvbhmhjFH</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/bst-engineers-design-tough-drones-with-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/bst-engineers-design-tough-drones-with-onshape</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/how-onshape-helps-synapse-speed-up-product-design?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-onshape-helps-synapse-speed-up-product-design?VrxMLrsPPSUsf</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/why-you-want-to-fail-fast-in&#x2026;&#x27; to equal &#x27;/en/blog/how-onshape-helps-synapse-sp&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/how-onshape-helps-synapse-speed-up-product-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-onshape-helps-synapse-speed-up-product-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/why-you-want-to-fail-fast-in&#x2026;&#x27; to equal &#x27;/en/blog/how-onshape-helps-synapse-sp&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-formulatrix-chose-onshape?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-formulatrix-chose-onshape?TadUiNTuIWLwL</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-formulatrix-chose-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-formulatrix-chose-onshape</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-loop-medical-chose-onshape?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-loop-medical-chose-onshape?AEGtfqaMfVBOz</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-loop-medical-chose-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-loop-medical-chose-onshape</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/actronika-uses-onshape-to-integrate-haptic-technology?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/actronika-uses-onshape-to-integrate-haptic-technology?BBXNfIOVrZHnH</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/case-studies/actr&#x2026;&#x27; to equal &#x27;/en/blog/actronika-uses-onshape-to-in&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/actronika-uses-onshape-to-integrate-haptic-technology$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/actronika-uses-onshape-to-integrate-haptic-technology</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/case-studies/actr&#x2026;&#x27; to equal &#x27;/en/blog/actronika-uses-onshape-to-in&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/hermeus-uses-onshape-for-hypersonic-jet-design?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/hermeus-uses-onshape-for-hypersonic-jet-design?OTKJSkajXIUjR</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/hermeus-uses-onshape-for-hypersonic-jet-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/hermeus-uses-onshape-for-hypersonic-jet-design</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/xing-uses-onshape-for-electric-vehicle-design?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/xing-uses-onshape-for-electric-vehicle-design?cpZnzjNefizcQ</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/xing-uses-onshape-for-electric-vehicle-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/xing-uses-onshape-for-electric-vehicle-design</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/remote-cad-you-wont-believe-what-you-can-build?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/remote-cad-you-wont-believe-what-you-can-build?WHkHzERsVxWjg</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/remote-cad-you-wont-believe-what-you-can-build$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/remote-cad-you-wont-believe-what-you-can-build</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/3-traits-execs-value-most-in-a-mechanical-engineer?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/3-traits-execs-value-most-in-a-mechanical-engineer?WBribooNDSGsT</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/3-traits-execs-value-most-in-a-mechanical-engineer$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/3-traits-execs-value-most-in-a-mechanical-engineer</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/mechanical-engineers-dont-worry-about-job-title?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/mechanical-engineers-dont-worry-about-job-title?jSFfKloWjPuXf</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/mechanical-engineers-dont-worry-about-job-title$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/mechanical-engineers-dont-worry-about-job-title</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/purifying-water-in-panama-with-free-cloud-cad?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/purifying-water-in-panama-with-free-cloud-cad?qTTlqWeFCSUem</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/train-the-next-generation-wi&#x2026;&#x27; to equal &#x27;/en/blog/purifying-water-in-panama-wi&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/purifying-water-in-panama-with-free-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/purifying-water-in-panama-with-free-cloud-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/train-the-next-generation-wi&#x2026;&#x27; to equal &#x27;/en/blog/purifying-water-in-panama-wi&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/reviving-the-worlds-first-hand-held-calculator?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/reviving-the-worlds-first-hand-held-calculator?GJfDtqHmyFgkS</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/reviving-the-worlds-first-hand-held-calculator$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/reviving-the-worlds-first-hand-held-calculator</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/how-to-design-furniture-with-custom-cad-features?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-design-furniture-with-custom-cad-features?MAXMNXxMatyyA</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/how-to-design-furniture-with-custom-cad-features$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-design-furniture-with-custom-cad-features</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-auxiliary-design-school-chose-onshape?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-auxiliary-design-school-chose-onshape?DELUiGwXRBIaP</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/case-studies/?DEL&#x2026;&#x27; to equal &#x27;/en/blog/why-auxiliary-design-school-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-auxiliary-design-school-chose-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-auxiliary-design-school-chose-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/case-studies/&#x27; to equal &#x27;/en/blog/why-auxiliary-design-school-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-gks-packaging-chose-onshape?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-gks-packaging-chose-onshape?LyufHxxMoHDvh</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-gks-packaging-chose-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-gks-packaging-chose-onshape</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-viken-detection-chose-onshape?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-viken-detection-chose-onshape?EUmNKmMjrviBq</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-viken-detection-chose-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-viken-detection-chose-onshape</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/students-choose-onshape-for-designing-prosthetics-onshape?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/students-choose-onshape-for-designing-prosthetics-onshape?SrGJgqOEHQFXh</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/students-choose-onshape-for-designing-prosthetics-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/students-choose-onshape-for-designing-prosthetics-onshape</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-silverside-detectors-chose-onshape?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-silverside-detectors-chose-onshape?cTeVdXEABLllq</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-silverside-detectors-chose-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-silverside-detectors-chose-onshape</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-greensight-agronomics-switched-to-onshape?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-greensight-agronomics-switched-to-onshape?oXYZzffEwHTvF</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/why-greensight-agronomics-switched-to-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-greensight-agronomics-switched-to-onshape</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/aerospace-startup-attempts-hi-speed-space-internet?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/aerospace-startup-attempts-hi-speed-space-internet?iUscqRiTrwiTs</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/aerospace-startup-attempts-hi-speed-space-internet$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/aerospace-startup-attempts-hi-speed-space-internet</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/how-engineer-nicholas-radzykewycz-created-an-emergency-prosthetic-horse-hoof-in-24-hours?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-engineer-nicholas-radzykewycz-created-an-emergency-prosthetic-horse-hoof-in-24-hours?PCjksPWtrwSJd</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/how-engineer-nicholas-radzykewycz-created-an-emergency-prosthetic-horse-hoof-in-24-hours$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-engineer-nicholas-radzykewycz-created-an-emergency-prosthetic-horse-hoof-in-24-hours</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/formlabs-uses-onshape-cad-and-aws-to-shave-weeks-or-months-off-design-cycles?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/formlabs-uses-onshape-cad-and-aws-to-shave-weeks-or-months-off-design-cycles?AqpKBFEdPtTKP</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/formlabs-uses-onshape-cad-and-aws-to-shave-weeks-or-months-off-design-cycles$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/formlabs-uses-onshape-cad-and-aws-to-shave-weeks-or-months-off-design-cycles</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/how-cloud-cad-helps-cutsforth-keep-your-lights-on?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-cloud-cad-helps-cutsforth-keep-your-lights-on?HrRBVdsUPaDqn</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/how-cloud-cad-helps-cutsforth-keep-your-lights-on$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-cloud-cad-helps-cutsforth-keep-your-lights-on</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/120-cad-issues-no-one-wants-to-deal-with?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/120-cad-issues-no-one-wants-to-deal-with?ogeCeOFezuGUa</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/120-cad-issues-no-one-wants-to-deal-with$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/120-cad-issues-no-one-wants-to-deal-with</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/14-things-you-need-in-a-pdm-system?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/14-things-you-need-in-a-pdm-system?kRPxSHjclcAHd</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/14-things-you-need-in-a-pdm-system$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/14-things-you-need-in-a-pdm-system</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/every-day-is-backup-day?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/every-day-is-backup-day?saRDCyTaOulHk</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/every-day-is-backup-day$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/every-day-is-backup-day</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/cad-tech-support-has-never-been-easy-until-now?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/cad-tech-support-has-never-been-easy-until-now?iCZCjglyGcqLn\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/cad-tech-support-has-never-b&#x2026;&#x27; to equal &#x27;/en/blog/cad-tech-support-has-never-b&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/cad-tech-support-has-never-been-easy-until-now$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/cad-tech-support-has-never-been-easy-until-now</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/calculating-cad-roi-onshape-vs-solidworks?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/calculating-cad-roi-onshape-vs-solidworks?dYUxdEsPkUOmX</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/calculating-cad-roi-onshape-vs-solidworks$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/calculating-cad-roi-onshape-vs-solidworks</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-do-pdm-systems-work?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-do-pdm-systems-work?aeVnJPAluARtU</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-do-pdm-systems-work$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-do-pdm-systems-work</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-onshape-makes-cad-crashes-extinct?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-onshape-makes-cad-crashes-extinct?DIGAezLAfOveo</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-onshape-makes-cad-crashes-extinct$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-onshape-makes-cad-crashes-extinct</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-create-and-modify-dwg-drawings?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-create-and-modify-dwg-drawings?SmTUTNUPsnzui</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-create-and-modify-dwg-drawings$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-create-and-modify-dwg-drawings</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-medical-device-designers-maintain-compliance?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-medical-device-designers-maintain-compliance?HxJOdKyboGUGN\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-medical-device-designers&#x2026;&#x27; to equal &#x27;/en/blog/how-medical-device-designers&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-medical-device-designers-maintain-compliance$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-medical-device-designers-maintain-compliance</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/protecting-your-cad-data-with-onshape?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/protecting-your-cad-data-with-onshape?rKuPBurgQeWYH</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/protecting-your-cad-data-with-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/protecting-your-cad-data-with-onshape</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/looking-for-end-to-end-design-process-visibility?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/looking-for-end-to-end-design-process-visibility?urWzufsrMjnAm\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/looking-for-end-to-end-desig&#x2026;&#x27; to equal &#x27;/en/blog/looking-for-end-to-end-desig&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/looking-for-end-to-end-design-process-visibility$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/looking-for-end-to-end-design-process-visibility</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/prevent-cad-data-from-falling-into-the-wrong-hands?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/prevent-cad-data-from-falling-into-the-wrong-hands?NZKNWfFumIsvj</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/prevent-cad-data-from-falling-into-the-wrong-hands$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/prevent-cad-data-from-falling-into-the-wrong-hands</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/improve-your-designs-aerodynamics-with-airshaper?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/improve-your-designs-aerodynamics-with-airshaper?chqNSmfSPxFPW\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/improve-your-designs-aerodyn&#x2026;&#x27; to equal &#x27;/en/blog/improve-your-designs-aerodyn&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/improve-your-designs-aerodynamics-with-airshaper$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/improve-your-designs-aerodynamics-with-airshaper</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/go-from-cad-to-po-with-openbom?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/go-from-cad-to-po-with-openbom?ZajllXLFujCJU</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/go-from-cad-to-po-with-openbom$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/go-from-cad-to-po-with-openbom</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/expedite-onshape-workflows-with-creative-console?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/expedite-onshape-workflows-with-creative-console?bTqIXPwPfxmuX\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/expedite-onshape-workflows-w&#x2026;&#x27; to equal &#x27;/en/blog/expedite-onshape-workflows-w&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/expedite-onshape-workflows-with-creative-console$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/expedite-onshape-workflows-with-creative-console</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/saas-vs-on-premise-product-development-tools?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/saas-vs-on-premise-product-development-tools?ZiWzYjwZpzrnK</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/saas-vs-on-premise-product-development-tools$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/saas-vs-on-premise-product-development-tools</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/think-you-cant-afford-pdm-think-again?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/think-you-cant-afford-pdm-think-again?LZFOdxjsPbKdl</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/built-in-pdm-software-essent&#x2026;&#x27; to equal &#x27;/en/blog/think-you-cant-afford-pdm-th&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/think-you-cant-afford-pdm-think-again$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/think-you-cant-afford-pdm-think-again</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/built-in-pdm-software-essent&#x2026;&#x27; to equal &#x27;/en/blog/think-you-cant-afford-pdm-th&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/2-strategies-for-moving-legacy-data-to-onshape?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/2-strategies-for-moving-legacy-data-to-onshape?jsKasmBhEIdur\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/2-strategies-for-moving-lega&#x2026;&#x27; to equal &#x27;/en/blog/2-strategies-for-moving-lega&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/2-strategies-for-moving-legacy-data-to-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/2-strategies-for-moving-legacy-data-to-onshape</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-does-onshape-really-work?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-does-onshape-really-work?kZJnfDwneKTyd</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-does-onshape-really-work$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-does-onshape-really-work</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-onshape-delivers-safe-continuous-deployment?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-onshape-delivers-safe-continuous-deployment?zEVglFTCIhQKx\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-onshape-delivers-safe-co&#x2026;&#x27; to equal &#x27;/en/blog/how-onshape-delivers-safe-co&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-onshape-delivers-safe-continuous-deployment$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-onshape-delivers-safe-continuous-deployment</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/are-your-product-designs-compliant?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/are-your-product-designs-compliant?lZdIUkSPjkaSu</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/features/collaboration?lZdIUkSPjk&#x2026;&#x27; to equal &#x27;/en/blog/are-your-product-designs-com&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/are-your-product-designs-compliant$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/are-your-product-designs-compliant</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/features/collaboration&#x27; to equal &#x27;/en/blog/are-your-product-designs-com&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/what-is-plm-circa-2020s?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/what-is-plm-circa-2020s?TjvZuazCnapSr</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/what-is-plm-circa-2020s$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/what-is-plm-circa-2020s</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-cloud-cad-is-faster-than-desktop?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-cloud-cad-is-faster-than-desktop?aPotyCdLHKDCG</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-cloud-cad-is-faster-than-desktop$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-cloud-cad-is-faster-than-desktop</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-does-3d-cad-need-pdm?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-does-3d-cad-need-pdm?CzuvkrEfoUGRe</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-does-3d-cad-need-pdm$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-does-3d-cad-need-pdm</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-forward-thinking-companies-choose-onshape?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-forward-thinking-companies-choose-onshape?nQfxFZBMIVxAk\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/growing-your-business-with-c&#x2026;&#x27; to equal &#x27;/en/blog/why-forward-thinking-compani&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-forward-thinking-companies-choose-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-forward-thinking-companies-choose-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/growing-your-business-with-c&#x2026;&#x27; to equal &#x27;/en/blog/why-forward-thinking-compani&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/committed-to-academic-research?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/committed-to-academic-research?dHRIyagCGrszL</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/committed-to-academic-research$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/committed-to-academic-research</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-onshapes-exploded-views-top-all-else-in-cad?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-onshapes-exploded-views-top-all-else-in-cad?qwTaCwGlagQpV\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/why-onshapes-exploded-views-&#x2026;&#x27; to equal &#x27;/en/blog/why-onshapes-exploded-views-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-onshapes-exploded-views-top-all-else-in-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-onshapes-exploded-views-top-all-else-in-cad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-you-need-a-3d-mouse-for-3d-product-design?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-you-need-a-3d-mouse-for-3d-product-design?jsQExwgdqPEsB\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/why-you-need-a-3d-mouse-for-&#x2026;&#x27; to equal &#x27;/en/blog/why-you-need-a-3d-mouse-for-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-you-need-a-3d-mouse-for-3d-product-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-you-need-a-3d-mouse-for-3d-product-design</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/the-top-3-advantages-of-new-release-management?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/the-top-3-advantages-of-new-release-management?odRnYjHyIOhZn\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/features/workflow?odRnYjHyIOhZn&#x27; to equal &#x27;/en/blog/the-top-3-advantages-of-new-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/the-top-3-advantages-of-new-release-management$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/the-top-3-advantages-of-new-release-management</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/features/workflow&#x27; to equal &#x27;/en/blog/the-top-3-advantages-of-new-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/4-reasons-onshape-design-teams-work-faster?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/4-reasons-onshape-design-teams-work-faster?YwKnkTdDlktPV</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-cloud-cad-improves-colla&#x2026;&#x27; to equal &#x27;/en/blog/4-reasons-onshape-design-tea&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/4-reasons-onshape-design-teams-work-faster$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/4-reasons-onshape-design-teams-work-faster</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-cloud-cad-improves-colla&#x2026;&#x27; to equal &#x27;/en/blog/4-reasons-onshape-design-tea&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/4-signs-youre-overpaying-for-your-cad-system?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/4-signs-youre-overpaying-for-your-cad-system?cGwItFQhPgDdc</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/cad-shopping-heres-how-to-un&#x2026;&#x27; to equal &#x27;/en/blog/4-signs-youre-overpaying-for&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/4-signs-youre-overpaying-for-your-cad-system$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/4-signs-youre-overpaying-for-your-cad-system</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/cad-shopping-heres-how-to-un&#x2026;&#x27; to equal &#x27;/en/blog/4-signs-youre-overpaying-for&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/4-signs-you-could-use-cad-custom-features?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/4-signs-you-could-use-cad-custom-features?kkPmcBEUDCJHy</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/4-signs-you-could-use-cad-custom-features$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/4-signs-you-could-use-cad-custom-features</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/5-reasons-to-to-visit-the-onshape-learning-center?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/5-reasons-to-to-visit-the-onshape-learning-center?WZgjuQOsiWPRu\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;https://learn.onshape.com/?WZgjuQOsiW&#x2026;&#x27; to equal &#x27;/en/blog/5-reasons-to-to-visit-the-on&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/5-reasons-to-to-visit-the-onshape-learning-center$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/5-reasons-to-to-visit-the-onshape-learning-center</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;https://learn.onshape.com/&#x27; to equal &#x27;/en/blog/5-reasons-to-to-visit-the-on&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/6-reasons-to-use-the-learning-center?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/6-reasons-to-use-the-learning-center?hcTuqlfBKXnMA</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;https://learn.onshape.com/?hcTuqlfBKX&#x2026;&#x27; to equal &#x27;/en/blog/6-reasons-to-use-the-learnin&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/6-reasons-to-use-the-learning-center$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/6-reasons-to-use-the-learning-center</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;https://learn.onshape.com/&#x27; to equal &#x27;/en/blog/6-reasons-to-use-the-learnin&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/6-ways-cloud-cad-can-accelerate-your-success?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/6-ways-cloud-cad-can-accelerate-your-success?SgzfrbXhpWbEE</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/growing-your-business-with-c&#x2026;&#x27; to equal &#x27;/en/blog/6-ways-cloud-cad-can-acceler&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/6-ways-cloud-cad-can-accelerate-your-success$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/6-ways-cloud-cad-can-accelerate-your-success</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/growing-your-business-with-c&#x2026;&#x27; to equal &#x27;/en/blog/6-ways-cloud-cad-can-acceler&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/7-cloud-cad-features-you-wont-find-on-desktop?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/7-cloud-cad-features-you-wont-find-on-desktop?WBMovbgCfnNHf\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/cloud-native-vs-cloud-storag&#x2026;&#x27; to equal &#x27;/en/blog/7-cloud-cad-features-you-won&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/7-cloud-cad-features-you-wont-find-on-desktop$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/7-cloud-cad-features-you-wont-find-on-desktop</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/cloud-native-vs-cloud-storag&#x2026;&#x27; to equal &#x27;/en/blog/7-cloud-cad-features-you-won&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/7-ways-onshape-better-protects-your-cad-data?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/7-ways-onshape-better-protects-your-cad-data?YPNdtvUjsTfMm</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/7-ways-onshape-better-protects-your-cad-data$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/7-ways-onshape-better-protects-your-cad-data</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/leveraging-the-full-power-of-modern-cad?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/leveraging-the-full-power-of-modern-cad?UYOiRLvWXCAgw</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/leveraging-the-full-power-of-modern-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/leveraging-the-full-power-of-modern-cad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-cloud-cad-helps-solve-problems-in-space?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-cloud-cad-helps-solve-problems-in-space?uMixeEXfCjtiA</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-cloud-cad-helps-solve-problems-in-space$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-cloud-cad-helps-solve-problems-in-space</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/ipad-cad-enhance-productivity-and-creativity?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/ipad-cad-enhance-productivity-and-creativity?mlBajRZVYNrlO</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/ipad-cad-enhance-productivity-and-creativity$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/ipad-cad-enhance-productivity-and-creativity</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/investing-in-a-cad-career-try-the-education-plan?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/investing-in-a-cad-career-try-the-education-plan?JnApifoNSDiyk\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/investing-in-a-cad-career-tr&#x2026;&#x27; to equal &#x27;/en/blog/investing-in-a-cad-career-tr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/investing-in-a-cad-career-try-the-education-plan$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/investing-in-a-cad-career-try-the-education-plan</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/cloud-cad-from-anywhere-on-any-device?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/cloud-cad-from-anywhere-on-any-device?olKwQPPKsDqMf</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/cloud-cad-from-anywhere-on-any-device$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/cloud-cad-from-anywhere-on-any-device</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-makers-should-be-using-pro-3d-cad-software?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-makers-should-be-using-pro-3d-cad-software?tMzfsbHXhsktp\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/why-makers-should-be-using-p&#x2026;&#x27; to equal &#x27;/en/blog/why-makers-should-be-using-p&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-makers-should-be-using-pro-3d-cad-software$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-makers-should-be-using-pro-3d-cad-software</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-optimize-cad-collaboration-and-compliance?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-optimize-cad-collaboration-and-compliance?yGARCXvboWMUC\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/features/collaboration?yGARCXvboW&#x2026;&#x27; to equal &#x27;/en/blog/how-to-optimize-cad-collabor&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-optimize-cad-collaboration-and-compliance$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-optimize-cad-collaboration-and-compliance</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/features/collaboration&#x27; to equal &#x27;/en/blog/how-to-optimize-cad-collabor&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/the-dos-and-donts-of-comparing-cad-systems?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/the-dos-and-donts-of-comparing-cad-systems?iRtkMqtkvNETF</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/the-dos-and-donts-of-comparing-cad-systems$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/the-dos-and-donts-of-comparing-cad-systems</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-adapt-to-new-engineering-work-environments?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-adapt-to-new-engineering-work-environments?HKKCKYBdZDDur\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/engineering-career-path-advi&#x2026;&#x27; to equal &#x27;/en/blog/how-to-adapt-to-new-engineer&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-adapt-to-new-engineering-work-environments$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-adapt-to-new-engineering-work-environments</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/engineering-career-path-advi&#x2026;&#x27; to equal &#x27;/en/blog/how-to-adapt-to-new-engineer&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/4-ways-to-lose-cad-files-and-how-to-prevent-it?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/4-ways-to-lose-cad-files-and-how-to-prevent-it?rGZwPfJBBQeMY\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/4-ways-to-lose-cad-files-and&#x2026;&#x27; to equal &#x27;/en/blog/4-ways-to-lose-cad-files-and&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/4-ways-to-lose-cad-files-and-how-to-prevent-it$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/4-ways-to-lose-cad-files-and-how-to-prevent-it</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/parallelization-now-in-cloud-cad?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/parallelization-now-in-cloud-cad?nfUzPBauvaeCR</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/why-cloud-cad-is-faster-than&#x2026;&#x27; to equal &#x27;/en/blog/parallelization-now-in-cloud&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/parallelization-now-in-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/parallelization-now-in-cloud-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/why-cloud-cad-is-faster-than&#x2026;&#x27; to equal &#x27;/en/blog/parallelization-now-in-cloud&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/what-your-old-cad-vendor-wont-tell-you?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/what-your-old-cad-vendor-wont-tell-you?QhjHpSdmRqBVu</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/what-your-old-cad-vendor-wont-tell-you$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/what-your-old-cad-vendor-wont-tell-you</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/design-custom-products-with-onshape-configurations?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/design-custom-products-with-onshape-configurations?dkNpYhQovwJQF</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/design-custom-products-with-onshape-configurations$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/design-custom-products-with-onshape-configurations</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/want-to-master-cloud-cad-heres-how?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/want-to-master-cloud-cad-heres-how?GqgsWdlKOtcEC</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/4-things-to-know-before-adop&#x2026;&#x27; to equal &#x27;/en/blog/want-to-master-cloud-cad-her&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/want-to-master-cloud-cad-heres-how$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/want-to-master-cloud-cad-heres-how</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/4-things-to-know-before-adop&#x2026;&#x27; to equal &#x27;/en/blog/want-to-master-cloud-cad-her&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/the-importance-of-aesthetics-to-consumer-products?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/the-importance-of-aesthetics-to-consumer-products?rDYlkgEtKbFbK\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/the-importance-of-aesthetics&#x2026;&#x27; to equal &#x27;/en/blog/the-importance-of-aesthetics&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/the-importance-of-aesthetics-to-consumer-products$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/the-importance-of-aesthetics-to-consumer-products</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-assess-your-models-for-structural-weakness?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-assess-your-models-for-structural-weakness?qTKvYeArxbsyV\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-to-assess-your-models-fo&#x2026;&#x27; to equal &#x27;/en/blog/how-to-assess-your-models-fo&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-assess-your-models-for-structural-weakness$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-assess-your-models-for-structural-weakness</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-avoid-a-consumer-product-design-failure?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-avoid-a-consumer-product-design-failure?hOWrLlJKbcvzo\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-to-avoid-a-consumer-prod&#x2026;&#x27; to equal &#x27;/en/blog/how-to-avoid-a-consumer-prod&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-avoid-a-consumer-product-design-failure$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-avoid-a-consumer-product-design-failure</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-choose-the-right-cad-plan-for-your-business?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-choose-the-right-cad-plan-for-your-business?iniEesTARRRKI</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-choose-the-right-cad-plan-for-your-business$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-choose-the-right-cad-plan-for-your-business</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-streamline-your-transition-from-solidworks?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-streamline-your-transition-from-solidworks?XMNvpgrrIvlrC\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-to-streamline-your-trans&#x2026;&#x27; to equal &#x27;/en/blog/how-to-streamline-your-trans&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-streamline-your-transition-from-solidworks$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-streamline-your-transition-from-solidworks</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/7-traits-of-the-perfect-cad-pilot-project?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/7-traits-of-the-perfect-cad-pilot-project?zQmnfButbHOGW</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-to-onboard-your-first-ro&#x2026;&#x27; to equal &#x27;/en/blog/7-traits-of-the-perfect-cad-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/7-traits-of-the-perfect-cad-pilot-project$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/7-traits-of-the-perfect-cad-pilot-project</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-to-onboard-your-first-ro&#x2026;&#x27; to equal &#x27;/en/blog/7-traits-of-the-perfect-cad-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-onboard-your-first-robotics-team?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-onboard-your-first-robotics-team?GxAFoufWbYtZl</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-onboard-your-first-robotics-team$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-onboard-your-first-robotics-team</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/teachers-how-to-set-up-your-onshape-classroom?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/teachers-how-to-set-up-your-onshape-classroom?OeyXMJChyGtdw\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/teachers-how-to-set-up-your-&#x2026;&#x27; to equal &#x27;/en/blog/teachers-how-to-set-up-your-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/teachers-how-to-set-up-your-onshape-classroom$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/teachers-how-to-set-up-your-onshape-classroom</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-render-photorealistic-images-like-ikea?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-render-photorealistic-images-like-ikea?DTEeCscJpLJST\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-to-render-photorealistic&#x2026;&#x27; to equal &#x27;/en/blog/how-to-render-photorealistic&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-render-photorealistic-images-like-ikea$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-render-photorealistic-images-like-ikea</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-you-need-onshape-education-enterprise?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-you-need-onshape-education-enterprise?doRBDIRgoLzYY</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-you-need-onshape-education-enterprise$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-you-need-onshape-education-enterprise</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/product-design-and-engineering-from-your-phone?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/product-design-and-engineering-from-your-phone?jKZgUtceQxKeH\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/under-the-hood-cad-for-mobil&#x2026;&#x27; to equal &#x27;/en/blog/product-design-and-engineeri&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/product-design-and-engineering-from-your-phone$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/product-design-and-engineering-from-your-phone</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/under-the-hood-cad-for-mobile&#x27; to equal &#x27;/en/blog/product-design-and-engineeri&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/make-beautiful-music-with-a-3d-printed-violin?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/make-beautiful-music-with-a-3d-printed-violin?QOeaAjxoBYDLt\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/make-beautiful-music-with-a-&#x2026;&#x27; to equal &#x27;/en/blog/make-beautiful-music-with-a-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/make-beautiful-music-with-a-3d-printed-violin$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/make-beautiful-music-with-a-3d-printed-violin</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/all-the-reasons-cad-users-are-moving-to-the-cloud.html?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/all-the-reasons-cad-users-are-moving-to-the-cloud.html?EWzqjigPOrACY</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/all-the-reasons-cad-users-are-moving-to-the-cloud.html$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/all-the-reasons-cad-users-are-moving-to-the-cloud.html</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-fix-the-world-with-cloud-cad?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-fix-the-world-with-cloud-cad?AqllpSakycuWM</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-fix-the-world-with-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-fix-the-world-with-cloud-cad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-use-cloud-cad-to-teach-high-school-stem?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-use-cloud-cad-to-teach-high-school-stem?ScuwSPZnIsXEp\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-to-use-cloud-cad-to-teac&#x2026;&#x27; to equal &#x27;/en/blog/how-to-use-cloud-cad-to-teac&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-use-cloud-cad-to-teach-high-school-stem$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-use-cloud-cad-to-teach-high-school-stem</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/ipad-and-iphone-designed-for-cloud-cad-on-the-go?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/ipad-and-iphone-designed-for-cloud-cad-on-the-go?slXndJQWWTMmr\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/ipad-and-iphone-designed-for&#x2026;&#x27; to equal &#x27;/en/blog/ipad-and-iphone-designed-for&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/ipad-and-iphone-designed-for-cloud-cad-on-the-go$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/ipad-and-iphone-designed-for-cloud-cad-on-the-go</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/the-5-best-custom-feature-hacks-of-2019?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/the-5-best-custom-feature-hacks-of-2019?NHqredzqTAEbI</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/the-5-best-custom-feature-hacks-of-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/the-5-best-custom-feature-hacks-of-2019</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/rethinking-sheet-metal-for-more-flexibility?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/rethinking-sheet-metal-for-more-flexibility?JfeIhuOutWWqn</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/rethinking-sheet-metal-for-more-flexibility$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/rethinking-sheet-metal-for-more-flexibility</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/a-modern-approach-to-parametic-modeling?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/a-modern-approach-to-parametic-modeling?cJwKNlphjPrPP</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/a-modern-approach-to-parametic-modeling$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/a-modern-approach-to-parametic-modeling</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/a-modern-approach-to-sheet-metal-design?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/a-modern-approach-to-sheet-metal-design?mBBTeqdYyKSFP</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/a-modern-approach-to-sheet-metal-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/a-modern-approach-to-sheet-metal-design</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/a-modern-approach-to-standard-content?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/a-modern-approach-to-standard-content?IqEvzMBpqWAFK</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/a-modern-approach-to-standard-content$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/a-modern-approach-to-standard-content</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/tackling-tight-deadines-with-shared-designs?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/tackling-tight-deadines-with-shared-designs?aPiytUOQnMtkf</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/onshapes-best-design-and-dev&#x2026;&#x27; to equal &#x27;/en/blog/tackling-tight-deadines-with&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/tackling-tight-deadines-with-shared-designs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/tackling-tight-deadines-with-shared-designs</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/onshapes-best-design-and-dev&#x2026;&#x27; to equal &#x27;/en/blog/tackling-tight-deadines-with&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-expedite-furniture-design-with-cloud-cad?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-expedite-furniture-design-with-cloud-cad?udnhOdWRcNsqU\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-to-expedite-furniture-de&#x2026;&#x27; to equal &#x27;/en/blog/how-to-expedite-furniture-de&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-expedite-furniture-design-with-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-expedite-furniture-design-with-cloud-cad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-expedite-your-time-to-market?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-expedite-your-time-to-market?cDBDzUOStgNqk</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/consumer-product-design-can-&#x2026;&#x27; to equal &#x27;/en/blog/how-to-expedite-your-time-to&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-expedite-your-time-to-market$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-expedite-your-time-to-market</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/consumer-product-design-can-&#x2026;&#x27; to equal &#x27;/en/blog/how-to-expedite-your-time-to&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/the-biggest-pains-of-traditional-cad?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/the-biggest-pains-of-traditional-cad?lZnUCrVPJiskU</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/why-we-started-from-scratch-&#x2026;&#x27; to equal &#x27;/en/blog/the-biggest-pains-of-traditi&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/the-biggest-pains-of-traditional-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/the-biggest-pains-of-traditional-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/why-we-started-from-scratch-&#x2026;&#x27; to equal &#x27;/en/blog/the-biggest-pains-of-traditi&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/under-the-hood-how-collaboration-works?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/under-the-hood-how-collaboration-works?waOWsvYrJpmpi</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/under-the-hood-how-collaboration-works$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/under-the-hood-how-collaboration-works</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/under-the-hood-cad-performance?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/under-the-hood-cad-performance?whYwnxKiiNALV</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/under-the-hood-cad-performance$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/under-the-hood-cad-performance</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/under-the-hood-cad-for-mobile?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/under-the-hood-cad-for-mobile?hFpkCZKveZFlM</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/under-the-hood-cad-for-mobile$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/under-the-hood-cad-for-mobile</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/under-the-hood-onshape-sketches?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/under-the-hood-onshape-sketches?IbQLRAYTyxBLh</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/under-the-hood-onshape-sketches$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/under-the-hood-onshape-sketches</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/using-cad-as-a-sales-presentation-tool?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/using-cad-as-a-sales-presentation-tool?MONdDGJfoZZPW</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/using-cad-as-a-sales-presentation-tool$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/using-cad-as-a-sales-presentation-tool</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/using-onshape-to-boost-your-career?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/using-onshape-to-boost-your-career?FxubVNyfKWMPJ</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/using-onshape-to-boost-your-career$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/using-onshape-to-boost-your-career</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/want-to-start-an-onshape-user-group?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/want-to-start-an-onshape-user-group?EBxMuGzIuRhOv</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/user-group-network/?EBxMuGzIuRhOv&#x27; to equal &#x27;/en/blog/want-to-start-an-onshape-use&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/want-to-start-an-onshape-user-group$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/want-to-start-an-onshape-user-group</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/user-group-network/&#x27; to equal &#x27;/en/blog/want-to-start-an-onshape-use&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/whats-is-generative-design?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/whats-is-generative-design?trdmGRYiVEZwS</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/whats-is-generative-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/whats-is-generative-design</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/what-is-onshape-bootcamp?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/what-is-onshape-bootcamp?uRRnGkqofwIKR</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/what-is-onshape-bootcamp$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/what-is-onshape-bootcamp</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/whats-it-like-teaching-onshape?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/whats-it-like-teaching-onshape?aGLTFZurxakzH</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/whats-it-like-teaching-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/whats-it-like-teaching-onshape</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-become-a-cad-power-user?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-become-a-cad-power-user?EjiOMTNRpMjJP</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/cad-users-are-you-frustrated&#x2026;&#x27; to equal &#x27;/en/blog/how-to-become-a-cad-power-us&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-become-a-cad-power-user$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-become-a-cad-power-user</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/cad-users-are-you-frustrated&#x2026;&#x27; to equal &#x27;/en/blog/how-to-become-a-cad-power-us&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/increase-productivity-on-the-manufacturing-floor?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/increase-productivity-on-the-manufacturing-floor?yaZEKddRCkbME\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/new-era-pdm-proper-design-ma&#x2026;&#x27; to equal &#x27;/en/blog/increase-productivity-on-the&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/increase-productivity-on-the-manufacturing-floor$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/increase-productivity-on-the-manufacturing-floor</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/new-era-pdm-proper-design-ma&#x2026;&#x27; to equal &#x27;/en/blog/increase-productivity-on-the&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/work-life-balance-and-remote-workers?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/work-life-balance-and-remote-workers?ZRsAHIJectNZJ</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/13-remote-work-tips-from-lea&#x2026;&#x27; to equal &#x27;/en/blog/work-life-balance-and-remote&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/work-life-balance-and-remote-workers$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/work-life-balance-and-remote-workers</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/13-remote-work-tips-from-lea&#x2026;&#x27; to equal &#x27;/en/blog/work-life-balance-and-remote&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/introducing-categories-in-onshape?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/introducing-categories-in-onshape?dPdrUHTqlGmtI</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/introducing-categories-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/introducing-categories-in-onshape</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule \\n        ^/en/resource-center/articles/why-some-of-michigans-most-competitive-engineering-courses-switched-to-onshape?(.*)$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-some-of-michigans-most-competitive-engineering-courses-switched-to-onshape?nnsWThnyhRKoy</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-some-of-michigans-most-competitive-engineering-courses-switched-to-onshape$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-some-of-michigans-most-competitive-engineering-courses-switched-to-onshape</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/train-the-next-generation-with-free-cloud-cad?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/train-the-next-generation-with-free-cloud-cad?lWkLDdwBxnYLw\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/train-the-next-generation-wi&#x2026;&#x27; to equal &#x27;/en/blog/train-the-next-generation-wi&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/train-the-next-generation-with-free-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/train-the-next-generation-with-free-cloud-cad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-install-onshape?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-install-onshape?UiyBfapqSatJJ</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-install-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-install-onshape</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/onshape-takes-the-lead-on-top-down-design?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/onshape-takes-the-lead-on-top-down-design?uvouNLMBqLLNa</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/onshape-takes-the-lead-on-top-down-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/onshape-takes-the-lead-on-top-down-design</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/6-challenges-in-machine-design-part-1?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/6-challenges-in-machine-design-part-1?QRSBRgEpgwREj</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/6-challenges-in-machine-design-part-1$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/6-challenges-in-machine-design-part-1</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/the-top-5-reasons-to-add-cae-to-your-cad?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/the-top-5-reasons-to-add-cae-to-your-cad?eoWgFfvSXxnsM</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/the-top-5-reasons-to-add-cae-to-your-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/the-top-5-reasons-to-add-cae-to-your-cad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/overcome-the-6-biggest-machine-design-challenges?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/overcome-the-6-biggest-machine-design-challenges?NLjeZvNywoaAX\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/overcome-the-6-biggest-machi&#x2026;&#x27; to equal &#x27;/en/blog/overcome-the-6-biggest-machi&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/overcome-the-6-biggest-machine-design-challenges$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/overcome-the-6-biggest-machine-design-challenges</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/seamlessly-integrate-onshape-and-sap-with-cideon?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/seamlessly-integrate-onshape-and-sap-with-cideon?eJStFcCEMlayH\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/seamlessly-integrate-onshape&#x2026;&#x27; to equal &#x27;/en/blog/seamlessly-integrate-onshape&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/seamlessly-integrate-onshape-and-sap-with-cideon$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/seamlessly-integrate-onshape-and-sap-with-cideon</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/optimizing-cad-with-real-time-built-in-pdm?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/optimizing-cad-with-real-time-built-in-pdm?hhtURvVZpxOUB</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/optimizing-cad-with-real-time-built-in-pdm$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/optimizing-cad-with-real-time-built-in-pdm</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/perform-finite-element-analysis-on-the-cloud?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/perform-finite-element-analysis-on-the-cloud?RJjyDSRuQevTT</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/perform-finite-element-analysis-on-the-cloud$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/perform-finite-element-analysis-on-the-cloud</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule \\n        ^/en/resource-center/articles/onshape-partner-spotlight-electra-cloud-is-the-only-electrical-schematic-software-you-can-access-anywhere?(.*)$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/onshape-partner-spotlight-electra-cloud-is-the-only-electrical-schematic-software-you-can-access-anywhere?lKqTRcFLtTLxi\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/onshape-partner-spotlight-el&#x2026;&#x27; to equal &#x27;/en/blog/onshape-partner-spotlight-el&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule \\n        ^/en/resource-center/articles/onshape-partner-spotlight-electra-cloud-is-the-only-electrical-schematic-software-you-can-access-anywhere$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/onshape-partner-spotlight-electra-cloud-is-the-only-electrical-schematic-software-you-can-access-anywhere\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/onshape-partner-spotlight-el&#x2026;&#x27; to equal &#x27;/en/blog/onshape-partner-spotlight-el&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-hardware-startups-should-use-cloud-cad?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-hardware-startups-should-use-cloud-cad?tAPWKsrgnyyBR</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-hardware-startups-should-use-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-hardware-startups-should-use-cloud-cad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/onshape-partner-spotlight-duro-cloud-plm-for-distributed-hardware-teams?(.*)$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/onshape-partner-spotlight-duro-cloud-plm-for-distributed-hardware-teams?MGRBVpypQQXBb</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/onshape-partner-spotlight-duro-cloud-plm-for-distributed-hardware-teams$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/onshape-partner-spotlight-duro-cloud-plm-for-distributed-hardware-teams</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-onshape-has-fundamentally-improved-parametric-cad?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-onshape-has-fundamentally-improved-parametric-cad?WdrEymKyySSwV</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-onshape-has-fundamentally-improved-parametric-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-onshape-has-fundamentally-improved-parametric-cad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule \\n        ^/en/resource-center/articles/onshape-partner-spotlight-boosting-productivity-with-oneipms-integrated-project-management?(.*)$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/onshape-partner-spotlight-boosting-productivity-with-oneipms-integrated-project-management?MsiOMfqBfAywQ\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/onshape-partner-spotlight-bo&#x2026;&#x27; to equal &#x27;/en/blog/onshape-partner-spotlight-bo&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule \\n        ^/en/resource-center/articles/onshape-partner-spotlight-boosting-productivity-with-oneipms-integrated-project-management$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/onshape-partner-spotlight-boosting-productivity-with-oneipms-integrated-project-management</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule \\n        ^/en/resource-center/articles/onshape-partner-spotlight-onscales-cloud-simulation-tools-deliver-supercomputer-speed-and-power?(.*)$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/onshape-partner-spotlight-onscales-cloud-simulation-tools-deliver-supercomputer-speed-and-power?jtMmbQMgkcoii\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/onshape-partner-spotlight-on&#x2026;&#x27; to equal &#x27;/en/blog/onshape-partner-spotlight-on&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule \\n        ^/en/resource-center/articles/onshape-partner-spotlight-onscales-cloud-simulation-tools-deliver-supercomputer-speed-and-power$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/onshape-partner-spotlight-onscales-cloud-simulation-tools-deliver-supercomputer-speed-and-power</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule \\n        ^/en/resource-center/articles/onshape-partner-spotlight-cadasio-helps-bring-your-products-technical-documentation-to-the-next-level?(.*)$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/onshape-partner-spotlight-cadasio-helps-bring-your-products-technical-documentation-to-the-next-level?VxIhZdguDhlOb\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/onshape-partner-spotlight-ca&#x2026;&#x27; to equal &#x27;/en/blog/onshape-partner-spotlight-ca&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule \\n        ^/en/resource-center/articles/onshape-partner-spotlight-cadasio-helps-bring-your-products-technical-documentation-to-the-next-level$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/onshape-partner-spotlight-cadasio-helps-bring-your-products-technical-documentation-to-the-next-level\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/onshape-partner-spotlight-ca&#x2026;&#x27; to equal &#x27;/en/blog/onshape-partner-spotlight-ca&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/what-are-onshape-application-extensions?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/what-are-onshape-application-extensions?pwENDeuemilWV</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/what-are-onshape-application-extensions$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/what-are-onshape-application-extensions</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule \\n        ^/en/resource-center/articles/15-tips-your-students-should-know-before-taking-the-certified-onshape-associate-exam?(.*)$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/15-tips-your-students-should-know-before-taking-the-certified-onshape-associate-exam?xkJokCjyxMkCh\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/15-tips-your-students-should&#x2026;&#x27; to equal &#x27;/en/blog/15-tips-your-students-should&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule \\n        ^/en/resource-center/articles/15-tips-your-students-should-know-before-taking-the-certified-onshape-associate-exam$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/15-tips-your-students-should-know-before-taking-the-certified-onshape-associate-exam</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/onshape-partner-spotlight-improve-your-freeform-product-designs-with-phi?(.*)$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/onshape-partner-spotlight-improve-your-freeform-product-designs-with-phi?onwTYMgWQyoTw</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/onshape-partner-spotlight-improve-your-freeform-product-designs-with-phi$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/onshape-partner-spotlight-improve-your-freeform-product-designs-with-phi</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/whats-new-in-the-onshape-app-store-spring-2021?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/whats-new-in-the-onshape-app-store-spring-2021?ufjZJUbjkYyLc\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/whats-new-in-the-onshape-app&#x2026;&#x27; to equal &#x27;/en/blog/whats-new-in-the-onshape-app&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/whats-new-in-the-onshape-app-store-spring-2021$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/whats-new-in-the-onshape-app-store-spring-2021</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/cad-blog/how-to-buy-the-best-cad-system-for-your-product-development-team?(.*)$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/cad-blog/how-to-buy-the-best-cad-system-for-your-product-development-team?yOQcFcQbxnDfx</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/cad-blog/how-to-buy-the-best-cad-system-for-your-product-development-team$\\n    </h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/cad-blog/how-to-buy-the-best-cad-system-for-your-product-development-team</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/6-ways-to-improve-your-design-collaboration-with-cad?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/6-ways-to-improve-your-design-collaboration-with-cad?nREbFtkSFmqli</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/6-ways-to-improve-your-design-collaboration-with-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/6-ways-to-improve-your-design-collaboration-with-cad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/would-you-be-fed-up-with-19-cad-crashes-in-a-day?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/would-you-be-fed-up-with-19-cad-crashes-in-a-day?bprDQNVcJjgqt\\n    </dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/would-you-be-fed-up-with-19-&#x2026;&#x27; to equal &#x27;/en/blog/would-you-be-fed-up-with-19-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/would-you-be-fed-up-with-19-cad-crashes-in-a-day$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/would-you-be-fed-up-with-19-cad-crashes-in-a-day</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/what-makes-a-parametric-modeler-tick?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/what-makes-a-parametric-modeler-tick?UPqZGCdxuBhyB</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/what-makes-a-parametric-modeler-tick$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/what-makes-a-parametric-modeler-tick</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/purifying-water-in-panama-with-free-cloud-cad</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/train-the-next-generation-with-free-cloud-cad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/why-product-development-teams-are-adopting-saas</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/4-benefits-of-saas-for-product-development</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/parallelization-now-in-cloud-cad</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-cloud-cad-is-faster-than-desktop</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/what-is-the-state-of-product-development-and-hardware-design-in-2021</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/new-industry-report-state-product-development-2022-2023</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/what-is-the-state-of-product-development-and-hardware-design-in-2020</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/new-industry-report-state-product-development-2022-2023</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-cloud-cad-improves-supplier-communications</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-use-cloud-cad-to-maximize-customer-input</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/growing-your-business-with-c&#x2026;&#x27; to equal &#x27;/en/blog/how-to-use-cloud-cad-to-maxi&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/remote-work-redefining-the-workplace-and-product-development</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/cad-data-management-making-product-designs-more-accessible-in-the-new-normal</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/4-reasons-onshape-design-teams-work-faster</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-cloud-cad-improves-collaboration-with-your-extended-internal-product-design-team</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/improve-team-communication-with-onshapes-cloud-sharing-features</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /resource-center/ebooks/preventing-product-design-bottlenecks</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/actronika-uses-onshape-to-integrate-haptic-technology</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/case-studies/actronika</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/the-key-to-product-development-collaboration</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/reality-check-how-strong-is-your-supply-chain</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/why-you-need-real-time-pdm-to-optimize-cad</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/connecting-cad-pdm-plm</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/5-reasons-to-to-visit-the-onshape-learning-center</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  https://learn.onshape.com/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/preventing-product-design-bottlenecks-which-version-is-the-latest-version-of-a-cad-file</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/data-management-comparing-cad-files-and-databases</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-engineering-teams-are-improving-collaboration-with-external-vendors-and-manufacturing-partners</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/eliminating-collaborative-friction-engineering-design-process</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-to-adapt-to-new-engineering-work-environments</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/engineering-career-path-advice</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/6-reasons-to-use-the-learning-center</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  https://learn.onshape.com/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/improving-business-agility-with-cloud-native-cad</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/cloud-native-vs-cloud-storage-cad-platforms</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/tackling-tight-deadines-with-shared-designs</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/onshapes-best-design-and-development-features-for-q3-2021</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-executives-and-frontline-engineers-view-their-teams-strengths-and-weaknesses-differently</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/the-capabilities-gap-where-are-product-engineering-teams-falling-short-in-their-performance-goals</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-to-overcome-hardware-designs-biggest-obstacle</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/product-design-advice-for-hardware-startups</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-cloud-cad-helps-maintain-business-continunity</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/cloud-native-vs-cloud-storage-cad-platforms</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/product-innovation-thomas-edison-and-sweating-less-with-the-cloud</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/new-industry-report-state-product-development-2022-2023</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-do-companies-rate-their-own-productivity-and-innovation</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/cloud-productivity-tools-give-companies-more-confidence-in-their-ability-to-support-remote-work</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/innovation-for-good-why-game-changing-product-developers-rely-on-onshapes-cloud-cad</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/new-industry-report-state-product-development-2022-2023</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/some-early-new-years-product-development-resolutions-for-2021</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/new-industry-report-state-product-development-2022-2023</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/think-you-cant-afford-pdm-think-again</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/built-in-pdm-software-essential-product-development</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/why-collaboration-is-easier-with-cloud-based-tools</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-cloud-cad-improves-collaboration-with-your-extended-internal-product-design-team</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/why-automatic-upgrades-are-such-a-big-deal</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/top-10-onshape-features</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/why-onshape-is-a-top-place-to-work</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/why-auxiliary-design-school-chose-onshape</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/case-studies/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/full-visibility-into-the-product-design-process</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/choosing-the-right-product-design-tools</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/product-design-and-engineering-from-your-phone</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/under-the-hood-cad-for-mobile</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-to-become-a-cad-power-user</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/cad-users-are-you-frustrated-by-inadequate-tech-support</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/why-tech-leaders-develop-products-in-the-cloud</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/growing-your-business-with-cloud-native-product-development</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/why-real-time-cad-deployment-is-essential</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/top-10-tips-for-enabling-real-time-cad-collaboration</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-cloud-native-cad-promotes-agility-for-product-design-teams</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/cloud-native-vs-cloud-storage-cad-platforms</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/work-life-balance-and-remote-workers</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/13-remote-work-tips-from-lead-engineers</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-collaboration-and-agility-lead-to-innovation</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/ebooks/accelerating-product-innovation-with-the-cloud</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-onshape-helps-synapse-speed-up-product-design</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-you-want-to-fail-fast-in-product-design</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/3-business-questions-to-consider-when-choosing-cad-software</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/articles/key-insights-top-3-considerations-for-choosing-cad-software-infographic</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/whats-more-important-design-processes-or-cad</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/design-process-onshape-live-23-sessions</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/the-top-3-advantages-of-new-release-management</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/features/workflow</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/want-to-start-an-onshape-user-group</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/user-group-network/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/cloud-native-cad-provides-peace-of-mind-for-engineer</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/cloud-native-vs-cloud-storage-cad-platforms</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/the-biggest-pains-of-traditional-cad</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/why-we-started-from-scratch-in-the-cad-business</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/change-or-die-why-cads-slow-to-embrace-the-cloud</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/cloud-native-vs-cloud-storage-cad-platforms</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-to-expedite-your-time-to-market</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/consumer-product-design-can-reduce-time-to-market</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/14-reasons-top-manufacturers-use-cloud-cad</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/cloud-native-vs-cloud-storage-cad-platforms</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-to-use-cloud-cad-to-accelerate-sales</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/growing-your-business-with-cloud-native-product-development</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-cloud-cad-provides-a-competitive-edge</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/growing-your-business-with-cloud-native-product-development</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/4-signs-youre-overpaying-for-your-cad-system</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/cad-shopping-heres-how-to-uncover-hidden-costs</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-to-use-cloud-cad-to-enhance-your-marketing</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/growing-your-business-with-cloud-native-product-development</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/making-it-work-integrated-pdm-with-cloud-native-cad</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/connecting-cad-pdm-plm</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-to-use-cloud-cad-to-maximize-customer-input</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/growing-your-business-with-cloud-native-product-development</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/what-your-digital-transformation-strategy-needs</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-saas-impacts-digital-tranformation-strategy</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-to-optimize-cad-collaboration-and-compliance</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/features/collaboration</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/does-your-product-development-team-have-trouble-accessing-your-design-data-when-you-need-it</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/introducing-design-data-management-2-0</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/6-ways-cloud-cad-can-accelerate-your-success</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/growing-your-business-with-cloud-native-product-development</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/improving-remote-access-and-flexibility-the-new-reality-of-remote-work</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/the-importance-of-flexibility-in-remote-cad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/want-to-master-cloud-cad-heres-how</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/4-things-to-know-before-adopting-cloud-native-cad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/7-traits-of-the-perfect-cad-pilot-project</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-to-onboard-your-first-robotics-team</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/what-were-talking-about-2022-trends-customer-success-virtual-events</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/gen-z-tech-trends-saas</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/how-the-right-collaboration-tools-can-make-2022-a-productive-year</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/features/collaboration</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/7-cloud-cad-features-you-wont-find-on-desktop</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/cloud-native-vs-cloud-storage-cad-platforms</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/cad-software-incompatibility</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/top-things-engineers-dislike-about-file-based-cad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/why-forward-thinking-companies-choose-onshape</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/growing-your-business-with-cloud-native-product-development</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/5-additive-manufacturing-trends-in-2017</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/pros-cons-additive-manufacturing-technologies</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/using-real-time-metrics-to-manage-your-design</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/the-need-for-cad-analytics-and-real-time-visibility-what-gets-measured-gets-managed</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/product-designers-and-engineers-on-covid-19</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/onshape-will-help-with-your-covid-19-project</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/a-year-in-review-onshape-user-group-meetings</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/user-group-network/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/the-top-real-time-collaboration-tools-for-engineers-that-transform-product-development-part-2</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/features/collaboration</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/increase-productivity-on-the-manufacturing-floor</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/new-era-pdm-proper-design-manufacturing</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/early-team-communication-vital-to-product-innovation</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-the-right-collaboration-tools-can-make-2022-a-productive-year</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/features/collaboration&#x27; to equal &#x27;/en/blog/how-the-right-collaboration-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/what-were-talking-about-manufacturing-render-studio-agile-method</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/features/render-studio</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/2-keys-to-accelerate-product-development</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/operations</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/agile-development-time-for-engineers-to-catch-up</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/becoming-agile</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/are-your-product-designs-compliant</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-optimize-cad-collaboration-and-compliance</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/features/collaboration&#x27; to equal &#x27;/en/blog/how-to-optimize-cad-collabor&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/cloud-design-collaboration-tools-for-your-core-product-engineering-team</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-cloud-cad-improves-collaboration-with-your-extended-internal-product-design-team</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule /en/blog/can-industrial-design-be-beautiful</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/beautiful-products-industrial-cad-design</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/10-essential-tips-for-designing-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/10-essential-onshape-design-tips</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/10-essential-tips-for-desig&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/10-esse&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/13-business-takeaways-from-transitioning-to-a-remote-workforce$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/13-remote-work-tips-from-lead-engineers</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/13-business-takeaways-from-&#x2026;&#x27; to equal &#x27;/en/blog/13-remote-work-tips-from-lea&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/14-things-to-look-for-in-a-pdm-system-part-1-of-2$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/14-things-you-need-in-a-pdm-system</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/14-things-to-look-for-in-a-&#x2026;&#x27; to equal &#x27;/en/blog/14-things-you-need-in-a-pdm-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/5-examples-of-engineering-reports-that-can-improve-your-business$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/5-industry-altering-engineering-reports</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/5-examples-of-engineering-r&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/5-indus&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/at-onshape-every-day-is-backup-day$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/every-day-is-backup-day</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/at-onshape-every-day-is-bac&#x2026;&#x27; to equal &#x27;/en/blog/every-day-is-backup-day&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/cad-tech-support-has-never-been-easy-until-now$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/cad-tech-support-has-never-been-easy-until-now</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/cad-tech-support-has-never-&#x2026;&#x27; to equal &#x27;/en/blog/cad-tech-support-has-never-b&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/calculating-cad-roi-onshape-vs-solidworks-cost$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/calculating-cad-roi-onshape-vs-solidworks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/calculating-cad-roi-onshape&#x2026;&#x27; to equal &#x27;/en/blog/calculating-cad-roi-onshape-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/can-cad-really-be-fun$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/can-cad-really-be-fun</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/can-cad-really-be-fun&#x27; to equal &#x27;/en/blog/can-cad-really-be-fun&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/can-hirebotics-robot-welders-help-alleviate-a-chronic-skilled-labor-shortage$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/hirebotics-robot-welders-help-a-labor-shortage</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/can-hirebotics-robot-welder&#x2026;&#x27; to equal &#x27;/en/blog/hirebotics-robot-welders-hel&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/cloud-based-design-for-your-business-a-technical-exploration$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/cloud-based-design-saving-time-and-money</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/cloud-based-design-for-your&#x2026;&#x27; to equal &#x27;/en/blog/cloud-based-design-saving-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-bst-engineers-design-research-drones-tough-enough-for-volcanoes$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/bst-engineers-design-tough-drones-with-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-bst-engineers-design-re&#x2026;&#x27; to equal &#x27;/en/blog/bst-engineers-design-tough-d&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-do-pdm-systems-work$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-do-pdm-systems-work</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-do-pdm-systems-work&#x27; to equal &#x27;/en/blog/how-do-pdm-systems-work&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-does-onshape-handle-advanced-surface-modeling$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/articles/how-does-onshape-handle-advanced-surface-modeling</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-does-onshape-handle-adv&#x2026;&#x27; to equal &#x27;/en/resource-center/articles/how-does&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-onshape-is-making-cad-crashes-extinct$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-onshape-makes-cad-crashes-extinct</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-onshape-is-making-cad-c&#x2026;&#x27; to equal &#x27;/en/blog/how-onshape-makes-cad-crashe&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-saas-impacts-engineering-teams-digital-transformation-strategy$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-saas-impacts-digital-tranformation-strategy</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-saas-impacts-engineerin&#x2026;&#x27; to equal &#x27;/en/blog/how-saas-impacts-digital-tra&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-to-create-and-modify-dwg-drawings-in-sync-with-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-create-and-modify-dwg-drawings</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-to-create-and-modify-dw&#x2026;&#x27; to equal &#x27;/en/blog/how-to-create-and-modify-dwg&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/medical-device-designers-are-you-keeping-up-with-regulatory-compliance$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-medical-device-designers-maintain-compliance</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/medical-device-designers-ar&#x2026;&#x27; to equal &#x27;/en/blog/how-medical-device-designers&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/mit-uses-onshape-for-its-integrated-design-management-masters-program$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/mit-uses-onshape-for-integrated-design-program</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/mit-uses-onshape-for-its-in&#x2026;&#x27; to equal &#x27;/en/blog/mit-uses-onshape-for-integra&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-enterprise-gets-cad-data-into-the-hands-of-those-who-need-it$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/protecting-your-cad-data-with-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/onshape-enterprise-gets-cad&#x2026;&#x27; to equal &#x27;/en/blog/protecting-your-cad-data-wit&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-enterprise-gives-companies-unprecedented-visibility-into-their-design-process$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/looking-for-end-to-end-design-process-visibility</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/onshape-enterprise-gives-co&#x2026;&#x27; to equal &#x27;/en/blog/looking-for-end-to-end-desig&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-enterprise-prevents-your-cad-data-from-falling-into-the-wrong-hands$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/prevent-cad-data-from-falling-into-the-wrong-hands</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/onshape-enterprise-prevents&#x2026;&#x27; to equal &#x27;/en/blog/prevent-cad-data-from-fallin&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-is-the-only-cad-company-named-to-the-forbes-cloud-100$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/the-only-cad-company-named-to-forbes-cloud-100</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/onshape-is-the-only-cad-com&#x2026;&#x27; to equal &#x27;/en/blog/the-only-cad-company-named-t&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshapes-platform-today-so-much-more-than-just-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/onshape-today-much-more-than-just-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/onshapes-platform-today-so-&#x2026;&#x27; to equal &#x27;/en/blog/onshape-today-much-more-than&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/partner-spotlight-airshaper-improves-the-aerodynamics-of-your-onshape-designs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/improve-your-designs-aerodynamics-with-airshaper</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/partner-spotlight-airshaper&#x2026;&#x27; to equal &#x27;/en/blog/improve-your-designs-aerodyn&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/partner-spotlight-openbom-releases-design-to-purchase-for-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/go-from-cad-to-po-with-openbom</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/partner-spotlight-openbom-r&#x2026;&#x27; to equal &#x27;/en/blog/go-from-cad-to-po-with-openb&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/partner-spotlight-speed-up-your-onshape-workflows-with-this-creative-console$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/expedite-onshape-workflows-with-creative-console</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/partner-spotlight-speed-up-&#x2026;&#x27; to equal &#x27;/en/blog/expedite-onshape-workflows-w&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/product-designers-how-well-do-you-understand-your-consumers-needs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/do-product-designers-understand-consumers-do-you</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/product-designers-how-well-&#x2026;&#x27; to equal &#x27;/en/blog/do-product-designers-underst&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/ptcs-commitment-to-you-our-customers-during-covid-19$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/ptc-always-committed-to-our-customers</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/ptcs-commitment-to-you-our-&#x2026;&#x27; to equal &#x27;/en/blog/ptc-always-committed-to-our-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/saas-vs.-on-premise-product-development-tools-whats-the-difference$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/saas-vs-on-premise-product-development-tools</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/saas-vs.-on-premise-product&#x2026;&#x27; to equal &#x27;/en/blog/saas-vs-on-premise-product-d&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/solving-the-5-most-hated-engineering-tasks$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/solving-the-5-most-hated-engineering-tasks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/solving-the-5-most-hated-en&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/solving&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-3-important-gestures-when-using-onshape-mobile$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-mastering-gestures-mobile</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-3-important-gestur&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-creating-sheet-metal-hems-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-creating-sheet-metal-hems</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-creating-sheet-met&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-customizing-your-display-name-for-onshape-drawings$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-customize-your-display-name-for-drawings</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-customizing-your-d&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-add-images-to-comments-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-adding-images-to-comments</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-add-images-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-assign-tasks-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-assigning-tasks-in-comments</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-assign-task&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-knit-overlapping-surfaces$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-knitting-overlapping-surfaces</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-knit-overla&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-reset-part-properties-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-resetting-custom-properties</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-reset-part-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-use-action-items-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-optimizing-onshape-action-items</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-use-action-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-inserting-hole-tables-in-onshape-drawings$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-inserting-hole-tables-in-drawings</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-inserting-hole-tab&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-moving-tabs-out-of-documents-for-project-organization$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-improving-organization</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-moving-tabs-out-of&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-pre-selecting-geometry-when-creating-planes-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-mastering-part-modeling</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-pre-selecting-geom&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-removing-users-from-your-company-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-removing-users-from-your-company</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-removing-users-fro&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-reordering-selections$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-reordering-selections</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-reordering-selecti&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-reviewing-drawings-together$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-collaborating-on-onshape-drawing-reviews</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-reviewing-drawings&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-tricks-for-viewing-assembly-mates$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-viewing-assembly-mates</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-tricks-for-viewing&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-updating-imported-geometry-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-updating-imported-geometry</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-updating-imported-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-the-email-with-file-download-link-export-option-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-secure-onshape-data-sharing-via-email</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-the-email-wi&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-the-keyboard-shortcut-select-other$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-select-other</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-the-keyboard&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-working-with-third-parties-using-onshape-enterprise$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-working-with-third-parties</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-working-with-third&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/the-4-benefits-of-saas-infrastructure-for-product-development-teams$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/4-benefits-of-saas-for-product-development</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/the-4-benefits-of-saas-infr&#x2026;&#x27; to equal &#x27;/en/blog/4-benefits-of-saas-for-produ&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/under-the-hood-how-does-onshape-really-work$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-does-onshape-really-work</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/under-the-hood-how-does-ons&#x2026;&#x27; to equal &#x27;/en/blog/how-does-onshape-really-work&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/under-the-hood-how-onshape-delivers-safe-and-continuous-deployment$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-onshape-delivers-safe-continuous-deployment</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/under-the-hood-how-onshape-&#x2026;&#x27; to equal &#x27;/en/blog/how-onshape-delivers-safe-co&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/using-switch-to-for-opening-a-part-studio-or-assembly-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/fast-navigation-to-a-part-studio-or-assembly</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/using-switch-to-for-opening&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/fast-na&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/what-is-plm-circa-2020s$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/what-is-plm-circa-2020s</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/what-is-plm-circa-2020s&#x27; to equal &#x27;/en/blog/what-is-plm-circa-2020s&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-april-17th-2020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-april-17-2020</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-december-3rd-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-december-3-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-january-29th-2020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-january-29-2020</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-january-7th-2020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-january-7-2020</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-march-31st-2020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-march-31-2020</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-march-9th-2020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-march-9-2020</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-november-12th-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-november-12-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-cloud-cad-is-faster-than-desktop$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-cloud-cad-is-faster-than-desktop</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/why-cloud-cad-is-faster-tha&#x2026;&#x27; to equal &#x27;/en/blog/why-cloud-cad-is-faster-than&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-does-3d-cad-need-pdm$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-does-3d-cad-need-pdm</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/why-does-3d-cad-need-pdm&#x27; to equal &#x27;/en/blog/why-does-3d-cad-need-pdm&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-failing-fast-in-product-design-is-often-an-advantage$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-you-want-to-fail-fast-in-product-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/why-failing-fast-in-product&#x2026;&#x27; to equal &#x27;/en/blog/why-you-want-to-fail-fast-in&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-formulatrix-chose-onshapes-real-time-collaboration-platform-for-designing-its-laboratory-automation-equipment$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-formulatrix-chose-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/why-formulatrix-chose-onsha&#x2026;&#x27; to equal &#x27;/en/blog/why-formulatrix-chose-onshape&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-loop-medical-chose-onshape-for-designing-its-needle-free-blood-collection-device$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-loop-medical-chose-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/why-loop-medical-chose-onsh&#x2026;&#x27; to equal &#x27;/en/blog/why-loop-medical-chose-onsha&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-onshape-is-committed-to-supporting-academic-research$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/committed-to-academic-research</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/why-onshape-is-committed-to&#x2026;&#x27; to equal &#x27;/en/blog/committed-to-academic-resear&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-onshapes-exploded-views-leapfrogs-over-anything-youve-previously-seen-in-the-cad-industry$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-onshapes-exploded-views-top-all-else-in-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/why-onshapes-exploded-views&#x2026;&#x27; to equal &#x27;/en/blog/why-onshapes-exploded-views-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-the-aerospace-engineer-founders-of-hermeus-chose-onshape-for-its-hypersonic-jet-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/hermeus-uses-onshape-for-hypersonic-jet-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/why-the-aerospace-engineer-&#x2026;&#x27; to equal &#x27;/en/blog/hermeus-uses-onshape-for-hyp&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/xing-mobility-chooses-onshape-for-electric-vehicle-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/xing-uses-onshape-for-electric-vehicle-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/xing-mobility-chooses-onsha&#x2026;&#x27; to equal &#x27;/en/blog/xing-uses-onshape-for-electr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/10-things-you-should-know-about-onshape-documents$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/10-ways-onshape-documents-boost-productivity</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/10-things-you-should-know-a&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/10-ways&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/3-common-mistakes-to-avoid-when-sketching$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-avoid-3-common-cad-sketching-mistakes</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/3-common-mistakes-to-avoid-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/3d-mouse-for-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-you-need-a-3d-mouse-for-3d-product-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/3d-mouse-for-cad&#x27; to equal &#x27;/en/blog/why-you-need-a-3d-mouse-for-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/3-tips-for-designing-in-context-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/3-tips-for-optimizing-with-in-context-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/3-tips-for-designing-in-con&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/3-tips-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/4-signs-your-cad-work-needs-featurescript$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/4-signs-you-could-use-cad-custom-features</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/4-signs-your-cad-work-needs&#x2026;&#x27; to equal &#x27;/en/blog/4-signs-you-could-use-cad-cu&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/7-reasons-why-onshape-better-protects-your-cad-data$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/7-ways-onshape-better-protects-your-cad-data</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/7-reasons-why-onshape-bette&#x2026;&#x27; to equal &#x27;/en/blog/7-ways-onshape-better-protec&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/a-deeper-look-at-onshapes-advanced-modeling-tools$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/an-in-depth-look-at-advanced-modeling-tools</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/a-deeper-look-at-onshapes-a&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/an-in-d&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/are-you-using-the-full-power-of-onshapes-modern-cad-platform-0$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/leveraging-the-full-power-of-modern-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/are-you-using-the-full-powe&#x2026;&#x27; to equal &#x27;/en/blog/leveraging-the-full-power-of&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/a-toast-to-spill-free-drinks-in-space$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-cloud-cad-helps-solve-problems-in-space</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/a-toast-to-spill-free-drink&#x2026;&#x27; to equal &#x27;/en/blog/how-cloud-cad-helps-solve-pr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/building-community-ptcs-onshape-user-groups-in-the-time-of-covid-19$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-you-should-join-an-online-user-group</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/building-community-ptcs-ons&#x2026;&#x27; to equal &#x27;/en/blog/why-you-should-join-an-onlin&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/cad-for-ipad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/ipad-cad-enhance-productivity-and-creativity</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/cad-for-ipad&#x27; to equal &#x27;/en/blog/ipad-cad-enhance-productivit&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/cad-for-students$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/investing-in-a-cad-career-try-the-education-plan</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/cad-for-students&#x27; to equal &#x27;/en/blog/investing-in-a-cad-career-tr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/cad-on-a-chromebook$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/cloud-cad-from-anywhere-on-any-device</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/cad-on-a-chromebook&#x27; to equal &#x27;/en/blog/cloud-cad-from-anywhere-on-a&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/comparing-cad-systems-the-dos-and-donts$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/the-dos-and-donts-of-comparing-cad-systems</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/comparing-cad-systems-the-d&#x2026;&#x27; to equal &#x27;/en/blog/the-dos-and-donts-of-compari&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/consumer-product-designers-what-are-you-doing-to-reduce-time-to-market$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/consumer-product-design-can-reduce-time-to-market</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/consumer-product-designers-&#x2026;&#x27; to equal &#x27;/en/blog/consumer-product-design-can-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/creating-a-featurescript-feature-in-90-seconds$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-create-a-custom-feature-in-90-seconds</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/creating-a-featurescript-fe&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/creating-your-own-built-in-cad-features$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-create-your-own-built-in-cad-features</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/creating-your-own-built-in-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/custom-feature-spotlight-how-to-use-the-o-ring-feature$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-custom-features-make-creating-o-rings-easy</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/custom-feature-spotlight-ho&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-cus&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/custom-feature-spotlight-multi-plane$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-create-evenly-spaced-construction-planes</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/custom-feature-spotlight-mu&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/custom-feature-spotlight-port-feature$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/save-time-with-the-straight-thread-port-feature</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/custom-feature-spotlight-po&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/save-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/customizing-cad-for-industrial-component-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/industrial-component-design-how-to-customize-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/customizing-cad-for-industr&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/industr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/engineer-uses-onshape-to-bring-iconic-coffee-grinder-calculator-back-to-life$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/reviving-the-worlds-first-hand-held-calculator</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/engineer-uses-onshape-to-br&#x2026;&#x27; to equal &#x27;/en/blog/reviving-the-worlds-first-ha&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/exploring-the-power-of-custom-cad-features-for-furniture-first-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-design-furniture-with-custom-cad-features</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/exploring-the-power-of-cust&#x2026;&#x27; to equal &#x27;/en/blog/how-to-design-furniture-with&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/extending-onshape-with-custom-features$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-onshape-fixed-old-cads-big-features-flaw</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/extending-onshape-with-cust&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-ons&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/four-ways-you-can-lose-your-cad-files$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/4-ways-to-lose-cad-files-and-how-to-prevent-it</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/four-ways-you-can-lose-your&#x2026;&#x27; to equal &#x27;/en/blog/4-ways-to-lose-cad-files-and&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/full-cloud-cad-speeds-up-jig-fixture-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-cloud-cad-speeds-up-jig-and-fixture-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/full-cloud-cad-speeds-up-ji&#x2026;&#x27; to equal &#x27;/en/blog/how-cloud-cad-speeds-up-jig-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/hidden-handcuffs-what-your-old-cad-vendor-wont-tell-you$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/what-your-old-cad-vendor-wont-tell-you</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/hidden-handcuffs-what-your-&#x2026;&#x27; to equal &#x27;/en/blog/what-your-old-cad-vendor-won&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-cloud-cad-tools-can-help-save-your-stem-classroom-this-year-and-next$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-cloud-cad-can-save-your-stem-class</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-cloud-cad-tools-can-hel&#x2026;&#x27; to equal &#x27;/en/blog/how-cloud-cad-can-save-your-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-companies-can-use-onshape-configurations-to-help-their-clients-design-and-purchase-customized-products$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/design-custom-products-with-onshape-configurations</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-companies-can-use-onsha&#x2026;&#x27; to equal &#x27;/en/blog/design-custom-products-with-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-early-is-your-consumer-product-design-team-focusing-on-manufacturability$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/when-to-focus-on-your-products-manufacturability</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-early-is-your-consumer-&#x2026;&#x27; to equal &#x27;/en/blog/when-to-focus-on-your-produc&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-much-attention-are-your-engineers-paying-to-product-aesthetics$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/the-importance-of-aesthetics-to-consumer-products</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-much-attention-are-your&#x2026;&#x27; to equal &#x27;/en/blog/the-importance-of-aesthetics&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-to-assess-your-onshape-models-for-structural-weakness$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-assess-your-models-for-structural-weakness</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-to-assess-your-onshape-&#x2026;&#x27; to equal &#x27;/en/blog/how-to-assess-your-models-fo&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-to-avoid-being-enshrined-in-the-consumer-product-design-hall-of-shame-new-ebook$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-avoid-a-consumer-product-design-failure</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-to-avoid-being-enshrine&#x2026;&#x27; to equal &#x27;/en/blog/how-to-avoid-a-consumer-prod&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-to-compare-onshape-plans$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-choose-the-right-cad-plan-for-your-business</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-to-compare-onshape-plans&#x27; to equal &#x27;/en/blog/how-to-choose-the-right-cad-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-to-future-proof-your-engineering-business-by-re-examining-software-costs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-future-proof-your-business-based-on-cad-roi</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-to-future-proof-your-en&#x2026;&#x27; to equal &#x27;/en/blog/how-to-future-proof-your-bus&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-to-set-up-your-first-robotics-team-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-onboard-your-first-robotics-team</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-to-set-up-your-first-ro&#x2026;&#x27; to equal &#x27;/en/blog/how-to-onboard-your-first-ro&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-to-set-up-your-onshape-classroom-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/teachers-how-to-set-up-your-onshape-classroom</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-to-set-up-your-onshape-&#x2026;&#x27; to equal &#x27;/en/blog/teachers-how-to-set-up-your-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-to-use-cloud-cad-to-improve-order-fulfillment-inventory-management$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-cloud-cad-improves-order-fulfillment-inventory</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-to-use-cloud-cad-to-imp&#x2026;&#x27; to equal &#x27;/en/blog/how-cloud-cad-improves-order&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-to-use-google-drive-and-dropbox-to-manage-legacy-cad-data$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-use-shared-drives-to-manage-legacy-cad-data</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-to-use-google-drive-and&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/ikea-relies-on-photo-rendering$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-render-photorealistic-images-like-ikea</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/ikea-relies-on-photo-render&#x2026;&#x27; to equal &#x27;/en/blog/how-to-render-photorealistic&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/introducing-onshape-education-enterprise$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-you-need-onshape-education-enterprise</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/introducing-onshape-educati&#x2026;&#x27; to equal &#x27;/en/blog/why-you-need-onshape-educati&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/make-better-design-decisions-with-real-time-analytics-and-controls$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/make-better-design-decisions-with-real-time-tools</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/make-better-design-decision&#x2026;&#x27; to equal &#x27;/en/blog/make-better-design-decisions&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/mit-uses-onshape-to-launch-new-professional-course-on-additive-manufacturing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-mit-teaches-additive-manufacturing</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/mit-uses-onshape-to-launch-&#x2026;&#x27; to equal &#x27;/en/blog/why-mit-teaches-additive-man&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/modeling-a-functional-3d-printed-violin-in-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/make-beautiful-music-with-a-3d-printed-violin</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/modeling-a-functional-3d-pr&#x2026;&#x27; to equal &#x27;/en/blog/make-beautiful-music-with-a-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/move-to-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/all-the-reasons-cad-users-are-moving-to-the-cloud</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/move-to-cloud-cad&#x27; to equal &#x27;/en/blog/all-the-reasons-cad-users-ar&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-helps-1000-robotics-students-reclaim-their-lost-season$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-fix-the-world-with-cloud-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/onshape-helps-1000-robotics&#x2026;&#x27; to equal &#x27;/en/blog/how-to-fix-the-world-with-cl&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshapes-10-guiding-principles-for-improving-user-experience$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/the-10-guiding-principles-for-improving-ux</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/onshapes-10-guiding-princip&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/the-10-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshapes-custom-feature-hackathon-provides-fresh-look-at-the-versatility-of-featurescript$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/the-5-best-custom-feature-hacks-of-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/onshapes-custom-feature-hac&#x2026;&#x27; to equal &#x27;/en/blog/the-5-best-custom-feature-ha&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-unveils-simultaneous-sheet-metal-tools$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/rethinking-sheet-metal-for-more-flexibility</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/onshape-unveils-simultaneou&#x2026;&#x27; to equal &#x27;/en/blog/rethinking-sheet-metal-for-m&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/parametric-modeling-2.0-a-modern-approach-to-in-context-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/a-modern-approach-to-parametic-modeling</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/parametric-modeling-2.0-a-m&#x2026;&#x27; to equal &#x27;/en/blog/a-modern-approach-to-paramet&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/parametric-modeling-2.0-a-modern-approach-to-sheet-metal-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/a-modern-approach-to-sheet-metal-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/parametric-modeling-2.0-a-m&#x2026;&#x27; to equal &#x27;/en/blog/a-modern-approach-to-sheet-m&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/parametric-modeling-2.0-a-modern-approach-to-standard-content$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/a-modern-approach-to-standard-content</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/parametric-modeling-2.0-a-m&#x2026;&#x27; to equal &#x27;/en/blog/a-modern-approach-to-standar&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/product-design-advice-for-hardware-startups-new-ebook$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/product-design-advice-for-hardware-startups</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/product-design-advice-for-h&#x2026;&#x27; to equal &#x27;/en/blog/product-design-advice-for-ha&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/q-a-about-onshape-sheet-metal-with-scott-harris$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/inside-cloud-based-simultaneous-sheet-metal</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/q-a-about-onshape-sheet-met&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/inside-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/reality-check-how-strong-is-your-supply-chain$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/reality-check-how-strong-is-your-supply-chain</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/reality-check-how-strong-is&#x2026;&#x27; to equal &#x27;/en/blog/reality-check-how-strong-is-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/rethinking-ambulance-design-mit-launched-startup-improves-healthcare-in-rural-tanzania$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/optimizing-ambulance-design-with-cloud-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/rethinking-ambulance-design&#x2026;&#x27; to equal &#x27;/en/blog/optimizing-ambulance-design-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/speed-up-your-furniture-design-with-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-expedite-furniture-design-with-cloud-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/speed-up-your-furniture-des&#x2026;&#x27; to equal &#x27;/en/blog/how-to-expedite-furniture-de&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-assigning-a-state-to-your-design-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-assigning-a-state-to-your-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-assigning-a-state-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-customizing-the-shortcut-toolbar$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-customizing-the-shortcut-toolbar</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-customizing-the-sh&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-designing-fixtures$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-designing-fixtures</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-designing-fixtures&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-enabling-two-factor-authentication-2fa-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-enabling-two-factor-authentication</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-enabling-two-facto&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-exporting-sketches-with-sheet-metal-dxf-dwgs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-exporting-sheet-metal-dxf-dwg-sketches</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-exporting-sketches&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-green-check-to-insert-parts$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-green-check-to-insert-parts</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-green-check-to-ins&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-hide-parts-before-editing-in-context-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-hide-parts-before-editing-in-context</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-hide-parts-before-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-assign-multiple-approvers-to-a-release-candidate$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-assign-multiple-approvers</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-assign-mult&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-edit-standard-content-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-edit-standard-content</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-edit-standa&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-filter-the-feature-list-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-filter-the-feature-list</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-filter-the-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-save-analytics-dashboards-in-onshape-enterprise$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-saving-analytics-dashboards-enterprise</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-save-analyt&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-use-replace-part-when-migrating-to-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-replace-part-when-migrating-to-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-use-replace&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-use-window-select-in-the-modeling-space$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-use-window-select</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-use-window-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-visualize-hidden-entities-between-history-entries$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-hidden-entities-between-history-entries</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-visualize-h&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-inserting-multiple-pieces-of-standard-content-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-inserting-multiple-standard-content-pieces</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-inserting-multiple&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/using-custom-features-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/using-custom-features</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/using-custom-features-in-onsh&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/using-cust&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/machine-part-design-case-study$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/machine-part-design-case-study</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/machine-part-design-case-study&#x27; to equal &#x27;/en/resource-center/videos/machine-pa&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-essential-tips-restore$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshape-essential-tips-restore</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/onshape-essential-tips-restore&#x27; to equal &#x27;/en/resource-center/videos/onshape-es&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/using-analytics-in-onshape-enterprise-08-14-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/using-analytics-enterprise</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/using-analytics-in-onshape-en&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/using-anal&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/back-to-basics-configurations-in-onshape-071819$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/back-to-basics-configurations</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/back-to-basics-configurations&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/back-to-ba&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/synapse-product-development-embraces-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/synapse-product-development-embraces-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/synapse-product-development-e&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/synapse-pr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-essentials-032218$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshape-essentials-april-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/onshape-essentials-032218&#x27; to equal &#x27;/en/resource-center/videos/onshape-es&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/webinar-variables-in-onshape-july-19-2016$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/using-variables</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/webinar-variables-in-onshape-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/using-vari&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/loft$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/loft-onshape-cad-tutorial</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/loft&#x27; to equal &#x27;/en/resource-center/videos/loft-onsha&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/tips-and-tricks-to-turbocharge-onshape-performance-and-speed-110618$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/tips-tricks-to-turbocharge-performance-speed</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/tips-and-tricks-to-turbocharg&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/tips-trick&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-for-the-k12-classroom$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshape-for-the-k12-classroom</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/onshape-for-the-k12-classroom&#x27; to equal &#x27;/en/resource-center/videos/onshape-fo&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/simultaneous-bill-of-materials$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/simultaneous-bill-of-materials</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/simultaneous-bill-of-materials&#x27; to equal &#x27;/en/resource-center/videos/simultaneo&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/enterprise-grade-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshapes-enterprise-grade-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/enterprise-grade-cad&#x27; to equal &#x27;/en/resource-center/videos/onshapes-e&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/announcing-onshape-enterprise-053118$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/announcing-onshape-enterprise</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/announcing-onshape-enterprise&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/announcing&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/managing-bom-with-onshape-07-25-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/managing-a-bill-of-materials</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/managing-bom-with-onshape-07-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/managing-a&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/creating-community-how-your-business-can-supercharge-its-online-customer-relationships$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/how-to-supercharge-your-customer-relationships</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/creating-community-how-your-b&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/how-to-sup&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/organizing-your-company-in-a-cloud-based-design-system$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/organizing-a-companys-cloud-based-design-system</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/organizing-your-company-in-a-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/organizing&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onu-publishing-cad-content-to-the-web-12-13-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/partner-spotlight-onu-publishing-cad-to-the-web</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/onu-publishing-cad-content-to&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/partner-sp&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/customer-story-rest-devices$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/customer-story-rest-devices</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/customer-story-rest-devices&#x27; to equal &#x27;/en/resource-center/videos/customer-s&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/designing-mechanisms-and-linkages-in-onshape-08-16-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/designing-mechanisms-linkages</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/designing-mechanisms-and-link&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/designing-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/mastering-design-to-purchase-with-openbom-for-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/mastering-design-to-purchase-with-openbom</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/mastering-design-to-purchase-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/mastering-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/editing-in-the-context-of-the-assembly-in-onshape-112918$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/editing-in-the-context-of-the-assembly</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/editing-in-the-context-of-the&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/editing-in&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-essential-tips-best-practices-when-importing-data$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshape-essentials-best-practices-when-importing-data</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/onshape-essential-tips-best-p&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/onshape-es&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-professional-trial-overview$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshape-professionaltrial-overview</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/onshape-professional-trial-ov&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/onshape-pr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/6-important-onshape-tips-for-engineers-to-work-from-anywhere$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/6-important-onshape-tips-to-work-from-anywhere</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/6-important-onshape-tips-for-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/6-importan&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-demonstration-leaf-blower$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshape-demonstration-leaf-blower</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/onshape-demonstration-leaf-bl&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/onshape-de&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/introducing-parametric-modeling-2.0$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/introducing-parametric-modeling-20</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/introducing-parametric-modeli&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/introducin&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/what-is-onshape-and-why-should-you-care$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/what-is-onshape-and-why-should-you-care</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/what-is-onshape-and-why-shoul&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/what-is-on&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/modern-trends-in-engineering-task-management-the-cloud-based-design-for-your-business-series$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/modern-trends-in-engineering-task-management</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/modern-trends-in-engineering-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/modern-tre&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/real-time-analytics-and-control$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshapes-real-time-analytics-controls</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/real-time-analytics-and-contr&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/onshapes-r&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/drawings-tips-and-tricks-07-18-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/drawing-tips-tricks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/drawings-tips-and-tricks-07-1&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/drawing-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/hirebotics-chooses-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/hirebotics-chooses-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/hirebotics-chooses-onshape&#x27; to equal &#x27;/en/resource-center/videos/hirebotics&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/managing-documents-with-folders-11-07-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/managing-documents-with-folders</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/managing-documents-with-folde&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/managing-d&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/tips-and-tricks-for-creating-configurations-in-onshape-112119$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/tips-tricks-for-creating-configurations</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/tips-and-tricks-for-creating-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/tips-trick&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/solving-modern-product-development-problems-an-expert-panel-discussion-092619$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/solving-modern-product-development-problems</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/solving-modern-product-develo&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/solving-mo&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/how-to-upgrade-to-onshape-professional$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/how-to-upgrade-to-onshape-professional</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/how-to-upgrade-to-onshape-pro&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/how-to-upg&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/split-face$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/split-face</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/split-face&#x27; to equal &#x27;/en/resource-center/videos/split-face&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/5-reasons-why-pdm-is-more-important-than-cad-121118$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/5-reasons-why-pdm-is-more-important-than-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/5-reasons-why-pdm-is-more-imp&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/5-reasons-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-cad-tutorial-build-your-first-assembly$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/build-your-first-assembly</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/onshape-cad-tutorial-build-yo&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/build-your&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/assemble-gears$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/assemble-gears</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/assemble-gears&#x27; to equal &#x27;/en/resource-center/videos/assemble-g&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/redefining-work-in-process-advanced-data-management-without-bottlenecks-022819$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/advanced-data-management-without-bottlenecks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/redefining-work-in-process-ad&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/advanced-d&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/ask-me-anything-with-jon-hirschtick-101618$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/ask-me-anything-with-jon-hirschtick</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/ask-me-anything-with-jon-hirs&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/ask-me-any&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/jon-hirschtick-founders$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/jon-hirschtick-founders-with-a-vision</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/jon-hirschtick-founders&#x27; to equal &#x27;/en/resource-center/videos/jon-hirsch&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/solving-the-cad-data-exchange-conundrum-052319$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/solving-the-cad-data-exchange-conundrum</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/solving-the-cad-data-exchange&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/solving-th&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/designing-with-sheet-metal-in-onshape-01-23-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/designing-with-sheet-metal</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/designing-with-sheet-metal-in&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/designing-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/company-wide-administration$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/using-company-wide-administration-tools</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/company-wide-administration&#x27; to equal &#x27;/en/resource-center/videos/using-comp&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/5-critical-conclusions-from-the-state-of-product-design-hardware-development-2019-report-082219$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/state-of-product-design-hardware-development-report</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/5-critical-conclusions-from-t&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/state-of-p&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-story$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/our-story</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/onshape-story&#x27; to equal &#x27;/en/resource-center/videos/our-story&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/taking-control-of-the-design-process-with-onshape-enterprise-120418$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/taking-control-of-the-design-process-enterprise</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/taking-control-of-the-design-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/taking-con&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/solving-the-five-most-hated-engineering-tasksr-111518$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/solving-the-5-most-hated-engineering-tasks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/solving-the-five-most-hated-e&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/solving-th&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/top-5-product-development-improvements-to-consider-in-2020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/top-5-product-development-improvements</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/top-5-product-development-imp&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/top-5-prod&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/5-ways-to-improve-your-consumer-product-design-workflow-05022019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/5-improvements-to-consumer-product-design-workflow</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/5-ways-to-improve-your-consum&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/5-improvem&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/custom-properties-drawings-and-drawing-templates-webinar-03-21-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/custom-properties-drawings-drawing-templates</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/custom-properties-drawings-an&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/custom-pro&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/all-the-ways-you-can-use-mate-connectors-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/all-the-ways-you-can-use-mate-connectors</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/all-the-ways-you-can-use-mate&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/all-the-wa&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/6-reasons-why-onshape-is-the-best-choice-for-solidworks-users$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/why-onshape-is-the-best-choice-for-solidworks-users</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/6-reasons-why-onshape-is-the-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/why-onshap&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-essentials-02-13-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshape-essentials</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/onshape-essentials-02-13-18&#x27; to equal &#x27;/en/resource-center/videos/onshape-es&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/teams-choose-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/teams-choose-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/teams-choose-onshape&#x27; to equal &#x27;/en/resource-center/videos/teams-choo&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/releasing-designs-in-onshape-10-10-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/releasing-designs</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/releasing-designs-in-onshape-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/releasing-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/customizing-release-workflows-in-onshape-enterprise-062019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/customizing-release-workflows</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/customizing-release-workflows&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/customizin&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-for-the-university-classroom$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/cad-for-the-university-classroom</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/onshape-for-the-university-cl&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/cad-for-th&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/tips-for-complex-assembly-motion-in-onshape-06-12-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/tips-for-complex-assembly-motion</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/tips-for-complex-assembly-mot&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/tips-for-c&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/10-power-user-sketch-tips-053019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/10-power-user-sketch-tips</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/10-power-user-sketch-tips-053&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/10-power-u&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/the-pitfalls-of-pdm-and-how-to-avoid-them$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/the-pitfalls-of-pdm-and-how-to-avoid-them</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/the-pitfalls-of-pdm-and-how-t&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/the-pitfal&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/simsolid-comes-to-the-cloud-09-19-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/simsolid-comes-to-the-cloud</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/simsolid-comes-to-the-cloud-0&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/simsolid-c&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/surface-modeling-in-onshape-120618$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/surface-modeling</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/surface-modeling-in-onshape-1&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/surface-mo&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/configurations-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/configurations</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/configurations-in-onshape&#x27; to equal &#x27;/en/resource-center/videos/configurat&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/best-practices-for-communicating-your-designs-with-vendors-customers-and-other-non-cad-users$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/best-practices-for-communicating-with-non-cad-users</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/best-practices-for-communicat&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/best-pract&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/creating-curves-in-onshape-08-24-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/creating-curves</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/creating-curves-in-onshape-08&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/creating-c&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/customizing-cad-for-industrial-component-design-080317$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/customizing-cad-for-industrial-component-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/customizing-cad-for-industria&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/customizin&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/reasons-why-engineers-hate-their-cad-system$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/reasons-why-engineers-hate-their-cad-system</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/reasons-why-engineers-hate-th&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/reasons-wh&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/surface-modeling-tips-and-tricks-in-onshape-091919$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/surface-modeling-tips-tricks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/surface-modeling-tips-and-tri&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/surface-mo&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/multi-part-sheet-metal-design-02-20-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/multi-part-sheet-metal-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/multi-part-sheet-metal-design&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/multi-part&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/comparing-cad-systems-the-pros-and-cons-091219$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/comparing-cad-systems-pros-cons</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/comparing-cad-systems-the-pro&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/comparing-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/getting-started-with-openbom-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/getting-started-with-openbom</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/getting-started-with-openbom-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/getting-st&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/getting-started-with-onshapes-learning-center-08-09-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/getting-started-with-onshapes-learning-center</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/getting-started-with-onshapes&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/getting-st&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/navigating-onshape-for-solidworks-and-ptc-creo-users-07-31-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/navigating-onshape-for-solidworks-ptc-creo-users</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/navigating-onshape-for-solidw&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/navigating&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/part-number-generation-improvements$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/part-number-generation-improvements</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/part-number-generation-improv&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/part-numbe&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/custom-properties-balloons-and-bills-of-materials-in-onshape-041918$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/custom-properties-balloons-bills-of-materials</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/custom-properties-balloons-an&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/custom-pro&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/managing-your-design-process-with-external-contractors-and-suppliers$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/managing-external-contractors-suppliers</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/managing-your-design-process-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/managing-e&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/tips-and-tricks-for-sheet-metal-design-09-14-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/tips-tricks-for-sheet-metal-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/tips-and-tricks-for-sheet-met&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/tips-trick&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/securing-your-cad-data-with-onshape-11-30-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/securing-your-cad-data</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/securing-your-cad-data-with-o&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/securing-y&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/introduction-to-pdm-data-management-best-practices-111419$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/intro-to-pdm-data-management-best-practices</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/introduction-to-pdm-data-mana&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/intro-to-p&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/introducing-onshape-configurations$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/introducing-onshape-configurations</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/introducing-onshape-configura&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/introducin&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/cad-masterclass-5-expert-modeling-skills-12-28-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/cad-masterclass-5-expert-modeling-skills-you-need</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/cad-masterclass-5-expert-mode&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/cad-master&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/advanced-assembly-motion-in-onshape-013119$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/advanced-assembly-motion</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/advanced-assembly-motion-in-o&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/advanced-a&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/measure-tool$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/measure-tool</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/measure-tool&#x27; to equal &#x27;/en/resource-center/videos/measure-to&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/advanced-tips-tricks-for-creating-exploded-views-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/advanced-tips-tricks-for-creating-exploded-views</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/advanced-tips-tricks-for-crea&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/advanced-t&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/tips-for-working-with-sheet-metal-flat-patterns-in-onshape-06-26-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/tips-for-working-with-sheet-metal-flat-patterns</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/tips-for-working-with-sheet-m&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/tips-for-w&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/designing-top-down-with-multi-part-part-studios-01-25-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/designing-top-down-with-multi-part-part-studios</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/designing-top-down-with-multi&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/designing-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/simsolid-cloud-03-01-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/modern-fea-with-simsolid-and-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/simsolid-cloud-03-01-18&#x27; to equal &#x27;/en/resource-center/videos/modern-fea&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/best-practices-for-managing-documents-10-12-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/best-practices-for-managing-documents</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/best-practices-for-managing-d&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/best-pract&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/first-look-at-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/first-look-at-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/first-look-at-onshape&#x27; to equal &#x27;/en/resource-center/videos/first-look&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/webinar-creating-planes-in-onshape-july-12-2016$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/creating-planes</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/webinar-creating-planes-in-on&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/creating-p&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/in-context-vs-derived$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/in-context-vs-derived-vs-a-multi-part-studio</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/in-context-vs-derived&#x27; to equal &#x27;/en/resource-center/videos/in-context&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/engineer-to-order-best-practices-new-technologies-improve-engineering-effectiveness-111318$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/engineer-to-order-best-practices-improving-effectiveness</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/engineer-to-order-best-practi&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/engineer-t&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/design-in-context$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/designing-in-context</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/design-in-context&#x27; to equal &#x27;/en/resource-center/videos/designing-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/premier-custom-built$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/customer-story-premier-custom-built</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/premier-custom-built&#x27; to equal &#x27;/en/resource-center/videos/customer-s&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/machine-design-with-3d-printing-how-cutsforth-innovates-from-design-to-production$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/how-cutsforth-innovates-from-design-to-production</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/machine-design-with-3d-printi&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/how-cutsfo&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/extending-cads-business-value-beyond-core-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/extending-cads-business-value-beyond-core-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/extending-cads-business-value&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/extending-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/using-the-onshape-mobile-app-041018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/using-the-onshape-mobile-app</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/using-the-onshape-mobile-app-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/using-the-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/working-with-libraries-of-parts-in-onshape-102318$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/working-with-libraries-of-parts</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/working-with-libraries-of-par&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/working-wi&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/creating-custom-features-06-15-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/creating-a-custom-feature-with-featurescript</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/creating-custom-features-06-1&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/creating-a&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/from-solidworks-to-onshape-why-forward-thinking-companies-are-making-the-switch$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/making-the-switch-from-solidworks-to-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/from-solidworks-to-onshape-wh&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/making-the&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/communicate-effectively-onshape-comments-04-25-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/communicate-effectively-using-comments</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/communicate-effectively-onsha&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/communicat&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/top-5-time-wasters-in-your-old-cad-system-052218$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/top-5-time-wasters-in-your-old-cad-system</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/top-5-time-wasters-in-your-ol&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/top-5-time&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/technical-best-practices-for-managing-and-sharing-supplier-parts-040919$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/best-practices-for-managing-supplier-parts</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/technical-best-practices-for-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/best-pract&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/dixie-iron-works-switches-to-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/dixie-iron-works-switches-to-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/dixie-iron-works-switches-to-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/dixie-iron&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/welcome-to-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/welcome-to-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/welcome-to-onshape&#x27; to equal &#x27;/en/resource-center/videos/welcome-to&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/using-composite-parts-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/using-composite-parts</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/using-composite-parts-in-onsh&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/using-comp&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/top-5-communication-breakdowns-in-the-design-process-and-how-to-avoid-them-072519$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/5-communication-breakdowns-in-the-design-process</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/top-5-communication-breakdown&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/5-communic&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/optimizing-for-speed-and-control-in-hardware-design-manufacturing-with-fictiv-and-onshape-071918-0$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/optimizing-for-speed-control-in-hardware-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/optimizing-for-speed-and-cont&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/optimizing&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/creating-surface-models-in-onshape-11-09-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/creating-surface-models</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/creating-surface-models-in-on&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/creating-s&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/introducing-exploded-views-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/introducing-exploded-views-in-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/introducing-exploded-views-in&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/introducin&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/bill-of-materials-tips-and-tricks-in-onshape-082919$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/bill-of-materials-tips-tricks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/bill-of-materials-tips-and-tr&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/bill-of-ma&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/learn-featurescript-in-60-minutes$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/learn-featurescript-in-60-minutes</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/learn-featurescript-in-60-min&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/learn-feat&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^announcing-design-data-management-2-0-at-d3d-live-2018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/design-data-management-20-at-develop-3d-live</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/&#x27; to equal &#x27;/en/resource-center/videos/design-dat&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/split$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/split</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/split&#x27; to equal &#x27;/en/resource-center/videos/split&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/advanced-part-modeling-06-29-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/advanced-part-modeling</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/advanced-part-modeling-06-29-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/advanced-p&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/creating-assembly-configurations-in-onshape-052119$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/creating-assembly-configurations</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/creating-assembly-configurati&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/creating-a&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/accelerating-product-development-with-the-cloud-4-takeaways-from-new-research$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/4-ways-the-cloud-accelerates-product-development</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/accelerating-product-developm&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/4-ways-the&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-momentum$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/switching-from-old-cad-to-new-cad-with-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/onshape-momentum&#x27; to equal &#x27;/en/resource-center/videos/switching-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-sketching-tips-for-power-users-08-28-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/sketching-tips-for-power-users</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/onshape-sketching-tips-for-po&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/sketching-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/customize-create-cad-features-05-18-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/customize-and-create-your-own-cad-features</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/customize-create-cad-features&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/customize-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/calculating-the-return-on-investment-of-your-cad-system-06-07-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/calculating-the-roi-of-your-cad-system</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/calculating-the-return-on-inv&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/calculatin&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/boosting-cad-security-protecting-ip$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/boosting-cad-security-protecting-ip</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/boosting-cad-security-protect&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/boosting-c&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/sheet-metal-essentials-07-13-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/sheet-metal-essentials</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/sheet-metal-essentials-07-13-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/sheet-meta&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/advanced-modeling-tools-and-workflows-08-17-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/advanced-modeling-tools-and-workflows</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/advanced-modeling-tools-and-w&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/advanced-m&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/patterns-in-onshape-04-20-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/using-patterns</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/patterns-in-onshape-04-20-17&#x27; to equal &#x27;/en/resource-center/videos/using-patt&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/layout-sketching-onshape-04-13-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/layout-sketching</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/layout-sketching-onshape-04-1&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/layout-ske&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/the-top-10-onshape-improvements-of-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/the-top-10-onshape-improvements-of-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/the-top-10-onshape-improvemen&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/the-top-10&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/mastering-top-down-design-081519$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/mastering-top-down-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/mastering-top-down-design-081&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/mastering-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/creating-injection-mold-tooling-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/creating-injection-mold-tooling</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/creating-injection-mold-tooli&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/creating-i&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/top-10-tech-tips-of-this-year-112018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/top-10-tech-tips-of-this-year</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/top-10-tech-tips-of-this-year&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/top-10-tec&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/using-assembly-mates-in-onshape-02-15-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/using-assembly-mates</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/using-assembly-mates-in-onsha&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/using-asse&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/four-challenges-in-medical-devices-and-how-to-solve-them-103018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/medical-device-design-challenges-how-to-solve-them</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/four-challenges-in-medical-de&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/medical-de&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/assemble-models-in-onshape-september-17th-2015$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/assemble-models</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/assemble-models-in-onshape-se&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/assemble-m&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/how-to-successfully-migrate-from-solidworks-to-onshape-070919$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/successfully-migrating-from-solidworks-to-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/how-to-successfully-migrate-f&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/successful&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/how-engineering-teams-optimize-collaboration-with-onshape-a-panel-discussion$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/how-can-engineering-teams-optimize-collaboration</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/how-engineering-teams-optimiz&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/how-can-en&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/setting-up-a-classroom-with-onshape-07-27-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/how-to-set-up-a-classroom-education-plan</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/setting-up-a-classroom-with-o&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/how-to-set&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/tips-and-tricks-for-working-with-imported-models-in-onshape-08-23-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/tips-tricks-for-working-with-imported-models</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/tips-and-tricks-for-working-w&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/tips-trick&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/introducing-release-management-and-approval-workflows-040518$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/introducing-release-management-approval-workflows</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/introducing-release-managemen&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/introducin&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-manifesto$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshape-manifesto</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/onshape-manifesto&#x27; to equal &#x27;/en/resource-center/videos/onshape-ma&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/managed-in-context-design-in-onshape-08-29-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/managed-in-context-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/managed-in-context-design-in-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/managed-in&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/the-beginners-guide-to-building-custom-cad-features-in-featurescript-010819$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/beginners-guide-to-featurescript</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/the-beginners-guide-to-buildi&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/beginners-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/importing-solidworks-configurations-into-onshape-08-30-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/importing-solidworks-configurations-into-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/importing-solidworks-configur&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/importing-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/john-rousseau-experts$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/john-rousseau-cloud-and-mobile-experts</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/john-rousseau-experts&#x27; to equal &#x27;/en/resource-center/videos/john-rouss&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/mastering-3d-modeling$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/mastering-3d-modeling</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/mastering-3d-modeling&#x27; to equal &#x27;/en/resource-center/videos/mastering-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/managing-complex-design-projects-with-git-style-branching-merging-101719$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/design-projects-with-git-style-branching-merging</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/managing-complex-design-proje&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/design-pro&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-sprint-100-a-look-back-at-onshapes-top-innovations-080119$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshapes-top-innovations</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/onshape-sprint-100-a-look-bac&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/onshapes-t&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/designing-linkages-in-context$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/designing-linkages-in-context</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/designing-linkages-in-context&#x27; to equal &#x27;/en/resource-center/videos/designing-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/how-capsonic-automotive-aerospace-extends-cad-visibility-access-and-security-with-onshape-enterprise-06-19-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/customer-story-capsonic-automotive</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/how-capsonic-automotive-aeros&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/customer-s&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/traditional-cad-pains-installation$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/stop-wasting-time-downloading-and-installing-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/traditional-cad-pains-install&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/stop-wasti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/real-time-data-management$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshapes-real-time-data-management</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/real-time-data-management&#x27; to equal &#x27;/en/resource-center/videos/onshapes-r&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-essential-tips-keeping-features-simple$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshape-essential-tips-keeping-features-simple</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/onshape-essential-tips-keepin&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/onshape-es&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/taiga-motors-switches-to-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/taiga-motors-switches-to-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/taiga-motors-switches-to-onsh&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/taiga-moto&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/managing-your-design-process-with-external-contractors-and-suppliers-06-14-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/managing-design-process-with-external-contractors</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/managing-your-design-process-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/managing-d&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/top-down-design-techniques-in-onshape-03-07-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/top-down-design-techniques</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/top-down-design-techniques-in&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/top-down-d&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/customer-story-avatech$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/customer-story-avatech</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/customer-story-avatech&#x27; to equal &#x27;/en/resource-center/videos/customer-s&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/plastic-design-and-consumer-product-case-study$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/plastic-design-and-consumer-product-case-study</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/plastic-design-and-consumer-p&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/plastic-de&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/beyond-prototyping-cutting-edge-tools-to-accelerate-design-and-manufacturing-for-hardware-startups-100918$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/prototype-design-manufacturing-for-hardware-startups</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/beyond-prototyping-cutting-ed&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/prototype-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/using-onshape-mobile-04-11-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/using-onshape-mobile</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/using-onshape-mobile-04-11-17&#x27; to equal &#x27;/en/resource-center/videos/using-onsh&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/draft-boolean-and-other-mold-making-tools-in-onshape-06-21-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/draft-boolean-and-other-mold-making-tools</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/draft-boolean-and-other-mold-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/draft-bool&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/how-engineering-teams-can-adapt-to-changing-work-environments-a-panel-discussion$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/how-engineers-can-adapt-to-changing-work-environments</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/how-engineering-teams-can-ada&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/how-engine&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/moving-from-solidworks-to-onshape-top-tips-and-best-practices-may15$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/moving-from-solidworks-to-onshape-best-practices</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/moving-from-solidworks-to-ons&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/moving-fro&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/drawings$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/drawings-essential-training</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/drawings&#x27; to equal &#x27;/en/resource-center/videos/drawings-e&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/cutsforth-switches-to-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/customer-story-cutsforth</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/cutsforth-switches-to-onshape&#x27; to equal &#x27;/en/resource-center/videos/customer-s&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/introducing-onshape-sheet-metal$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/introducing-sheet-metal</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/introducing-onshape-sheet-met&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/introducin&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/from-solidworks-to-onshape-the-similarities-and-the-differences-121918$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/similarities-differences-onshape-vs-solidworks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/from-solidworks-to-onshape-th&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/similariti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/measure-mass-properties-and-more$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/measure-mass-properties-and-more</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/measure-mass-properties-and-m&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/measure-ma&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/sheet-metal$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/designing-in-sheet-metal</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/sheet-metal&#x27; to equal &#x27;/en/resource-center/videos/designing-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/using-featurescript-features-june-14th-2016$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/using-featurescript-features</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/using-featurescript-features-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/using-feat&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/managing-design-teams-collaboratively-with-github-style-branching-and-merging-07-03-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/managing-design-teams-with-branching-merging</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/managing-design-teams-collabo&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/managing-d&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/customer-story-afterdark$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/customer-story-afterdark</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/customer-story-afterdark&#x27; to equal &#x27;/en/resource-center/videos/customer-s&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/how-to-get-help-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/need-support-or-help</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/how-to-get-help-in-onshape&#x27; to equal &#x27;/en/resource-center/videos/need-suppo&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/4-reasons-to-consider-saas-product-design-tools-for-your-company$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/4-reasons-to-consider-saas-product-design-tools</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/4-reasons-to-consider-saas-pr&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/4-reasons-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/the-similarities-and-differences-between-saas-and-on-premise-product-development-tools$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/saas-versus-on-premise-product-development-tools</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/the-similarities-and-differen&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/saas-versu&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/tips-and-tricks-for-the-loft-command-06-20-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/tips-tricks-for-the-loft-command</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/tips-and-tricks-for-the-loft-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/tips-trick&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/advanced-part-modeling-techniques-in-onshape-03-23-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/advanced-part-modeling-techniques</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/advanced-part-modeling-techni&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/advanced-p&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/advanced-configurations-03-06-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/advanced-configurations</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/advanced-configurations-03-06&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/advanced-c&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/cloud-based-design-for-your-business-a-technical-exploration-part-1-how-to-achieve-a-truly-concurrent-development-process$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/part-1-tech-exploration-of-cloud-based-design-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/cloud-based-design-for-your-b&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/part-1-tec&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/why-use-cfd-with-onshape-042519$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/why-use-cfd-with-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/why-use-cfd-with-onshape-0425&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/why-use-cf&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/6-design-productivity-tips-tricks-webinar-050719$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/6-design-productivity-tips-tricks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/6-design-productivity-tips-tr&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/6-design-p&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/drawing-tips-and-tricks-in-onshape-07-24-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/tips-tricks-drawings</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/drawing-tips-and-tricks-in-on&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/tips-trick&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/managing-custom-properties-06-27-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/managing-custom-properties-states-permissions</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/managing-custom-properties-06&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/managing-c&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/5-engineering-reports-in-onshape-enterprise-that-can-improve-your-business-011719$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/5-most-useful-engineering-reports-enterprise</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/5-engineering-reports-in-onsh&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/5-most-use&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/introducing-onshape-enterprise$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/introducing-onshape-enterprise</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/introducing-onshape-enterprise&#x27; to equal &#x27;/en/resource-center/videos/introducin&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/six-ways-to-eliminate-modern-day-cad-hassles$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/6-ways-to-eliminate-modern-day-cad-hassles</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/six-ways-to-eliminate-modern-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/6-ways-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/agile-product-design-platform$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshapes-agile-product-design-platform</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/agile-product-design-platform&#x27; to equal &#x27;/en/resource-center/videos/onshapes-a&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/creating-weldments-06-13-16$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/creating-weldments</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/creating-weldments-06-13-16&#x27; to equal &#x27;/en/resource-center/videos/creating-w&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/advanced-sketch-techniques-03-28-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/advanced-sketch-techniques</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/advanced-sketch-techniques-03&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/advanced-s&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/6-practices-for-highly-effective-pdm-users-a-day-in-the-life-of-a-product-development-team$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/6-practices-for-highly-effective-pdm-users</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/6-practices-for-highly-effect&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/6-practice&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/complex-assembly-motion-04-18-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/complex-assembly-motion</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/complex-assembly-motion-04-18&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/complex-as&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/best-practices-for-data-management-in-onshape-091118$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/best-practices-for-data-management</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/best-practices-for-data-manag&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/best-pract&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/release-management-and-approval-workflows$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/release-management-approval-workflow</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/release-management-and-approv&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/release-ma&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/5-reasons-to-fall-in-love-with-pdm-and-data-management-all-over-again$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/5-reasons-to-fall-in-love-with-pdm</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/5-reasons-to-fall-in-love-wit&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/5-reasons-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/what-are-custom-features-and-where-do-i-find-them-041218$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/what-are-custom-features-where-do-i-find-them</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/what-are-custom-features-and-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/what-are-c&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/what-is-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/what-is-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/what-is-onshape&#x27; to equal &#x27;/en/resource-center/videos/what-is-on&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/standard-content-in-onshape-03-15-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/standard-content</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/standard-content-in-onshape-0&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/standard-c&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-isolate-in-onshape-assemblies$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-isolate-in-onshape-assemblies</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-isolate-in-o&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-named-positions-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-named-positions</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-named-positi&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-the-debug-feature-in-featurescript$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-the-featurescript-debug-feature</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-the-debug-fe&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/the-best-onshape-improvements-of-2017$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/the-top-onshape-improvements-of-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/the-best-onshape-improvemen&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/the-top&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/the-biggest-reasons-why-engineers-hate-their-current-cad-system$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/4-top-reasons-engineers-hate-their-cad-system</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/the-biggest-reasons-why-eng&#x2026;&#x27; to equal &#x27;/en/blog/4-top-reasons-engineers-hate&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/this-2017-formula-1-racecar-is-fueled-by-onshapes-public-plan$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/using-onshapes-free-plan-to-design-a-race-car</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/this-2017-formula-1-racecar&#x2026;&#x27; to equal &#x27;/en/blog/using-onshapes-free-plan-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/under-the-hood-collaboration$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/under-the-hood-how-collaboration-works</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/under-the-hood-collaboration&#x27; to equal &#x27;/en/blog/under-the-hood-how-collabora&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/under-the-hood-how-onshapes-development-team-tackles-cad-performance$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/under-the-hood-cad-performance</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/under-the-hood-how-onshapes&#x2026;&#x27; to equal &#x27;/en/blog/under-the-hood-cad-performan&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/under-the-hood-how-we-built-modern-cad-for-mobile$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/under-the-hood-cad-for-mobile</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/under-the-hood-how-we-built&#x2026;&#x27; to equal &#x27;/en/blog/under-the-hood-cad-for-mobile&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/using-cad-as-a-sales-presentation-tool$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/using-cad-as-a-sales-presentation-tool</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/using-cad-as-a-sales-presen&#x2026;&#x27; to equal &#x27;/en/blog/using-cad-as-a-sales-present&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/using-onshape-to-boost-your-career-and-cut-your-lawn$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/using-onshape-to-boost-your-career</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/using-onshape-to-boost-your&#x2026;&#x27; to equal &#x27;/en/blog/using-onshape-to-boost-your-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/what-is-design-for-manufacturing-and-assembly$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/what-is-design-for-manufacturing-and-assembly</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/what-is-design-for-manufact&#x2026;&#x27; to equal &#x27;/en/blog/what-is-design-for-manufactu&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/what-is-generative-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/whats-is-generative-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/what-is-generative-design&#x27; to equal &#x27;/en/blog/whats-is-generative-design&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/what-is-onshape-boot-camp$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/what-is-onshape-bootcamp</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/what-is-onshape-boot-camp&#x27; to equal &#x27;/en/blog/what-is-onshape-bootcamp&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-it-like-teaching-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/whats-it-like-teaching-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-it-like-teaching-onsh&#x2026;&#x27; to equal &#x27;/en/blog/whats-it-like-teaching-onsha&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-01-28-16$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-january-28-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-01-28-16&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-02-15-16$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-february-15-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-02-15-16&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-04-14-2016$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-april-14-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-04-14-2016&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-05-09-2016$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-may-9-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-05-09-2016&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-11-2-2015$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-november-2-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-11-2-2015&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-12-1-2015$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-december-1-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-12-1-2015&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-12-17-2015$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-december-17-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-12-17-2015&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-3-8-2016$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-march-8-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-3-8-2016&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-6-29-15$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-june-29-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-6-29-15&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-7-20-15$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-july-20-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-7-20-15&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-8-10-2015$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-august-10-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-8-10-2015&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-9-1-2015$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-september-1-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-9-1-2015&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-9-21-2015$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-september-21-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-9-21-2015&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-app-store-3-09-2016$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-march-9-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-app-store-3-09-20&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshape-04-13-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-april-13-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshape-04-13-&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshape-apr-22-15$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-april-22-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshape-apr-22&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshape-apri-6-15$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-april-6-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshape-apri-6&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshape-jun-8-15$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-june-8-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshape-jun-8-&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshape-may-15-15$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-may-15-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshape-may-15&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshape-mobile-12-7-2015$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-december-7-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshape-mobile&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-august-24-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-03-03-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-march-3-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-05-05-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-may-5-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-05-25-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-may-25-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-05-30-2016$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-may-30-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-06-13-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-june-13-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-07/11/16$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-july-11-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-08-16-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-august-16-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-09-08-2017$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-september-8-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-09-26-2017$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-september-26-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-1/13/17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-january-13-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-10-19-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-october-19-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-11/02/16$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-november-2-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-11/22/16$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-november-22-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-1-18-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-january-18-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-11-9-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-november-9-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-12/15/16$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-december-15-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-12-4-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-december-4-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-2/13/17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-february-13-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-2-13-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-february-13-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-3-02-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-march-2-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-3-22-2018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-march-22-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-4-13-2018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-april-13-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-5-4-2018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-may-4-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-6-20-2016$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-june-20-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-7-10-2017$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-july-10-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-7-25-2017$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-july-25-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-8/3/2016$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-august-3-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-april-15th-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-april-15-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-august-1st-2018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-august-1-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-august-20th-2018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-august-20-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-august-20th-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-august-20-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-december-19th-2018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-december-19-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-december-4th-2018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-december-4-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-february-11th-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-february-11-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-january-18th-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-january-18-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-july-12th-2018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-july-12-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-july-15th-2020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-july-15-2020</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-july-30th-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-july-30-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-july-8th-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-july-8-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-june-15th-2018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-june-15-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-june-18th-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-june-18-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-june-24th-2020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-june-24-2020</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-june-3rd-2020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-june-3-2020</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-march-1st-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-march-1-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-march-22nd-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-march-22-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-may-11th-2020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-may-11-2020</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-may-28th-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-may-28-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-may-3rd-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-may-3-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-november-9th-2018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-november-9-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-october-17th-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-october-17-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-october-1st-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-october-1-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-october-20th-2018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-october-20-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-september-11th-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-september-11-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-september-28th-2018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-september-28-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-september-7th-2018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-september-7-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshape-version-1.27$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-march-16-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshape-versio&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-the-onshape-app-store-05/18/2016$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-may-18-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-the-onshape-ap&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-the-onshape-app-store-05-18-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-may-18-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-the-onshape-ap&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-the-onshape-app-store-10-03-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-october-13-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-the-onshape-ap&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-the-onshapes-latest-update-03-27-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-march-27-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-the-onshapes-l&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-march-31-2016$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-march-31-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-march-31-2016&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-mobile-02-02-16$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-february-2-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-mobile-02-02-16&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-mobile-02-24-16$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-february-24-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-mobile-02-24-16&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-mobile-10-20-2015$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-october-20-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-mobile-10-20-2015&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-mobile-11-9-2015$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-november-9-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-mobile-11-9-2015&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-mobile-9-28-2015$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-september-28-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-mobile-9-28-2015&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-gks-packaging-replaced-their-old-pdm-system-with-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-gks-packaging-chose-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/why-gks-packaging-replaced-&#x2026;&#x27; to equal &#x27;/en/blog/why-gks-packaging-chose-onsh&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-heuresis-chose-onshape-for-portable-x-ray-instrument-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-viken-detection-chose-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/why-heuresis-chose-onshape-&#x2026;&#x27; to equal &#x27;/en/blog/why-viken-detection-chose-on&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-our-student-team-chose-onshape-to-design-prosthetic-limbs-for-amputees-in-vietnam$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/students-choose-onshape-for-designing-prosthetics-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/why-our-student-team-chose-&#x2026;&#x27; to equal &#x27;/en/blog/students-choose-onshape-for-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-silverside-detectors-chose-onshape-for-nuclear-radiation-detector-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-silverside-detectors-chose-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/why-silverside-detectors-ch&#x2026;&#x27; to equal &#x27;/en/blog/why-silverside-detectors-cho&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-your-cfo-wants-you-to-move-to-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-your-cfo-wants-to-move-to-cloud-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/why-your-cfo-wants-you-to-m&#x2026;&#x27; to equal &#x27;/en/blog/why-your-cfo-wants-to-move-t&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/behind-the-scenes-at-onshapes-award-winning-learning-center$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-the-learning-center-helps-cloud-cad-users</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/behind-the-scenes-at-onshap&#x2026;&#x27; to equal &#x27;/en/blog/how-the-learning-center-help&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/privacy-center/privacy-overview$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/privacy-center/privacy-overview</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/privacy-center/privacy-overview&#x27; to equal &#x27;/en/privacy-center/privacy-overview&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/privacy-center/privacy-policy$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/privacy-center/privacy-policy</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/privacy-center/privacy-policy&#x27; to equal &#x27;/en/privacy-center/privacy-policy&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/privacy-center/education-plan-privacy$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/privacy-center/education-plans-privacy</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/privacy-center/education-plan-privacy&#x27; to equal &#x27;/en/privacy-center/education-plans-pr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/legal/updates$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/legal/legal-updates</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/legal/updates&#x27; to equal &#x27;/en/legal/legal-updates&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/legal/trademarks$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/legal/trademarks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/legal/trademarks&#x27; to equal &#x27;/en/legal/trademarks&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-multiple-browser-tabs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-multiple-browser-tabs</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-multiple-browser-t&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-organizing-documents-with-filters-and-labels$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-organizing-documents-with-filters-labels</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-organizing-documen&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-organizing-features-with-folders-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-organizing-features-with-folders</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-organizing-feature&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-pre-select-constraints-while-sketching-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-pre-select-constraints-while-sketching</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-pre-select-constra&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-real-time-chat-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-real-time-chat</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-real-time-chat-in-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-roll-to-here-roll-to-end$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-roll-to-here-roll-to-end</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-roll-to-here-roll-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-setting-up-your-onshape-home-page$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-setting-up-your-home-page</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-setting-up-your-on&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-shift-select-when-importing-files-to-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-shift-select-when-importing-files</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-shift-select-when-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-tagging-people-with-comments-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-tagging-people-with-comments</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-tagging-people-wit&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-onshapes-custom-revision-scheme$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-custom-revision-scheme</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-onshapes-cus&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-09/15/2016$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-september-15-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-10/12/16$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-october-12-2016</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/masters-of-engineering-the-corvette-stingray-began-as-a-lump-of-clay$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/masters-of-engineering-podcast-ubers-mark-ferri</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/masters-of-engineering-the-&#x2026;&#x27; to equal &#x27;/en/blog/masters-of-engineering-podca&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-find-the-mate-youre-looking-for$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-find-the-mate-youre-looking-for</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-find-the-ma&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-add-style-to-a-surface-model-using-direct-editing-tools$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-add-style-to-a-surface-model-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-add-style-t&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-july-31st-2020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshapes-latest-update-july-31st-2020</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/introducing-categories-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/introducing-categories-in-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/introducing-categories-in-o&#x2026;&#x27; to equal &#x27;/en/blog/introducing-categories-in-on&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-move-to-onshape-documents-without-moving-references$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-move-onshape-documents-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-move-to-ons&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-do-companies-rate-their-own-productivity-and-innovation$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-companies-rate-their-productivity-innovation-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-do-companies-rate-their&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-com&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-create-selections-to-save-time-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-create-selections-to-save-time-in-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-create-sele&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-getting-the-right-selection$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-getting-the-right-selection</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-getting-the-right-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/introducing-onshape-education-enterprise-a-new-cad-platform-for-schools-universities$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/introducing-onshape-education-enterprise-a-new-cad-platform-for-schools-universities</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/introducing-onshape-education&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/introducin&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/onshape-on-the-iphone-a-hands-on-tutorial$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshape-on-the-iphone-a-hands-on-tutorial</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/onshape-on-the-iphone-a-hands&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/onshape-on&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/making-the-switch-to-onshape-for-k12-education$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/making-the-switch-to-onshape-for-k12-education</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/making-the-switch-to-onshape-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/making-the&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/making-the-switch-to-onshape-for-university-education$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/making-the-switch-to-onshape-for-university-education</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/making-the-switch-to-onshape-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/making-the&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/why-siemens-teamcenter-users-should-consider-onshape-for-multi-site-collaboration$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/why-siemens-teamcenter-users-should-consider-onshape-for-multi-site-collaboration</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/why-siemens-teamcenter-users-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/why-siemen&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/improve-your-pdm-and-process-management-with-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/improve-your-pdm-and-process-management-with-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/improve-your-pdm-and-process-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/improve-yo&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/tackling-the-top-challenges-impacting-product-developers-today$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/tackling-the-top-challenges-impacting-product-developers-today</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/tackling-the-top-challenges-i&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/tackling-t&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/designing-in-context-in-onshape-01-18-2018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/designing-in-context-in-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/designing-in-context-in-onsha&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/designing-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/robots-to-the-rescue$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/robots-to-the-rescue/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/robots-to-the-rescue&#x27; to equal &#x27;/en/robots-to-the-rescue/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/creating-curves-in-onshape-10-03-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/creating-curves-in-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/creating-curves-in-onshape-10&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/creating-c&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/advanced-assembly-motion-06-22-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/advanced-assembly-motion-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/advanced-assembly-motion-06-2&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/advanced-a&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/advanced-part-modeling-05-11-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/advanced-part-modeling-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/advanced-part-modeling-05-11-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/advanced-p&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/designing-with-sheet-metal-in-onshape-051718$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/designing-with-sheet-metal-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/designing-with-sheet-metal-in&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/designing-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/whats-new-in-onshapes-latest-update-1-2-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-january-2-2018-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/whats-new-in-onshapes-latest-update-&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/advanced-assembly-motion-in-onshape-08-31-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/advanced-assembly-motion-in-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/advanced-assembly-motion-in-o&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/advanced-a&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/driving-product-innovation-top-5-benefits-of-onshape-for-engineering-teams$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/driving-product-innovation-top-5-benefits-of-onshape-for-engineering-teams</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/driving-product-innovation-to&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/driving-pr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/why-product-developers-should-not-have-to-wait-a-year-for-new-cad-improvements$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/why-product-developers-should-not-have-to-wait-a-year-for-new-cad-improvements</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/why-product-developers-should&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/why-produc&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-free-professional-3d-cad-in-the-classroom$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/train-the-next-generation-with-free-cloud-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/onshape-free-professional-3&#x2026;&#x27; to equal &#x27;/en/blog/train-the-next-generation-wi&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-onshape-helps-you-choose-a-manufacturing-partner$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/the-top-product-design-tips-for-hardware-startups</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-onshape-helps-you-choos&#x2026;&#x27; to equal &#x27;/en/blog/the-top-product-design-tips-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-splitting-the-bill-of-materials-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-splitting-bills-of-materials</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-splitting-the-bill&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/legal/terms-of-use$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/legal/terms-of-use</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/legal/terms-of-use&#x27; to equal &#x27;/en/legal/terms-of-use&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-february-17th-2020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-february-17-2020</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/are-you-designing-a-project-related-to-covid-19-onshape-wants-to-help$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/onshape-will-help-with-your-covid-19-project</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/are-you-designing-a-project&#x2026;&#x27; to equal &#x27;/en/blog/onshape-will-help-with-your-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-is-baseball-player-development-like-product-development$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/is-baseball-development-like-product-development</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-is-baseball-player-deve&#x2026;&#x27; to equal &#x27;/en/blog/is-baseball-development-like&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/the-future-of-work-is-now-remote-teams-need-flexible-product-development-tools$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/the-importance-of-flexibility-in-remote-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/the-future-of-work-is-now-r&#x2026;&#x27; to equal &#x27;/en/blog/the-importance-of-flexibilit&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-just-took-the-lead-on-top-down-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/onshape-takes-the-lead-on-top-down-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/onshape-just-took-the-lead-&#x2026;&#x27; to equal &#x27;/en/blog/onshape-takes-the-lead-on-to&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/three-challenges-in-machine-design-and-how-engineers-can-meet-them-part-1$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/6-challenges-in-machine-design-part-1</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/three-challenges-in-machine&#x2026;&#x27; to equal &#x27;/en/blog/6-challenges-in-machine-desi&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-the-most-secure-way-to-share-cad-data$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/whats-the-most-secure-way-to-share-cad-data</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-the-most-secure-way-t&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/whats-t&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/top-5-reasons-why-you-should-add-cae-to-your-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/the-top-5-reasons-to-add-cae-to-your-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/top-5-reasons-why-you-shoul&#x2026;&#x27; to equal &#x27;/en/blog/the-top-5-reasons-to-add-cae&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/6-challenges-in-machine-design-and-how-engineers-can-meet-them-part-2$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/overcome-the-6-biggest-machine-design-challenges</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/6-challenges-in-machine-des&#x2026;&#x27; to equal &#x27;/en/blog/overcome-the-6-biggest-machi&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/partner-spotlight-cideon-seamlessly-integrates-onshape-with-sap$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/seamlessly-integrate-onshape-and-sap-with-cideon</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/partner-spotlight-cideon-se&#x2026;&#x27; to equal &#x27;/en/blog/seamlessly-integrate-onshape&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/bmf-material-technology-teams-up-with-onshape-for-high-precision-manufacturing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/optimizing-cad-with-real-time-built-in-pdm</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/bmf-material-technology-tea&#x2026;&#x27; to equal &#x27;/en/blog/optimizing-cad-with-real-tim&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-greensight-agronomics-switched-to-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-greensight-agronomics-switched-to-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/why-greensight-agronomics-s&#x2026;&#x27; to equal &#x27;/en/blog/why-greensight-agronomics-sw&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-5-24-2018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-may-24-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-onshapes-lates&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-onshape-is-the-best-cad-for-startups$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-hardware-startups-should-use-cloud-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/why-onshape-is-the-best-cad&#x2026;&#x27; to equal &#x27;/en/blog/why-hardware-startups-should&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-partner-spotlight-duro-cloud-plm-for-distributed-hardware-teams$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/onshape-partner-spotlight-duro-cloud-plm-for-distributed-hardware-teams</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/onshape-partner-spotlight-d&#x2026;&#x27; to equal &#x27;/en/blog/onshape-partner-spotlight-du&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/using-onshape-with-web-conferencing-tools-to-teach-cad-remotely$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/using-onshape-with-web-conferencing-tools-to-teach-cad-remotely</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/using-onshape-with-web-confer&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/using-onsh&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-allowing-third-parties-to-participate-in-release-management-with-onshape-professional-or-enterprise$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-allowing-third-parties-to-participate-in-release-management-with-onshape-professional-or-enterprise</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-allowing-third-par&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/consumer-product-designers-are-you-up-to-date-on-the-latest-technological-advances$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/10-ways-design-makes-or-breaks-consumer-products</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/consumer-product-designers-&#x2026;&#x27; to equal &#x27;/en/blog/10-ways-design-makes-or-brea&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/premier-custom-built$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /lp/premier-custom-built-video</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/lp/premier-custom-built&#x27; to equal &#x27;/lp/premier-custom-built-video&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/premier-custom-built-nurture$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /lp/premier-custom-built-video-nurture</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/lp/premier-custom-built-nurture&#x27; to equal &#x27;/lp/premier-custom-built-video-nurture&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/hirebotics$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /lp/hirebotics-video</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/lp/hirebotics&#x27; to equal &#x27;/lp/hirebotics-video&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/3d-cad-free-trial-ad-teams$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /lp/3d-cad-free-trial-ad-teams-video</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/lp/3d-cad-free-trial-ad-teams&#x27; to equal &#x27;/lp/3d-cad-free-trial-ad-teams-video&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^https://appstore.onshape.com/apps/Simulation/WK4WRLFPAIWTGRIPXTAYN5YJMMSIL7IG75LMOCA=/description$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/partner-apps/simulation</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;https://appstore.onshape.com:443/apps&#x2026;&#x27; to equal &#x27;/en/partner-apps/simulation&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/features/data-management$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/features/test</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/features/data-management&#x27; to equal &#x27;/en/features/test&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-to-buy-the-best-cad-system-for-your-engineering-team?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/cad-blog/how-to-buy-the-best-cad-system-for-your-product-development-team?fBXUoUdFcVhce</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-to-buy-the-best-cad-sys&#x2026;&#x27; to equal &#x27;/en/blog/cad-blog/how-to-buy-the-best&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-to-buy-the-best-cad-system-for-your-engineering-team$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/cad-blog/how-to-buy-the-best-cad-system-for-your-product-development-team</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-to-buy-the-best-cad-sys&#x2026;&#x27; to equal &#x27;/en/blog/cad-blog/how-to-buy-the-best&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-engineer-nicholas-radzykewycz-created-an-emergency-prosthetic-horse-hoof-in-24-hours$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-engineer-nicholas-radzykewycz-created-an-emergency-prosthetic-horse-hoof-in-24-hours</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-engineer-nicholas-radzy&#x2026;&#x27; to equal &#x27;/en/blog/how-engineer-nicholas-radzyk&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/curves-curves-curves-05-09-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/advanced-geometry-curves</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/curves-curves-curves-05-09-17&#x27; to equal &#x27;/en/resource-center/videos/advanced-g&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/10-design-questions-that-can-make-or-break-a-new-consumer-product$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/10-design-questions-that-can-make-or-break-a-new-consumer-product</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/10-design-questions&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/10-design-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/best-manufacturers-adopting-full-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/14-reasons-why-todays-best-manufacturers-are-adopting-modern-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/best-manufacturers-&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/14-reasons&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/3-things-executives-value-most$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/3-things-executives-value-most-in-a-mechanical-engineer</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/3-things-executives&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/3-things-e&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/accelerating-product-development-with-the-cloud$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/accelerating-product-development-with-the-cloud</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/accelerating-produc&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/accelerati&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/introduction-to-agile-product-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/an-introduction-to-agile-product-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/introduction-to-agi&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/an-introdu&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/introductory-guide-to-cloud-native-product-development$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/an-introductory-guide-to-cloud-native-product-development</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/introductory-guide-&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/an-introdu&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/ebooks/cad-for-mobile-design-anywhere-anytime-on-any-device$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/cad-for-mobile-design-anywhere-anytime-on-any-device</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/lp/ebooks/cad-for-mobile-design-anyw&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/cad-for-mo&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/engineering-leaders-guide-to-pdm-and-data-management$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/engineering-leaders-guide-to-pdm-data-management</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/engineering-leaders&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/engineerin&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/extending-cads-business-value-beyond-core-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/extending-cads-business-value-beyond-core-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/extending-cads-busi&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/extending-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/state-of-product-development-hardware-design-2020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/the-state-of-product-development-hardware-design-2020</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/state-of-product-de&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/the-state-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/state-of-product-development-hardware-design-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/the-state-of-product-development-hardware-design-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/state-of-product-de&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/the-state-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/design-gridlock-manifesto$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/the-design-gridlock-manifesto</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/design-gridlock-man&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/the-design&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/product-design-tips-tools-and-processes-for-hardware-startups$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/product-design-tips-tools-and-processes-for-hardware-startups</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/product-design-tips&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/product-de&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/onshapes-greatest-tech-tips-volume-1$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/onshapes-greatest-tech-tips-volume-1</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/onshapes-greatest-t&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/onshapes-g&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/onshape-hardware-recommendations$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/onshape-hardware-recommendations</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/onshape-hardware-re&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/onshape-ha&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/navigating-design-projects-in-a-multi-cad-world$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/navigating-design-projects-in-a-multi-cad-world</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/navigating-design-p&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/navigating&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/modern-cad-for-medical-devices$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/modern-cad-for-medical-devices</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/modern-cad-for-medi&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/modern-cad&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/modern-cad-for-machine-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/modern-cad-for-machine-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/modern-cad-for-mach&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/modern-cad&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/mastering-3d-modeling$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/mastering-3d-modeling</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/mastering-3d-modeli&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/mastering-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/how-safe-is-your-cad-data$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/how-safe-is-your-cad-data</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/how-safe-is-your-ca&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/how-safe-i&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^videos/transforming-cad-data-management$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/transforming-cad-data-management</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/transforming-cad-data-management&#x27; to equal &#x27;/en/resource-center/videos/transformi&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/why-onshape-is-faster-than-desktop-cad-080819$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/why-onshape-is-faster-than-desktop-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/why-onshape-is-faster-than-de&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/why-onshap&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/education-enterprise?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/enterprise?ehqeVkTalXHgK</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/education-enterprise?ehqeVkTalXHgK&#x27; to equal &#x27;/en/education/enterprise?ehqeVkTalXHgK&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/education-enterprise$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/enterprise</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/education-enterprise&#x27; to equal &#x27;/en/education/enterprise&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/would-you-be-fed-up-with-19-cad-crashes-in-a-day$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/would-you-be-fed-up-with-19-cad-crashes-in-a-day</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/would-you-be-fed-up-with-19&#x2026;&#x27; to equal &#x27;/en/blog/would-you-be-fed-up-with-19-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/request-a-trial-of-onshape-professional$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/request-a-trial-of-onshape-professional</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/request-a-trial-of-onshape-professio&#x2026;&#x27; to equal &#x27;/en/request-a-trial-of-onshape-profes&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/what-makes-a-parametric-modeler-tick$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/what-makes-a-parametric-modeler-tick</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/what-makes-a-parametric-mod&#x2026;&#x27; to equal &#x27;/en/blog/what-makes-a-parametric-mode&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/120-cad-hassles-you-should-never-have-to-deal-with$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/120-cad-issues-no-one-wants-to-deal-with</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/120-cad-hassles-you-should-&#x2026;&#x27; to equal &#x27;/en/blog/120-cad-issues-no-one-wants-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-url-tips-for-onshape-documents$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/url-tips-for-onshape-documents</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-url-tips-for-onsha&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/url-tip&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-dont-forget-to-unshare-blog-post$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-dont-forget-to-unshare</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-dont-forget-to-uns&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-changing-your-default-units-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-changing-your-default-units</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-changing-your-defa&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/introducing-exploded-views-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/a-unique-approach-to-exploded-views</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/introducing-exploded-views-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/a-uniqu&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-copy-and-paste-tabs-in-onshape-using-copy-to-clipboard$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-copy-and-paste-tabs</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-copy-and-paste-tab&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tips-constraining-your-sketch$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-constraining-your-sketch</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tips-constraining-your&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-insert-sketches-and-surfaces-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-insert-sketches-and-surfaces-in-drawings</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-insert-sket&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-to-share-onshape-documents-with-vendors-and-external-collaborators$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-share-your-onshape-documents</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-to-share-onshape-docume&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-converting-surfaces-to-solids-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-converting-surfaces-to-solids</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-converting-surface&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-make-parts-transparent-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-make-parts-transparent</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-make-parts-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-measure-in-onshape-drawings$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-measuring-2d-drawings</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-measure-in-o&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-importing-assemblies$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-importing-assemblies</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-importing-assembli&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/turning-your-old-2d-drawings-into-3d$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-turning-your-2d-drawings-into-3d</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/turning-your-old-2d-drawing&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-controlling-lofts-with-curves$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-controlling-lofts-with-curves</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-controlling-lofts-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/introducing-assembly-configurations-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-master-assembly-configuration</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/introducing-assembly-config&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-creating-variables-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-creating-variables</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-creating-variables&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-hide-construction-geometry-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-hide-construction-geometry</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-hide-constr&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/custom-feature-spotlight-using-the-beam-feature-to-create-weldments$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-use-the-beam-feature-to-create-weldments</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/custom-feature-spotlight-us&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/top-5-tips-for-designing-for-3d-printing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/top-5-design-tips-for-3d-printing</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/top-5-tips-for-designing-fo&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/top-5-d&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-keep-the-vertical-axis-upright-upon-rotation$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-rotation-with-an-upright-vertical-axis</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-keep-the-ve&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-assembling-gears$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-assembling-gears</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-assembling-gears&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-custom-colors-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-custom-colors</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-custom-color&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-changing-rotate-pan-and-zoom-settings-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-changing-rotate-pan-and-zoom</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-changing-rotate-pa&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/custom-feature-spotlight-belt-routing-sizing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-custom-features-make-belt-routing-easy</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/custom-feature-spotlight-be&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-cus&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-insert-sheet-metal-flat-patterns-into-drawings$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-inserting-flat-patterns-into-drawings</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-insert-shee&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-parametric-variables-vs-configuration-variables$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-parametric-vs-configuration-variables</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-parametric-variabl&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-a-path-when-creating-lofts-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-a-path-when-creating-lofts</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-a-path-when-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-named-views-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-named-views</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-named-views-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-adjusting-line-thickness-in-onshape-drawings$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-adjusting-line-thickness</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-adjusting-line-thi&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-use-composite-parts-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-composite-parts</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-use-composi&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-switching-drawing-templates-in-onshape-blog-post$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-switching-onshape-drawing-templates</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-switching-drawing-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-drawing-revision-tables-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-drawing-revision-tables</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-drawing-revi&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-shift-to-rotate-in-5-degree-increments$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-shift-to-rotate</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-shift-to-rot&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-booleans-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-booleans</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-booleans-in-onshape&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-sketch-slots$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-sketch-slots</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-sketch-slots&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-easily-restore-a-document-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-easily-restore-a-document</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-easily-rest&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-creating-broken-out-section-views-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-creating-broken-out-section-views</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-creating-broken-ou&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-mate-connectors-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-mate-connectors</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-mate-connectors-in&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-onshapes-move-boundary-feature$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-onshapes-move-boundary-feature</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-onshapes-mov&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-aligning-callouts-in-onshape-drawings$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-aligning-callouts</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-aligning-callouts-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/everything-you-ever-wanted-to-know-about-onshape-splines-part-1-of-2$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/everything-you-need-to-know-about-splines</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/everything-you-ever-wanted-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/everyth&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-creating-configuration-variables$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-creating-configuration-variables</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-creating-configura&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-comments-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-comments</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-comments-in-onshape&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-hide-other-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-hide-other</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-hide-other-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-dxf/dwg-for-logo-embossing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-dwgs-for-logo-embossing</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-dxf/dwg-for-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-creating-sheet-metal-tabs-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-creating-sheet-metal-tabs</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-creating-sheet-met&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/introducing-lofting-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-create-smooth-transitions-between-profiles</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/introducing-lofting-in-onsh&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-dimension-while-you-sketch-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-adding-dimensions-while-you-sketch</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-dimension-while-yo&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-branching-designs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-branching-designs</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-branching-designs&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-excluding-parts-or-assemblies-from-the-bom-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-exclude-parts-or-assemblies-from-the-bom</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-excluding-parts-or&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-export-sheet-metal-flat-view-as-dxf$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-exporting-sheet-metal-flat-view-as-dxf</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-export-sheet-metal&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-lets-build-a-sprocket$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-lets-build-a-sprocket</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-lets-build-a-sproc&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-sketching-with-mate-connectors$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-sketching-with-onshape-mate-connectors</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-sketching-with-mat&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-use-numeric-fields-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-numeric-fields</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-use-numeric&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-working-with-bom-items-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-adding-parts-to-your-bom</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-working-with-bom-i&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-sketch-on-the-sheet-metal-flat-view-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-sketch-on-sheet-metal-flat-view</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-sketch-on-t&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-follow-mode$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-follow-mode</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-follow-mode&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-manipulate-bom-tables$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-manipulating-bom-tables</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-manipulate-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-creating-enhanced-planes-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-creating-enhanced-planes</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-creating-enhanced-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/10-sketch-tips-for-power-user-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/10-cad-sketch-tips-for-onshape-power-users</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/10-sketch-tips-for-power-us&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/10-cad-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/10-cad-tricks-for-mold-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/10-tricks-for-mastering-cad-mold-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/10-cad-tricks-for-mold-desi&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/10-tric&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-use-parting-line-draft-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-use-parting-line-draft</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-use-parting&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-searching-for-tools-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-finding-the-right-tools</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-searching-for-tool&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/cad-on-a-pad-what-you-may-not-know-about-onshape-mobile$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/cad-on-the-go-5-reasons-to-use-onshape-mobile</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/cad-on-a-pad-what-you-may-n&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/cad-on-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-sheet-metal-bend-order$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-sheet-metal-bend-order</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-sheet-metal-bend-o&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-onshapes-managed-in-context-design-with-linked-documents$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-managed-in-context-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-onshapes-man&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-use-display-states-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-use-display-states-in-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-use-display&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-managing-documents-with-folders-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-managing-documents-with-folders</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-managing-documents&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-taking-advantage-of-onshape-notifications$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-making-the-most-of-onshape-notifications</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-taking-advantage-o&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-guides-when-creating-a-fill-surface-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-guides-when-creating-a-fill-surface-in-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-guides-when-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-bill-of-materials-and-balloons-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-bill-of-materials-and-balloons</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-bill-of-mate&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/streamlining-mold-tool-die-design-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-streamline-mold-tool-die-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/streamlining-mold-tool-die-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-use-draft-analysis-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-use-draft-analysis-in-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-use-draft-a&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-assemblies-for-solidworks-users$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-onshape-has-improved-mates-for-cad-users</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/onshape-assemblies-for-soli&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-ons&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-show-a-sketch-in-a-drawing-view$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-show-a-sketch-in-a-drawing-view-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-show-a-sket&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/career-advice-dont-try-to-fake-it-till-you-make-it$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/0-test-userstory</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/career-advice-dont-try-to-f&#x2026;&#x27; to equal &#x27;/en/blog/0-test-userstory&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-creating-crop-views-in-onshape-drawings$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-creating-crop-views</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-creating-crop-view&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-drawing-and-part-revision-letters-in-onshape-release-management$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-part-revision-in-release-management</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-drawing-and-part-r&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-creating-holes-through-multiple-parts-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-creating-holes-through-multiple-parts</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-creating-holes-thr&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/making-supplier-models-work-for-you$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-make-supplier-models-work-for-you</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/making-supplier-models-work&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/everything-you-ever-wanted-to-know-about-onshape-splines-part-2-of-2$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-master-splines-in-cloud-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/everything-you-ever-wanted-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-the-alt-key-to-sketch-a-square-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-sketching-a-perfect-square</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-the-alt-key-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/cad-in-the-classroom-5-best-practices-for-teaching-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/cad-in-class-the-top-5-onshape-teaching-practices</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/cad-in-the-classroom-5-best&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/cad-in-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-use-spreadsheets-to-manage-configurations$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-manage-configurations-with-spreadsheets</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-use-spreads&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-surfaces-for-sheet-metal-models-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-surfaces-for-sheet-metal-models-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-surfaces-for&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-sketch-patterns-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-sketch-patterns</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-sketch-patterns-in&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/managing-custom-properties-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-keep-your-product-designs-organized</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/managing-custom-properties-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-when-to-use-the-admin-vs.-member-permissions-roles-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-mastering-permissions</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-when-to-use-the-ad&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/materialise-3d-printer-design-software$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/the-top-5-tips-for-3d-printing-your-models</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/materialise-3d-printer-desi&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/the-top&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-linking-drawing-and-reference-properties-to-notes$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-linking-properties-to-notes</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-linking-drawing-an&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-automatically-insert-drawing-views-on-creation$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-automatically-insert-drawing-views</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-automatical&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-customize-the-onshape-toolbar$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-customizing-your-onshape-toolbar</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-customize-t&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/4-things-to-consider-before-you-start-modeling-in-3d$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/4-key-cad-considerations-before-modeling-in-3d</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/4-things-to-consider-before&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/4-key-c&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-shift-enter-to-repeat-commands-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-using-shift-enter-to-repeat-commands</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-using-shift-enter-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/what-does-onshape-mean$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/what-does-onshape-mean</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/what-does-onshape-mean&#x27; to equal &#x27;/en/blog/what-does-onshape-mean&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/three-questions-to-ask-before-starting-any-cad-model$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/3-questions-to-ask-before-starting-a-cad-model</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/three-questions-to-ask-befo&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/3-quest&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/calling-all-makers-are-you-using-professional-3d-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-makers-should-be-using-pro-3d-cad-software</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/calling-all-makers-are-you-&#x2026;&#x27; to equal &#x27;/en/blog/why-makers-should-be-using-p&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-we-started-from-scratch-again-in-the-cad-business?hsLang=en$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-we-started-from-scratch-in-the-cad-business</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/?hsLang=en&#x27; to equal &#x27;/en/blog/why-we-started-from-scratch-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-lets-make-a-u-bolt$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-lets-make-a-u-bolt</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-lets-make-a-u-bolt&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-comparing-design-changes-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-comparing-design-changes</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-comparing-design-c&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tips-snap-mating$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tips-snap-mating</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tips-snap-mating&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/chrome-tips-for-engineers$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/10-google-chrome-tips-every-engineer-should-know</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/chrome-tips-for-engineers&#x27; to equal &#x27;/en/resource-center/tech-tips/10-goog&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/lets-assemble-a-vise$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-assemble-a-vise-with-mates</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/lets-assemble-a-vise&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/lets-make-a-pipe-flange$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-model-a-pipe-flange-with-revolve-sketch</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/lets-make-a-pipe-flange&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshapes-built-in-feedback-tool$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-use-onshapes-built-in-feedback-tool</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/onshapes-built-in-feedback-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/under-the-hood-onshape-sketches$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/under-the-hood-onshape-sketches</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/under-the-hood-onshape-sket&#x2026;&#x27; to equal &#x27;/en/blog/under-the-hood-onshape-sketc&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-goes-to-sea$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/using-cloud-cad-to-preserve-iconic-artifacts</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/onshape-goes-to-sea&#x27; to equal &#x27;/en/blog/using-cloud-cad-to-preserve-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/direct-editing-with-variables$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/need-to-make-a-model-parametric-no-problem</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/direct-editing-with-variabl&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/need-to&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-mixing-units-and-fractions$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-mixing-units-and-fractions</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-mixing-units-and-f&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/onshape-in-the-classroom-vancouver$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-use-cloud-cad-to-teach-high-school-stem</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/onshape-in-the-classroom-va&#x2026;&#x27; to equal &#x27;/en/blog/how-to-use-cloud-cad-to-teac&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/lets-assemble-an-arbor-press$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-assemble-an-arbor-press-with-mates</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/lets-assemble-an-arbor-press&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/what-do-executives-value-most-in-a-mechanical-engineer$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/career-advice-for-mechanical-engineers</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/what-do-executives-value-mo&#x2026;&#x27; to equal &#x27;/en/blog/career-advice-for-mechanical&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^resource-center/tech-tips/how-undo-history-makes-continuous-drag-to-trim-even-more-powerful$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-undo-history-makes-continuous-drag-to-trim-even-more-powerful-in-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/tech-tips/how-undo-history-makes-con&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/customer-perspective-why-we-created-our-own-custom-welding-feature-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/aiding-design-manufacturing-with-custom-features</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/customer-perspective-why-we&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/aiding-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-viewing-releases-in-onshape-professional-and-enterprise$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-viewing-previous-releases</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-viewing-releases-i&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-inserting-your-bill-of-materials-into-an-onshape-drawing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-inserting-boms-into-drawings</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-inserting-your-bil&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-to-use-simultaneous-bill-of-materials-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-use-simultaneous-boms</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-to-use-simultaneous-bil&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-drawing-view-simplification-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-simplifying-the-drawing-view</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-drawing-view-simpl&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/the-iron-clad-dos-and-donts-for-parametric-modeling$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/the-dos-and-donts-of-parametric-modeling</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/the-iron-clad-dos-and-donts&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/the-dos&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/creating-versions-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/capture-major-design-milestones-with-versions</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/creating-versions-in-onshape&#x27; to equal &#x27;/en/resource-center/tech-tips/capture&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/the-10-best-onshape-improvements-of-2018$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/the-10-best-improvements-of-2018</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/the-10-best-onshape-improve&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/the-10-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^think-like-startup-venture-capital-investors$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/think-like-a-startup-how-to-attract-venture-capital-investors</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/&#x27; to equal &#x27;/en/blog/think-like-a-startup-how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/feature-comparison/solidworks$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/feature-comparison/solidworks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/feature-comparison/solidworks&#x27; to equal &#x27;/en/feature-comparison/solidworks&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/lessons-from-5-epic-consumer-product-design-failures$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/5-epic-consumer-product-design-failures</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/lessons-from-5-epic-consume&#x2026;&#x27; to equal &#x27;/en/blog/5-epic-consumer-product-desi&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos/10-awesome-custom-features-in-onshape-you-can-start-using-right-now-043019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/10-custom-features-you-can-use-now</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/videos/10-awesome-custom-features-in&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/10-custom-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/announcing-onshapes-100th-release-why-automatic-upgrades-are-such-a-big-deal$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-automatic-upgrades-are-such-a-big-deal</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/announcing-onshapes-100th-r&#x2026;&#x27; to equal &#x27;/en/blog/why-automatic-upgrades-are-s&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/domain-whitelisting$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/domain-whitelisting</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/domain-whitelisting&#x27; to equal &#x27;/en/domain-whitelisting&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/4-reasons-why-design-teams-work-faster-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/4-reasons-onshape-design-teams-work-faster</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/4-reasons-why-design-teams-&#x2026;&#x27; to equal &#x27;/en/blog/4-reasons-onshape-design-tea&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/solutions/consumer-products$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/test/transifex/test-republish</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/solutions/consumer-products&#x27; to equal &#x27;/en/test/transifex/test-republish&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/security$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/security</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/security&#x27; to equal &#x27;/en/security&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/successful-3d-printing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/your-guide-to-successful-3d-printing</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/successful-3d-printing&#x27; to equal &#x27;/en/resource-center/tech-tips/your-gu&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^Watch this webinar to see what makes Onshape apps unique and learn about the new app developed by the PTC Education team that helps learners practice their modeling skills.$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/hone-your-onshape-skills-with-the-cad-challenges-app</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/&#x27; to equal &#x27;/en/resource-center/videos/hone-your-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/the-top-10-onshape-improvements-of-2019$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/the-top-10-onshape-enhancements-of-2019</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/the-top-10-onshape-improvem&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/the-top&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-modern-cad-helps-cutsforth-keep-your-lights-on$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-cloud-cad-helps-cutsforth-keep-your-lights-on</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-modern-cad-helps-cutsfo&#x2026;&#x27; to equal &#x27;/en/blog/how-cloud-cad-helps-cutsfort&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/programs/entrepreneur$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/programs/entrepreneur</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/programs/entrepreneur&#x27; to equal &#x27;/en/programs/entrepreneur&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/contact-sales$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/contact-sales</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/contact&#x27; to equal &#x27;/en/contact-sales&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/solutions/automotive$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/solutions/automotive-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/solutions/automotive&#x27; to equal &#x27;/en/solutions/automotive-design&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/solutions/electronics$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/solutions/electronics-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/solutions/electronics&#x27; to equal &#x27;/en/solutions/electronics-design&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/solutions/machine-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/solutions/machine-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/solutions/machine-design&#x27; to equal &#x27;/en/solutions/machine-design&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/solutions/medical-device-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/solutions/medical-device-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/solutions/medical-device-design&#x27; to equal &#x27;/en/solutions/medical-device-design&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/partner-spotlight-using-caeplex-for-finite-element-analysis-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/perform-finite-element-analysis-on-the-cloud</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/partner-spotlight-using-cae&#x2026;&#x27; to equal &#x27;/en/blog/perform-finite-element-analy&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-creating-a-thread$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-creating-a-thread</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-creating-a-thread&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/import-export-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-import-and-export-with-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/import-export-onshape&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-importing-and-exporting-dxf-files-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-importing-and-exporting-dxf-files</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-importing-and-expo&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-how-to-use-onshapes-measure-tool$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-how-to-use-the-measure-tool</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-how-to-use-onshape&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/a-look-within-onshapes-3d-section-view$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/behind-the-scenes-of-3d-section-view</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/a-look-within-onshapes-3d-s&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/behind-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-keyboard-shortcuts-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-keyboard-shortcuts</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-keyboard-shortcuts&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/ptc-engineers-help-design-emergency-medical-masks-from-snorkel-gear$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/ptc-engineers-design-masks-from-snorkel-gear</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/ptc-engineers-help-design-e&#x2026;&#x27; to equal &#x27;/en/blog/ptc-engineers-design-masks-f&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/privacy-center$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/privacy-center/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/privacy-center&#x27; to equal &#x27;/en/privacy-center/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-some-of-michigans-most-competitive-engineering-courses-switched-to-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-some-of-michigans-most-competitive-engineering-courses-switched-to-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/why-some-of-michigans-most-&#x2026;&#x27; to equal &#x27;/en/blog/why-some-of-michigans-most-c&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/legal$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/legal/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/legal&#x27; to equal &#x27;/en/legal/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/10-advanced-tips-and-tricks-for-creating-exploded-views-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/10-advanced-tips-for-creating-exploded-views</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/10-advanced-tips-and-tricks&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/10-adva&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/learn/10-essential-tips$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/articles/10-essential-tips</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/learn/10-essential-tips&#x27; to equal &#x27;/en/resource-center/articles/10-essen&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/6-important-onshape-tips-for-engineers-to-work-from-anywhere$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/6-onshape-tips-for-engineers-who-work-remotely</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/6-important-onshape-tips-fo&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/6-onsha&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/education-enterprise-processing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/enterprise-processing</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/education-enterprise-processing&#x27; to equal &#x27;/en/education/enterprise-processing&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/designing-linkages-in-context$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/in-context-editing-solve-linkage-design-issues</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/designing-linkages-in-conte&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/in-cont&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-the-onshape-app-store-03-16-17$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-march-16-2017</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-in-the-onshape-ap&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-share-your-document-with-a-link$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/tech-tip-share-your-document-with-a-link</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/tech-tip-share-your-documen&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/after-millions-of-user-hours-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-free-yourself-from-cad-design-gridlock</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/after-millions-of-user-hour&#x2026;&#x27; to equal &#x27;/en/blog/how-to-free-yourself-from-ca&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-10-13-2015$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-october-13-2015</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/whats-new-10-13-2015&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-to-move-from-solidworks-to-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-streamline-your-transition-from-solidworks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-to-move-from-solidworks&#x2026;&#x27; to equal &#x27;/en/blog/how-to-streamline-your-trans&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/features/assemblies$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/features/assemblies</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/features/assemblies&#x27; to equal &#x27;/en/features/assemblies&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/features/security$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/features/security</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/features/security&#x27; to equal &#x27;/en/features/security&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/racing-toward-collaboration$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/designing-an-open-access-f1-car-on-the-cloud</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/racing-toward-collaboration&#x27; to equal &#x27;/en/blog/designing-an-open-access-f1-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^intro-to-onshape-for-design-111423$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/intro-to-onshape-for-design-pros-111423</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/&#x27; to equal &#x27;/en/resource-center/events/intro-to-o&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/features/integrations$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /de/features/integrations</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/features/integrations&#x27; to equal &#x27;/de/features/integrations&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/features/drawings$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /de/features/drawings</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/features/drawings&#x27; to equal &#x27;/de/features/drawings&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/solutions/energy$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /de/solutions/energy</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/solutions/energy&#x27; to equal &#x27;/de/solutions/energy&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/how-to-install-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /de/blog/how-to-install-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/how-to-install-onshape&#x27; to equal &#x27;/de/blog/how-to-install-onshape&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/features/collaboration$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /de/features/collaboration</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/features/collaboration&#x27; to equal &#x27;/de/features/collaboration&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/partner-trial-request$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /ja/partner-trial-request</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/partner-trial-request&#x27; to equal &#x27;/ja/partner-trial-request&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/features/analytics$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /ja/features/analytics</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/features/analytics&#x27; to equal &#x27;/ja/features/analytics&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/features/support$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /ja/features/support</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/features/support&#x27; to equal &#x27;/ja/features/support&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/features/bill-of-materials$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /ja/features/bill-of-materials</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/features/bill-of-materials&#x27; to equal &#x27;/ja/features/bill-of-materials&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/features/configurations$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /ja/features/configurations</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/features/configurations&#x27; to equal &#x27;/ja/features/configurations&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/features/parts$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /ja/features/parts</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/features/parts&#x27; to equal &#x27;/ja/features/parts&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/features/workflow$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /ja/features/workflow</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/features/workflow&#x27; to equal &#x27;/ja/features/workflow&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/quarterly-onshape-review-learn-whats-new-101723$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/quarterly-onshape-review-learn-whats-new-october-2023</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/quarterly-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/quarterly-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/emea-quarterly-onshape-review-learn-whats-new-101823$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/quarterly-onshape-review-learn-whats-new-october-2023</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/emea-quart&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/quarterly-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-helping-hardware-startups-grow-faster$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/helping-hardware-startups-grow-faster</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-he&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/helping-ha&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/efficiency-redefined-agile-design-and-lifecycle-management-with-onshape-cad-and-arena-plm-091423$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/efficiency-redefined-agile-design-and-lifecycle-management-with-onshape-cad-and-arena-plm</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/efficiency&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/efficiency&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/introduction-to-onshape-for-design-professionals-091323$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/introduction-to-onshape-for-design-professionals</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/introducti&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/introducti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/emea-introduction-to-onshape-for-design-professionals-091423$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/introduction-to-onshape-for-design-professionals</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/emea-intro&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/introducti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/3d-cad-free-trial-ad-plasma?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /lp/3d-cad-free-trial-ad?KOGcfsIIPknjQ</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/lp/3d-cad-free-trial-ad-plasma?KOGcf&#x2026;&#x27; to equal &#x27;/lp/3d-cad-free-trial-ad?KOGcfsIIPknjQ&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/3d-cad-free-trial-ad-plasma$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/lp/3d-cad-free-trial-ad-plasma&#x27; to equal &#x27;/lp/3d-cad-free-trial-ad&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/professional-trial-fastlane?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/professional-trial?BLYVOXAgetoDz</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/professional-trial-fastlane?BLYVO&#x2026;&#x27; to equal &#x27;/en/professional-trial?BLYVOXAgetoDz&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/professional-trial-fastlane$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/professional-trial</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/professional-trial-fastlane&#x27; to equal &#x27;/en/professional-trial&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/introduction-to-onshape-for-professionals-081723$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/introduction-to-onshape-for-professionals</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/introducti&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/introducti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/trial$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/professional-trial</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/trial&#x27; to equal &#x27;/en/professional-trial&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/quarterly-onshape-review-learn-whats-new-062723$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/quarterly-onshape-review-learn-whats-new-june-2023</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/quarterly-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/quarterly-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/emea-quarterly-onshape-review-learn-whats-new-062923$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/quarterly-onshape-review-learn-whats-new-june-2023</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/emea-quart&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/quarterly-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/intro-to-onshape-062223$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/introduction-to-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/intro-to-o&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/introducti&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/case-studies/oceangate$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/case-studies/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/case-studies/ocea&#x2026;&#x27; to equal &#x27;/en/resource-center/case-studies/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos/onshape-customer-story-oceangate$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos/onshape-cu&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/lp/oceangate-nam-makers-series-2021$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/professional-trial</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/lp/oceangate-nam-makers-series-20&#x2026;&#x27; to equal &#x27;/en/professional-trial&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/oceangate-customer-video$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/professional-trial</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/lp/oceangate-customer-video&#x27; to equal &#x27;/en/professional-trial&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/5-reasons-why-desktop-cad-users-dont-renew-their-subscriptions-060123$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/5-reasons-why-desktop-cad-users-dont-renew-their-subscriptions</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/5-reasons-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/5-reasons-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/emea-5-reasons-why-desktop-cad-users-dont-renew-their-subscriptions-060623$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/5-reasons-why-desktop-cad-users-dont-renew-their-subscriptions</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/emea-5-rea&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/5-reasons-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/enterprise$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/enterprise/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/enterprise&#x27; to equal &#x27;/en/enterprise/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/onshape-enterprise$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/enterprise/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/onshape-enterprise&#x27; to equal &#x27;/en/enterprise/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/enterprise$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/enterprise/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/enterprise&#x27; to equal &#x27;/en/enterprise/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/solidworks-data-migration/customer-stories$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/solidworks-data-migration/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/solidworks-data-migration/custome&#x2026;&#x27; to equal &#x27;/en/solidworks-data-migration/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/solidworks-data-migration/contact-sales$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/solidworks-data-migration/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/solidworks-data-migration/contact&#x2026;&#x27; to equal &#x27;/en/solidworks-data-migration/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/breaking-all-the-rules-of-cad-pdm-032923$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/breaking-all-the-rules-of-cad-pdm-on-demand</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/breaking-a&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/breaking-a&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/emea-breaking-all-the-rules-of-cad-pdm-033023$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/breaking-all-the-rules-of-cad-pdm-on-demand</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/emea-break&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/breaking-a&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/emea-session-quarterly-onshape-review-learn-whats-new-032923$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/quarterly-onshape-review-learn-whats-new-march-2023</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/emea-sessi&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/quarterly-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/quarterly-onshape-review-learn-whats-new-032823$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/quarterly-onshape-review-learn-whats-new-march-2023</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/quarterly-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/quarterly-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/education/educator-awards/$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/educator-awards/educator-awards-2023</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/education/educator-awards/&#x27; to equal &#x27;/en/education/educator-awards/educato&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/education/educator-awards$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/educator-awards/educator-awards-2023</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/education/educator-awards&#x27; to equal &#x27;/en/education/educator-awards/educato&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/education$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/education&#x27; to equal &#x27;/en/education/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/edu$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/edu&#x27; to equal &#x27;/en/education/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/lp/3d-cad-free-trial-ad-model$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/lp/3d-cad-free-trial-ad-model&#x27; to equal &#x27;/lp/3d-cad-free-trial-ad&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/nl/programs/entrepreneur$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/programs/entrepreneur</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/nl/programs/entrepreneur&#x27; to equal &#x27;/en/programs/entrepreneur&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/how-safe-is-your-cad-data$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/how-safe-is-your-cad-data</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/how-safe-is-your-cad-data&#x27; to equal &#x27;/en/resource-center/ebooks/how-safe-i&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/petrak-industries-onshapes-sharing-feature-saved-a-major-client-5-weeks-in-design-time$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/whats-the-most-secure-way-to-share-cad-data</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/petrak-industries-onshapes-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/whats-t&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/education/design-challenges$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/educator-awards/educator-awards-2023</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/education/design-challenges&#x27; to equal &#x27;/en/education/educator-awards/educato&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/solidworks-data-migration$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/solidworks-data-migration/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/solidworks-data-migration&#x27; to equal &#x27;/en/solidworks-data-migration/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-fraunhofer$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshape-webcast-lernen-sie-wie-eine-cloud-native-cad-software-ihren-design-prozess-verbessert</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-fr&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/onshape-we&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-witted-en?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/green-robots-witted-en?AAFcZkHBhFFXX</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-wi&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/green-robo&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-witted-en$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/green-robots-witted-en</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-wi&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/green-robo&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/press-release/sheet-metal$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-use-onshapes-versatile-sheet-metal-tools-for-consumer-packaging-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/press-release/sheet-metal&#x27; to equal &#x27;/en/blog/how-to-use-onshapes-versatil&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/press-release/hermeus-chooses-onshape-for-hypersonic-jet-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/hermeus-uses-onshape-for-hypersonic-jet-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/press-release/hermeus-chooses-onshap&#x2026;&#x27; to equal &#x27;/en/blog/hermeus-uses-onshape-for-hyp&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/press-release/2019-april-03-press-release-onshape-q1-product-updates$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/press-release/2019-april-03-press-re&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/navigating-design-projects-in-a-multi-cad-world$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/navigating-design-projects-in-a-multi-cad-world</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/navigating-design-projects-in-a-mult&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/navigating&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/why-we-started-from-scratch-again-in-the-cad-business$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/why-we-started-from-scratch-in-the-cad-business</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/&#x27; to equal &#x27;/en/blog/why-we-started-from-scratch-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^https://www.onshape.com/cad-blog/why-is-full-cloud-cad-such-a-big-deal-infographic  Redirects to Resource Center  redirect to$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/articles/the-top-5-reasons-cloud-native-platforms-outperform-cloud-hosted-applications</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;https://www.onshape.com/cad-blog/why-&#x2026;&#x27; to equal &#x27;/en/resource-center/articles/the-top-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/whats-new-in-onshapes-latest-update-1-2-18$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/whats-new-in-onshape-january-2-2018-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/&#x27; to equal &#x27;/en/resource-center/what-is-new/whats&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/what-happens-during-a-modern-cad-crash$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/4-ways-to-lose-cad-files-and-how-to-prevent-it</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/&#x27; to equal &#x27;/en/blog/4-ways-to-lose-cad-files-and&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/unfolding-onshape-sheet-metal$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-to-use-onshapes-versatile-sheet-metal-tools-for-consumer-packaging-design</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/&#x27; to equal &#x27;/en/blog/how-to-use-onshapes-versatil&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/topic/whats-new$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/&#x27; to equal &#x27;/en/resource-center/what-is-new/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-using-advanced-search-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/url-tips-for-onshape-documents</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/&#x27; to equal &#x27;/en/resource-center/tech-tips/url-tip&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/tech-tip-sharing-in-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/how-to-share-your-onshape-documents</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/&#x27; to equal &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/say-goodbye-to-cad-file-checkout-copies$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/introducing-design-data-management-2-0</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/&#x27; to equal &#x27;/en/blog/introducing-design-data-mana&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/parametric-modeling-2.0-onshapes-modern-approach-to-configurations$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-onshape-has-fundamentally-improved-parametric-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/&#x27; to equal &#x27;/en/blog/how-onshape-has-fundamentall&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/introducing-onshape-companies$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/case-studies/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/&#x27; to equal &#x27;/en/resource-center/case-studies/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/introducing-design-data-management-2.0$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/introducing-design-data-management-2-0</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/&#x27; to equal &#x27;/en/blog/introducing-design-data-mana&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/enhancement-requests$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/cad-users-are-you-frustrated-by-inadequate-tech-support</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/&#x27; to equal &#x27;/en/blog/cad-users-are-you-frustrated&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/copies-copies-copies$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/4-ways-to-lose-cad-files-and-how-to-prevent-it</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/&#x27; to equal &#x27;/en/blog/4-ways-to-lose-cad-files-and&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/avoiding-the-blue-screen-of-death-welcome-to-a-new-generation-of-cad-reliability$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/how-onshape-has-fundamentally-improved-parametric-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/&#x27; to equal &#x27;/en/blog/how-onshape-has-fundamentall&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/free?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/products/free?qejDefmYixcTM</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/free?qejDefmYixcTM&#x27; to equal &#x27;/en/products/free?qejDefmYixcTM&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/free$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/products/free</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/free&#x27; to equal &#x27;/en/products/free&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/nature-recovery-robots/$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/nature-recovery-robots/live-event</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/nature-recovery-robots/&#x27; to equal &#x27;/en/nature-recovery-robots/live-event&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/education/research-symposium/$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/research-symposium/2023-event</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/education/research-symposium/&#x27; to equal &#x27;/en/education/research-symposium/2023&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/education/teaching-symposium/$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/teaching-symposium/post-event</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/education/teaching-symposium/&#x27; to equal &#x27;/en/education/teaching-symposium/post&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/simulation$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/features/simulation</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/simulation&#x27; to equal &#x27;/en/features/simulation&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/assets/first-robotics/onshapeforfirstteams.pdf$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/robotics</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/assets/first-robotics/onshapeforf&#x2026;&#x27; to equal &#x27;/en/education/robotics&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/enterprise-cad-software$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/onshape-enterprise</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/enterprise-cad-software&#x27; to equal &#x27;/en/onshape-enterprise&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/onshape-arena$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/features/onshape-arena-connection</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/onshape-arena&#x27; to equal &#x27;/en/features/onshape-arena-connection&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/education/educators?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/plans?PqWXpIvxJmQDj</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/education/educators?PqWXpIvxJmQDj&#x27; to equal &#x27;/en/education/plans?PqWXpIvxJmQDj&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/education/educators$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/plans</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/education/educators&#x27; to equal &#x27;/en/education/plans&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/education/programs-and-partners?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/?TmvSBHzGddaoi</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/education/programs-and-partners?T&#x2026;&#x27; to equal &#x27;/en/education/?TmvSBHzGddaoi&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/education/programs-and-partners$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/education/programs-and-partners&#x27; to equal &#x27;/en/education/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/education/programs-and-partners/first?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/robotics?TeculSGedhzKW</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/education/programs-and-partners/f&#x2026;&#x27; to equal &#x27;/en/education/robotics?TeculSGedhzKW&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/education/programs-and-partners/first$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/robotics</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/education/programs-and-partners/f&#x2026;&#x27; to equal &#x27;/en/education/robotics&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/internal-lead-referral-form$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/internal/internal-lead-referral-form</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/internal-lead-referral-form&#x27; to equal &#x27;/en/internal/internal-lead-referral-f&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-an-emergency-ventilator-was-built-in-21-days$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/case-studies/meter</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-an-emergency-ventilator-&#x2026;&#x27; to equal &#x27;/en/resource-center/case-studies/meter&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-vectoflow-measurement-solutions?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/vectoflow-fluid-measurement-webinar?dJEfxtsJunXwy</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-ve&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/vectoflow-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-vectoflow-measurement-solutions$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/vectoflow-fluid-measurement-webinar</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-ve&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/vectoflow-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-vectoflow-de?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/vectoflow-fluidmessungen-webinar-de?rIuyvCEfZsxJh</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-ve&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/vectoflow-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-vectoflow-de$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/vectoflow-fluidmessungen-webinar-de</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-ve&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/vectoflow-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/hubfs/academic/curriculum-resources/glasses-editing-final.html$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/lp/embedded-in-product-tutorial</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/hubfs/academic/curriculum-resources/&#x2026;&#x27; to equal &#x27;/en/lp/embedded-in-product-tutorial&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/hubfs/academic/curriculum-resources/molecule-assembly.html$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/lp/embedded-in-product-tutorial</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/hubfs/academic/curriculum-resources/&#x2026;&#x27; to equal &#x27;/en/lp/embedded-in-product-tutorial&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/hubfs/academic/curriculum-resources/gyrosphere-modeling-final.html$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/lp/embedded-in-product-tutorial</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/hubfs/academic/curriculum-resources/&#x2026;&#x27; to equal &#x27;/en/lp/embedded-in-product-tutorial&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/onshape-frames-fast-efficient-structural-framing-in-the-onshape-platform-031622?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshape-frames-fast-efficient-structural-framing?byxCdfacFKHJI</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/onshape-fr&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/onshape-fr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/onshape-frames-fast-efficient-structural-framing-in-the-onshape-platform-031622$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshape-frames-fast-efficient-structural-framing</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/onshape-fr&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/onshape-fr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/tech-tips/using-superlearners-algorithm-app-to-optimize-parts?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/partner-apps/?KHYbVDEweiARe</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/tech-tips/using-s&#x2026;&#x27; to equal &#x27;/en/partner-apps/?KHYbVDEweiARe&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/tech-tips/using-superlearners-algorithm-app-to-optimize-parts$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/partner-apps/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/tech-tips/using-s&#x2026;&#x27; to equal &#x27;/en/partner-apps/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/render-studio-photo-realistic-rendering-in-the-onshape-platform-021022?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/render-studio-photo-realistic-rendering-in-the-onshape-platform?yywENWMIVFICI</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/render-stu&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/render-stu&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/render-studio-photo-realistic-rendering-in-the-onshape-platform-021022$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/render-studio-photo-realistic-rendering-in-the-onshape-platform</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/render-stu&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/render-stu&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/live$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/onshape-live/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/live&#x27; to equal &#x27;/en/onshape-live/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/case-studies/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/user-stories/&#x27; to equal &#x27;/en/resource-center/case-studies/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/freetrial?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /lp/3d-cad-free-trial-ad?lgnmuyemCwolR</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/freetrial?lgnmuyemCwolR&#x27; to equal &#x27;/lp/3d-cad-free-trial-ad?lgnmuyemCwolR&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/freetrial$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /lp/3d-cad-free-trial-ad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/freetrial&#x27; to equal &#x27;/lp/3d-cad-free-trial-ad&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/tutorial/test-content-tutorial-1b$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/lp/embedded-in-product-tutorial</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/tutorial/test-content-tutorial-1b&#x27; to equal &#x27;/en/lp/embedded-in-product-tutorial&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/design-teams-overcome-blocked-collaboration$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /resource-center/ebooks/preventing-product-design-bottlenecks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/design-t&#x2026;&#x27; to equal &#x27;/resource-center/ebooks/preventing-pr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/innovation-blog/what-is-design-gridlock-costing-your-company$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /resource-center/ebooks/preventing-product-design-bottlenecks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/innovation-blog/w&#x2026;&#x27; to equal &#x27;/resource-center/ebooks/preventing-pr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/cad-data-management-advancing-product-design-in-2022-012622?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/cad-data-management-advancing-product-design-on-demand?DOeLZQrvHMloz</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/cad-data-m&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/cad-data-m&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/cad-data-management-advancing-product-design-in-2022-012622$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/cad-data-management-advancing-product-design-on-demand</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/cad-data-m&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/cad-data-m&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-conquer-old-cad-version-control-problems$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /resource-center/ebooks/preventing-product-design-bottlenecks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/how-to-c&#x2026;&#x27; to equal &#x27;/resource-center/ebooks/preventing-pr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-solve-cad-software-administration-issues$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /resource-center/ebooks/preventing-product-design-bottlenecks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/how-to-s&#x2026;&#x27; to equal &#x27;/resource-center/ebooks/preventing-pr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/instant-cad-access-anywhere-anytime$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /resource-center/ebooks/preventing-product-design-bottlenecks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/instant-&#x2026;&#x27; to equal &#x27;/resource-center/ebooks/preventing-pr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-overcome-cad-crashes-and-file-corruption$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /resource-center/ebooks/preventing-product-design-bottlenecks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/how-to-o&#x2026;&#x27; to equal &#x27;/resource-center/ebooks/preventing-pr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/say-goodbye-to-low-quality-customer-support$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /resource-center/ebooks/preventing-product-design-bottlenecks</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/say-good&#x2026;&#x27; to equal &#x27;/resource-center/ebooks/preventing-pr&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/6-ways-to-boost-engineering-productivity-102721?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/6-ways-to-boost-engineering-productivity?ckOWcriIUxRBE</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/6-ways-to-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/6-ways-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/6-ways-to-boost-engineering-productivity-102721$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/6-ways-to-boost-engineering-productivity</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/6-ways-to-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/6-ways-to-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/9-very-scary-things-about-old-cad-technology$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/9-absolutely-petrifying-things-about-traditional-cad-software</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/9-very-s&#x2026;&#x27; to equal &#x27;/en/blog/9-absolutely-petrifying-thin&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/14-things-you-need-in-a-pdm-system-part-2-of-2$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/14-things-you-need-in-a-pdm-system</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/14-thing&#x2026;&#x27; to equal &#x27;/en/blog/14-things-you-need-in-a-pdm-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/14-things-you-need-in-a-pdm-system-part-1-of-2$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/14-things-you-need-in-a-pdm-system</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/14-thing&#x2026;&#x27; to equal &#x27;/en/blog/14-things-you-need-in-a-pdm-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/get-started$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/get-started/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/get-started&#x27; to equal &#x27;/en/get-started/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-first-robotics-teams-embrace-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/6-reasons-your-first-team-should-use-cloud-native-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/why-firs&#x2026;&#x27; to equal &#x27;/en/blog/6-reasons-your-first-team-sh&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/fhe$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/case-studies/fhe</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/&#x27; to equal &#x27;/en/resource-center/case-studies/fhe&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/modern-cad-why-leading-firms-are-making-the-switch-081921?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/lp/modern-cad-panel-webinar?EyEypWEwIQjIO</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/modern-cad&#x2026;&#x27; to equal &#x27;/en/lp/modern-cad-panel-webinar?EyEyp&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/modern-cad-why-leading-firms-are-making-the-switch-081921$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/lp/modern-cad-panel-webinar</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/modern-cad&#x2026;&#x27; to equal &#x27;/en/lp/modern-cad-panel-webinar&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/evts$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/case-studies/evts</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/&#x27; to equal &#x27;/en/resource-center/case-studies/evts&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/user-stories/xing-mobility$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/case-studies/xing-mobility</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/&#x27; to equal &#x27;/en/resource-center/case-studies/xing&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/educators$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/educators</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/educators&#x27; to equal &#x27;/en/education/educators&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/improving-cad-collaboration?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/6-ways-to-improve-your-design-collaboration-with-cad?ElalasFpFBrKD</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/improving-cad-collaboration&#x2026;&#x27; to equal &#x27;/en/blog/6-ways-to-improve-your-desig&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/improving-cad-collaboration$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/6-ways-to-improve-your-design-collaboration-with-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/improving-cad-collaboration&#x27; to equal &#x27;/en/blog/6-ways-to-improve-your-desig&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/3-ways-to-improve-your-cad-collaboration?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/6-ways-to-improve-your-design-collaboration-with-cad?tIXxlDPJfwLNx</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/3-ways-t&#x2026;&#x27; to equal &#x27;/en/blog/6-ways-to-improve-your-desig&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/3-ways-to-improve-your-cad-collaboration$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/6-ways-to-improve-your-design-collaboration-with-cad</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/3-ways-t&#x2026;&#x27; to equal &#x27;/en/blog/6-ways-to-improve-your-desig&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/innovation-blog/the-difference-between-cad-files-and-databases?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/data-management-comparing-cad-files-and-databases?mRFrWmCyGWAFd</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/innovation-blog/t&#x2026;&#x27; to equal &#x27;/en/blog/data-management-comparing-ca&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/innovation-blog/the-difference-between-cad-files-and-databases$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/data-management-comparing-cad-files-and-databases</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/innovation-blog/t&#x2026;&#x27; to equal &#x27;/en/blog/data-management-comparing-ca&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/the-difference-between-files-and-databases-and-what-it-means-for-cad-and-product-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/data-management-comparing-cad-files-and-databases</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/the-difference-between-file&#x2026;&#x27; to equal &#x27;/en/blog/data-management-comparing-ca&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-buy-the-best-cad-system-for-your-engineers?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/cad-blog/how-to-buy-the-best-cad-system-for-your-product-development-team?oiXzjfsFtwRAq</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/how-to-b&#x2026;&#x27; to equal &#x27;/en/blog/cad-blog/how-to-buy-the-best&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-buy-the-best-cad-system-for-your-engineers$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/cad-blog/how-to-buy-the-best-cad-system-for-your-product-development-team</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/how-to-b&#x2026;&#x27; to equal &#x27;/en/blog/cad-blog/how-to-buy-the-best&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/features/data-management$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/features/product-data-management</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/features/data-management&#x27; to equal &#x27;/en/features/product-data-management&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/privacy-policy$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/privacy-center/privacy-policy</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/privacy-policy&#x27; to equal &#x27;/en/privacy-center/privacy-policy&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/buyers-guide-to-modern-cad?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /resource-center/ebooks/modernizing-your-cad-7-criteria-to-consider?JCZlmxSlWsjWO</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/buyers-guide-to-mod&#x2026;&#x27; to equal &#x27;/resource-center/ebooks/modernizing-y&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/ebooks/buyers-guide-to-modern-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /resource-center/ebooks/modernizing-your-cad-7-criteria-to-consider</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/ebooks/buyers-guide-to-mod&#x2026;&#x27; to equal &#x27;/resource-center/ebooks/modernizing-y&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/ebooks/the-buyers-guide-to-modern-cad-systems?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /resource-center/ebooks/modernizing-your-cad-7-criteria-to-consider?BLLrEqugPVIyx</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/ebooks/the-buyers&#x2026;&#x27; to equal &#x27;/resource-center/ebooks/modernizing-y&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/ebooks/the-buyers-guide-to-modern-cad-systems$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /resource-center/ebooks/modernizing-your-cad-7-criteria-to-consider</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/ebooks/the-buyers&#x2026;&#x27; to equal &#x27;/resource-center/ebooks/modernizing-y&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/innovation-blog/the-importance-of-cad-data-management?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/the-importance-of-data-management-in-the-cad-industry?pJpFwoEUBhcsw</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/innovation-blog/t&#x2026;&#x27; to equal &#x27;/en/blog/the-importance-of-data-manag&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/innovation-blog/the-importance-of-cad-data-management$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/the-importance-of-data-management-in-the-cad-industry</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/innovation-blog/t&#x2026;&#x27; to equal &#x27;/en/blog/the-importance-of-data-manag&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/5-best-practices-for-highly-effective-pdm-users-on-the-cloud-062421?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/5-best-practices-for-highly-effective-pdm-users-on-the-cloud?GIGtbsTDGKylC</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/5-best-pra&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/5-best-pra&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/5-best-practices-for-highly-effective-pdm-users-on-the-cloud-062421$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/5-best-practices-for-highly-effective-pdm-users-on-the-cloud</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/5-best-pra&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/5-best-pra&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/the-importance-of-cad-data-management?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/the-importance-of-data-management-in-the-cad-industry?mXTDYHLFEOXev</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/the-importance-of-cad-data-&#x2026;&#x27; to equal &#x27;/en/blog/the-importance-of-data-manag&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/the-importance-of-cad-data-management$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/the-importance-of-data-management-in-the-cad-industry</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/the-importance-of-cad-data-&#x2026;&#x27; to equal &#x27;/en/blog/the-importance-of-data-manag&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/covid-19-support$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/covid-19-support&#x27; to equal &#x27;/en/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/webinars/$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/webinars/&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/cad-blog/topic/tech-tips$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/cad-blog/topic/tech-tips&#x27; to equal &#x27;/en/resource-center/tech-tips/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/privacy$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/privacy-center/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/privacy-center&#x27; to equal &#x27;/en/privacy-center/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/how-elite-engineering-teams-are-solving-todays-collaboration-problems-040721?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/how-elite-engineering-teams-are-solving-todays-collaboration-problems?PyvMYsUAliXxq</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/how-elite-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/how-elite-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/how-elite-engineering-teams-are-solving-todays-collaboration-problems-040721$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/how-elite-engineering-teams-are-solving-todays-collaboration-problems</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/how-elite-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/how-elite-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/onshape-year-in-review-sketches-parts-assemblies-drawings-010621$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/onshape-year-in-review-sketches-parts-assemblies-drawings</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/onshape-ye&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/onshape-ye&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/augmented-reality-for-cad-fanatics-022421?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/augmented-reality-for-cad-fanatics?ZfElfIcLjSsik</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/augmented-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/augmented-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/augmented-reality-for-cad-fanatics-022421$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/augmented-reality-for-cad-fanatics</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/augmented-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/augmented-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/learn-how-dhl-drives-change-from-the-digital-to-the-physical-world-in-the-design-process-with-onshape-022421$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/learn-how-dhl-drives-change-from-the-digital-to-the-physical-world-in-the-design-process-with-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/learn-how-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/learn-how-&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/openbom-saas-plm-for-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/openbom-saas-plm-for-onshape</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/openbom-sa&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/openbom-sa&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-onshape-has-fundamentally-improved-parametric-cad?(.*)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-onshape-has-fundamentally-improved-parametric-cad?exvgxapRMnTgO</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-onshape-has-fundamentally-improved-parametric-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/how-onshape-has-fundamentally-improved-parametric-cad</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/privacy-center/gdpr$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/privacy-center/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/privacy-center/gdpr&#x27; to equal &#x27;/en/privacy-center/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/solving-the-top-5-pdm-data-management-problems-102920$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/solving-the-top-5-pdm-data-management-problems</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/solving-th&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/solving-th&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/webinars/categorizing-onshape-properties-10222020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/categorizing-onshape-properties</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/webinars/categorizing-onsh&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/categorizi&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/request-an-onshape-professional-trial$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/request-a-trial-of-onshape-professional</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/request-a-trial-of-onshape-professio&#x2026;&#x27; to equal &#x27;/en/request-a-trial-of-onshape-profes&#x2026;&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/edu/frc$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/education/robotics</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/edu/frc&#x27; to equal &#x27;/en/education/robotics&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/features/custom-features$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/features/custom-features</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/features/custom-features&#x27; to equal &#x27;/en/features/custom-features&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/videos$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/ebooks-and-whitepapers$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/ebooks-and-whitepapers&#x27; to equal &#x27;/en/resource-center/ebooks/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/learn/webinars$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/learn/webinars&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/fast-interactive-photorealistic-rendering$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/announcing-render-studio-beta</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/fast-int&#x2026;&#x27; to equal &#x27;/en/blog/announcing-render-studio-beta&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/resources/events$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/resources/events&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/platform$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/platform</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/platform&#x27; to equal &#x27;/en/platform&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/professional-trial$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/professional-trial</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/professional-trial&#x27; to equal &#x27;/en/professional-trial&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/pricing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/pricing</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/contact$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/contact</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/products/free$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/products/free</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/user-group-network$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/user-group-network/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/roi-calculator$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/roi-calculator</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/demo-request$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/demo-request</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/demo-request&#x27; to equal &#x27;/en/demo-request&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/changelog$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/changelog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/changelog&#x27; to equal &#x27;/en/changelog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/changelog/$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/changelog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/changelog/&#x27; to equal &#x27;/en/changelog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/mobile/welcome$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /m/welcome</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/mobile/welcome&#x27; to equal &#x27;/m/welcome&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/article$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/articles/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/article&#x27; to equal &#x27;/en/resource-center/articles/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/automate-design-post-processing-with-visualcamc$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/articles/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/automate&#x2026;&#x27; to equal &#x27;/en/resource-center/articles/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/fast,-interactive-photorealistic-rendering$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/articles/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/fast,-in&#x2026;&#x27; to equal &#x27;/en/resource-center/articles/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-perform-indexed-5-axis-machining$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/articles/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/how-to-p&#x2026;&#x27; to equal &#x27;/en/resource-center/articles/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/how-to-use-onshape-part-configurations$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/articles/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/how-to-u&#x2026;&#x27; to equal &#x27;/en/resource-center/articles/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/instant-cad-access-anywhere,-anytime$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/articles/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/instant-&#x2026;&#x27; to equal &#x27;/en/resource-center/articles/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/ipad-and-iphone-designed-for-cloud-cad-on-the-go$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/articles/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/ipad-and-iphone-designed-for&#x2026;&#x27; to equal &#x27;/en/resource-center/articles/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/take-a-magic-leap-with-this-onshape-integration$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/articles/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/take-a-m&#x2026;&#x27; to equal &#x27;/en/resource-center/articles/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/the-power-of-integrated-cad-plm$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/articles/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/the-powe&#x2026;&#x27; to equal &#x27;/en/resource-center/articles/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/what&#x27;s-it-like-teaching-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/articles/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/what\\\\&#x27;s-&#x2026;&#x27; to equal &#x27;/en/resource-center/articles/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/articles/why-creating-a-bom-with-cloud-cad-is-so-easy$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/articles/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/why-crea&#x2026;&#x27; to equal &#x27;/en/resource-center/articles/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/case-studies/ab-test$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/case-studies/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/case-studies/ab-t&#x2026;&#x27; to equal &#x27;/en/resource-center/case-studies/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/case-studies/button-test$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/case-studies/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/case-studies/butt&#x2026;&#x27; to equal &#x27;/en/resource-center/case-studies/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/case-studies/case-study-test-one$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/case-studies/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/case-studies/case&#x2026;&#x27; to equal &#x27;/en/resource-center/case-studies/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/case-studies/destination-titanic-oceangate-designs-carbon-fiber-subs-for-adventure-travel1$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/case-studies/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/case-studies/dest&#x2026;&#x27; to equal &#x27;/en/resource-center/case-studies/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/case-studies/hy5$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/case-studies/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/case-studies/hy5&#x27; to equal &#x27;/en/resource-center/case-studies/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/case-studies/test$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/case-studies/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/case-studies/test&#x27; to equal &#x27;/en/resource-center/case-studies/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/ebooks/cloud-based-cad-helps-companies-implement-agile-methods$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/ebooks/cloud-base&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/ebooks/hekate-test-progressive-profiling-default-content-the-state$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/ebooks/hekate-tes&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/ebooks/hekate-test-progressive-profiling-the-state-of-product-development-hardware-design-2020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/ebooks/hekate-tes&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/ebooks/the-buyer&#x27;s-guide-to-modern-cad-systems$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/ebooks/the-buyer\\\\&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/ebooks/the-buyer&#x27;s-guide-to-modern-cad-systems-download$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/ebooks/the-buyer\\\\&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/ebooks/the-engineering-leader&#x2019;s-guide-to-data-management-download$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/ebooks/the-engine&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/ebooks/the-engineering-leader&#x2019;s-guide-to-data-management-test$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/ebooks/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/ebooks/the-engine&#x2026;&#x27; to equal &#x27;/en/resource-center/ebooks/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/_jason-test$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/_jason-test&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/10-technical-questions-when-moving-from-solidworks-to-onshape-answered-012722$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/10-technic&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-cadasio-en$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-ca&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-renderstudio-de$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-re&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-renderstudio-en$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-re&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-renderstudio-fr$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-re&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-renderstudio-it$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-re&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/israel-june$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/israel-june&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-avidbots$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-av&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-dhl$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-dhl&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-fraunhofer-iem$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-fr&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-de-roboter-isento-pib$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-de&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-isento-pib-robot$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-is&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-prioritizing-agility$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-pr&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-renderstudio$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-re&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-prioritizingagility$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-pr&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-witted-it$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-wi&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/2023q1-ostechmeetup-frankfurt$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/2023q1-ost&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/2023q1-ostechmeetup-london$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/2023q1-ost&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-simulation-de$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-si&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar-simulation-fr$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar-si&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/2023q2-ostechmeetup-boston$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/2023q2-ost&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/2023q2-ostechmeetup-paris$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/2023q2-ost&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/2023q3-student-user-group$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/2023q3-stu&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/2023q3-user-group-for-start-ups$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/2023q3-use&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/2023q3-ostechmeetup-burlington$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/2023q3-ost&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/2023q3-ostechmeetup-hannover$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/2023q3-ost&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/4-reasons-to-consider-cloud-native-product-design-tools-120821$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/4-reasons-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/5-best-practices-for-highly-effective-pdm-users-on-the-cloud-080521$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/5-best-pra&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/5-reasons-why-desktop-cad-users-don&#x2019;t-renew-their-subscriptions-060123$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/5-reasons-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/5-things-engineers-must-try-with-the-xometry-onshape-app-042022$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/5-things-e&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/achieving-faster-performance-with-large,-complex-assemblies-032422$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/achieving-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/achieving-faster-performance-with-large,-complex-assemblies-081122$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/achieving-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/add-freeform-surfaces-to-your-designs-with-phi-062321$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/add-freefo&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/augmented-reality-for-cad-fanatics-old$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/augmented-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/back-to-school-cad-resources-for-teaching-onshape-083023$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/back-to-sc&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/bringing-cad-to-your-robotics-team-091322$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/bringing-c&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/index$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/index&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/cad-projects-for-your-stem-classroom-022123$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/cad-projec&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/cad-resources-for-your-classroom-083022$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/cad-resour&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/categorizing-onshape-properties-102220$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/categorizi&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-ben-mollica$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/cocktails-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-(jessie-hug)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-joe-kondroski$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/cocktails-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-justin-davis$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/cocktails-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-ryan-radford$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/cocktails-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/coffee-with-jess-04-20-21$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/coffee-wit&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/coffee-with-onshape-branching-and-merging-032521$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/coffee-wit&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/coffee-with-onshape-collaboration-022521$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/coffee-wit&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/coffee-with-onshape-configurations-040821$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/coffee-wit&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/coffee-with-onshape-enterprise-031121$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/coffee-wit&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/coffee-with-onshape-multi-body-part-design-042221$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/coffee-wit&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/coffee-with-onshape-release-management-021121$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/coffee-wit&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/collaborate-with-cad-using-onshape-in-first-120221$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/collaborat&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/de-cad-pdm-starten,-einloggen,-arbeiten$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/de-cad-pdm&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/cad-ist-nicht-genug-die-zukunft-der-produktentwicklung-060821$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/cad-ist-ni&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/datensicherheit-im-produktentwicklungsprozess-durch-saas$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/datensiche&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/warum-unternehmen-von-solidworks-zu-onshape-wechseln$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/warum-unte&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/scewo-webinar$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/scewo-webi&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/old_url$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/old_url&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/design-your-vex-robot-in-the-cloud-using-onshape-040522$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/design-you&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/designing-and-3d-printing-robotic-end-of-arm-tools-111721$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/designing-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/designing-for-digital-fabrication-in-onshape-052422$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/designing-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/designing-for-science-olympiad-events-with-onshape-011723$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/designing-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/digging-deeper-into-onshape-for-education-092823$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/digging-de&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/driving-alignment-with-high-performing-product-teams-a-panel-discussion$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/driving-al&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/driving-alignment-with-high-performing-product-teams-a-panel-discussion-101520$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/driving-al&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/emea-session-quarterly-onshape-review-learn-what&#x2019;s-new-032923$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/emea-sessi&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/emea-5-reasons-why-desktop-cad-users-don&#x2019;t-renew-their-subscriptions-060623$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/emea-5-rea&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/emea-how-command-tooling-systems-created-an-agile-design-process-with-built-in-pdm-020923$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/emea-how-c&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/emea-introducing-onshape-simulation-102722$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/emea-intro&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/emea-introducing-onshape-simulation-110322$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/emea-intro&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/emea-introducing-onshape&#x2019;s-native-connection-to-arena-plm-100622$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/emea-intro&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/emea-onshape&#x2019;s-top-10-most-exciting-features-in-2022-113022$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/emea-onsha&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/emea-quarterly-onshape-review-learn-what&#x2019;s-new-062923$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/emea-quart&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/emea-quarterly-onshape-review-learn-what&#x2019;s-new-101823$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/emea-quart&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/switching-from-soliworks-to-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/switching-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/engineering-design,-simulation,-and-optimization-in-the-cloud-111721$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/engineerin&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/pasando-de-solidworks-a-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/pasando-de&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/explore-onshape-fundamentals-hands-on-test-drive-103123$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/explore-on&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/pourquoi-les-entreprises-basculent-de-solidworks-a-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/pourquoi-l&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events-at-amazon-lunch-and-learn-ryan-radford$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events-at-amazon-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-ben-mollica-030921$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/cocktails-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-james-french-031121$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/cocktails-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-jessie-hug-032321$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/cocktails-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-joe-kondroski-031021$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/cocktails-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-ryan-radford-030421$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/cocktails-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/getting-the-most-out-of-your-onshape-education-enterprise-012423$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/getting-th&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/happy-hour-with-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/happy-hour&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/hone-your-onshape-skills-with-the-cad-challenges-app-041823$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/hone-your-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/how-and-why-to-make-the-switch-to-onshape-for-your-cad-curriculum-080521$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/how-and-wh&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/how-command-tooling-systems-created-an-agile-design-process-with-built-in-pdm-020823$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/how-comman&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/how-dhl-drives-change-in-their-design-process-with-onshape-071422$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/how-dhl-dr&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/how-elite-engineering-teams-are-solving-today&#x2019;s-collaboration-problems-040721$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/how-elite-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/how-engineering-teams-can-drive-product-innovation-with-onshape-a-technical-discussion-111820$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/how-engine&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/how-exxentric-designs-(hekate-webinar-test)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/how-exxentric-designs-its-popular-flywheel-training-products-with-onshape-070121$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/how-exxent&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/how-industrial-manufacturing-companies-build-agility-into-the-design-process$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/how-indust&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/how-norden-mfg-built-a-faster,-more-efficient-machine-design-process-051122$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/how-norden&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/qdot-net-zero$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/qdot-net-z&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/how-to-bring-simulation-into-your-design-engineering-curriculum-072021$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/how-to-bri&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/how-to-create-and-use-onshape-custom-features-for-education-071922$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/how-to-cre&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/how-to-prepare-students-for-the-onshape-associate-certification-042822$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/how-to-pre&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/how-to-set-your-first-season-up-for-success-with-onshape-102121$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/how-to-set&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/how-to-use-onshape-like-a-pro-in-your-classroom-081921$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/how-to-use&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/international-design-conference$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/internatio&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/introducing-onshape-simulation-102622$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/introducin&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/introducing-onshape-simulation-110222$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/introducin&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/introducing-onshape&#x2019;s-native-connection-to-arena-plm-100522$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/introducin&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/perche-le-aziende-stanno-passando-da-solidworks-a-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/perche-le-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/jess-test-first-party-cookies$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/jess-test-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/jess-test$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/jess-test&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/learn-how-avidbots-drives-design-collaboration-and-productivity-with-onshape-051921$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/learn-how-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/emea-learn-how-avidbots-drives-design-collaboration-and-productivity-with-onshape-052021$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/emea-learn&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/learn-how-dhl-drives-change-from-the-digital-to-the-physical-world-in-the-design-process-with-onshape-110420$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/learn-how-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/leveraging-cad-in-the-hyper-personalized-world-of-consumer-goods-081022$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/leveraging&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/liveworx-23$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/liveworx-23&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/make-the-switch-to-onshape-for-collegiate-racing-and-design-teams-102522$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/make-the-s&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/make48-indianapolis$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/make48-ind&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/make48-nationals-2023$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/make48-nat&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/make48-tbd$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/make48-tbd&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/makerbot-cloud-based-design-for-3d-printing-medical-devices-060921$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/makerbot-c&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/making-the-switch-from-autodesk-fusion-360-to-onshape-for-education-111621$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/making-the&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/making-the-switch-to-onshape-for-education-040821$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/making-the&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/massrobotics-robosource$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/massroboti&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/maxmind-fields-test$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/maxmind-fi&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/next-gen-cloud-simulation-changes-the-game-for-design-engineers-093021$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/next-gen-c&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/no-pain,-all-gain-with-cloud-cad-and-cae-an-onscale-onshape-webinar-111920$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/no-pain,-a&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/nordic-ev-summit-2023$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/nordic-ev-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/nvidia-gtc-conference$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/nvidia-gtc&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/nvidia&#x27;s-gtc-conference-training$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/nvidia\\\\&#x27;s-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/taking-stem-projects-beyond-the-classroom-061721$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/taking-ste&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/onscale-cloud-cfd-a-game-changer-for-fluid-dynamics-engineers-051321$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/onscale-cl&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events-essential-tips-all-about-versions-071521$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events-essential-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events-essential-tips-using-documents-effectively-041521$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events-essential-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events-frames-fast,-efficient-structural-framing-in-the-onshape-platform-031622$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events-frames-fas&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events-in-engineering-bydesign-with-iteea-110921$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events-in-enginee&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events-insights-understanding-student-learning-with-analytics-120821$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events-insights-u&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events-live$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events-live&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events-live-&#x27;23$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events-live-\\\\&#x27;23&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/2023q4-ostechmeetup-amsterdam$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/2023q4-ost&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events-year-in-review-sheet-metal,-surfacing-configurations-012021$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events-year-in-re&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events-year-in-review-sketches,-parts,-assemblies-drawings-010621$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events-year-in-re&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events&#x2019;s-top-10-most-exciting-features-in-2022-112922$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events%E2%80%99s-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events&#x27;s-london-tech-meetup$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events\\\\&#x27;s-london-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events&#x27;s-nyc-tech-meetup$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events\\\\&#x27;s-nyc-tec&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events&#x27;s-oslo-tech-meetup$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events\\\\&#x27;s-oslo-te&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events&#x27;s-toronto-tech-meetup$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events\\\\&#x27;s-toronto&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/pdm-is-dead,-long-live-cloud-native-cad-and-plm-051722$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/pdm-is-dea&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/placeholder-event$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/placeholde&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/how-onshape-certification-can-support-cte-programs-and-unlock-funding-051121$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/how-onshap&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/prioritizing-agility-the-new-imperative-in-product-design-092321$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/prioritizi&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/product-innovation-in-an-unpredictable-market-092221$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/product-in&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/product-innovation-in-an-unpredictable-market-092221-b$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/product-in&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/product-innovation-in-the-&#x201C;new-normal&#x201D;-critical-insights-on-cloud-transformation-011321$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/product-in&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/quarterly-onshape-review-learn-what&#x2019;s-new-032823$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/quarterly-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/quarterly-onshape-review-learn-what&#x2019;s-new-040622$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/quarterly-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/quarterly-onshape-review-learn-what&#x2019;s-new-062723$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/quarterly-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/quarterly-onshape-review-learn-what&#x2019;s-new-080422$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/quarterly-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/quarterly-onshape-review-learn-what&#x2019;s-new-101723$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/quarterly-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/quarterly-onshape-review-learn-what&#x2019;s-new-120921$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/quarterly-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/research-symposium$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/research-s&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/revolutionize-the-creation,-presentation-and-delivery-of-product-documentation-with-cadasio-021021$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/revolution&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/solidworks-to-onshape-migration-made-easy-042121$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/solidworks&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/stop-designing-today&#x27;s-high-tech-products-with-yesterday&#x27;s-cad-tools$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/stop-desig&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/switching-from-grabcad-workbench-to-onshape-for-student-teams-052323$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/switching-&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/test$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/test&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/test-event$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/test-event&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/test-ptc-event$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/test-ptc-e&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/test-jason$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/test-jason&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/test-webinar-form-an-onscale-onshape-webinar-111920$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/test-webin&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/think-like-a-startup-building-resilient-supply-chains$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/think-like&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/think-like-a-startup-building-resilient-supply-chains-071322$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/think-like&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/think-like-a-startup-fundraising-for-hardware-companies-091322$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/think-like&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/think-like-a-startup-mitigating-cyber-risks-011823$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/think-like&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/think-like-a-startup-the-definitive-storytelling-framework-041223$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/think-like&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/top-10-cad-features-that-enable-real-time-collaboration-031821$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/top-10-cad&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/2023q3-ostechmeetup-hannover-backup$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/2023q3-ost&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/training-event$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/training-e&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/transforming-cad-data-management-072821$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/transformi&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/transforming-cad-data-management-old$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/transformi&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/ug-pro$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/ug-pro&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/ug-startup$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/ug-startup&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/ug-student$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/ug-student&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/ug-women$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/ug-women&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/using-onshape-for-science-olympiad-020322$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/using-onsh&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/using-onshape-to-design-a-vex-robot-in-the-cloud-111522$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/using-onsh&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/view-visual-design-history,-assembly-hierarchy,-and-manage-cross-discipline-projects-with-oneipm$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/view-visua&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/webinar$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/webinar&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/product-experimentation-stefan-thomke$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/product-ex&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/g2p-robotics-market-trends-for-2022$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/g2p-roboti&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/what&#x27;s-new-in-onshape-020321$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/what\\\\&#x27;s-ne&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/what&#x27;s-new-in-onshape-032421$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/what\\\\&#x27;s-ne&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/what&#x27;s-new-in-onshape-042821$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/what\\\\&#x27;s-ne&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/what&#x27;s-new-in-onshape-052621$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/what\\\\&#x27;s-ne&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/what&#x27;s-new-in-onshape-082521$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/what\\\\&#x27;s-ne&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/what&#x27;s-new-in-onshape-102121$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/what\\\\&#x27;s-ne&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/what&#x27;s-new-in-onshape-111220$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/what\\\\&#x27;s-ne&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/why-companies-are-moving-from-file-based-cad-to-onshape-121521$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/why-compan&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/events/your-mobile-adventure-awaits-with-phi-touch-082923$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/events/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/events/your-mobil&#x2026;&#x27; to equal &#x27;/en/resource-center/events/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/innovation-blog/10-ways-design-makes-or-breaks-consumer-products-test$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/innovation-blog/1&#x2026;&#x27; to equal &#x27;/en/resource-center/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/innovation-blog/introducing-design-data-management-2.0$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/innovation-blog/i&#x2026;&#x27; to equal &#x27;/en/resource-center/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/innovation-blog/jess-test-blog-post$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/innovation-blog/j&#x2026;&#x27; to equal &#x27;/en/resource-center/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/innovation-blog/template-test$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/innovation-blog/t&#x2026;&#x27; to equal &#x27;/en/resource-center/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/innovation-blog/the-power-of-cloud-collaboration-and-teamwork-in-product-innovation$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/innovation-blog/t&#x2026;&#x27; to equal &#x27;/en/resource-center/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/innovation-blog/the-top-real-time-collaboration-tools-for-engineers-that-transform-product-development-(part-2)-$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/&#x27; to equal &#x27;/en/resource-center/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/innovation-blog/why-your-cfo-wants-to-move-to-cloud-cad-blog-new$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/innovation-blog/w&#x2026;&#x27; to equal &#x27;/en/resource-center/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/tech-tips/automatically-generate-matching-part-numbers-drawings$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/tech-tips/automat&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/tech-tips/how-to-route-a-wire$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/tech-tips/how-to-&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/tech-tips/no-code-needed-how-to-create-custom-cad-features$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/tech-tips/no-code&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/tech-tips/tech-tip-delegating-approvals$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/tech-tips/tech-tip-how-to-use-a-tangent-mate$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/tech-tips/tech-tip-how-to-use-linked-documents$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/tech-tips/tech-tip-let&#x27;s-build-a-frame-guide$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/tech-tips/tech-tip-secrets-of-the-shift-key$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/tech-tips/tech-tip-using-interference-detection$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/tech-tips/tech-ti&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/tech-tips/using-superlearner&#x2019;s-algorithm-app-to-optimize-parts$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/tech-tips/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/tech-tips/using-s&#x2026;&#x27; to equal &#x27;/en/resource-center/tech-tips/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos/advanced-part-modeling-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos/advanced-p&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos/viewavidbotswebinar$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos/viewavidbo&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos/cadwolf-partner-spotlight$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos/cadwolf-pa&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos/cnc-machining-of-onshape-models-using-visualcamc$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos/cnc-machin&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos/generating-cam-toolpaths-with-visualcamc$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos/generating&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos/video-isento-pib-robot$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos/video-isen&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos/marine-robots-witted-en$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos/marine-rob&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos/inserting-your-bill-of-materials-into-a-drawing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos/inserting-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos/introducing-generative-design-for-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos/introducin&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos/lorem-ipsum-video$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos/lorem-ipsu&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos/migrate-years-of-cad-data-in-hours-with-cassini$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos/migrate-ye&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos-claraio$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos-claraio&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos-and-power-surfacing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos-and-power-&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos-customer-story-oceangate$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos-customer-s&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos-partner-webinar-solidworks-to-onshape-migration-made-easy$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos-partner-we&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos/production-machining-in-the-cloud$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos/production&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos/experimentation-product-development-stefan-thomke-webinar$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos/experiment&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos/video-1$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos/video-1&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/videos/virtual-mockup-with-3dtagz$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/videos/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/videos/virtual-mo&#x2026;&#x27; to equal &#x27;/en/resource-center/videos/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/resource-center/what-is-new/test-2-whats-new$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/resource-center/what-is-new/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/what-is-new/test-&#x2026;&#x27; to equal &#x27;/en/resource-center/what-is-new/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/14-reasons-top-manufacturers-use-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/cloud-native-vs-cloud-storag&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/2-strategies-for-moving-legacy-data-to-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/2-strategies-for-moving-lega&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/2-keys-to-accelerate-product-development$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/operations&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/3-business-questions-to-consider-when-choosing-cad-software$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/articles/key-insi&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/3-traits-execs-value-most-in-a-mechanical-engineer$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/3-traits-execs-value-most-in&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/4-signs-you&#x27;re-overpaying-for-your-cad-system$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/4-signs-you\\\\&#x27;re-overpaying-f&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/5-additive-manufacturing-trends-in-2017$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/pros-cons-additive-manufactu&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/5-reasons-to-to-visit-the-onshape-learning-center$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;https://learn.onshape.com/&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/6-reasons-to-use-the-learning-center$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;https://learn.onshape.com/&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/6-ways-cloud-cad-can-accelerate-your-success$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/growing-your-business-with-c&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/7-cloud-cad-features-you-won&#x27;t-find-on-desktop$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/7-cloud-cad-features-you-won&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/7-traits-of-the-perfect-cad-pilot-project$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-to-onboard-your-first-ro&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/a-year-in-review-onshape-user-group-meetings$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/user-group-network/&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/actronika-uses-onshape-to-integrate-haptic-technology$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/case-studies/actr&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/add-view-only-users-onshape-professional$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/add-view-only-users-onshape-&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/aerospace-startup-attempts-hi-speed-space-internet$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/aerospace-startup-attempts-h&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/agile-development-time-for-engineers-to-catch-up$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/becoming-agile&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/are-your-product-designs-compliant$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/features/collaboration&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/cad-software-incompatibility$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/top-things-engineers-dislike&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/can-industrial-design-be-beautiful$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/beautiful-products-industria&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/cassini-makes-migrating-cad-data-to-onshape-from-solidworks-easy$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/cassini-makes-migrating-cad-&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/change-or-die-why-cad&#x27;s-slow-to-embrace-the-cloud$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/change-or-die-why-cad\\\\&#x27;s-slo&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/cloud-design-collaboration-tools-for-your-core-product-engineering-team$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-cloud-cad-improves-colla&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/cloud-native-cad-provides-&#x201C;peace-of-mind&#x201D;-for-engineer$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/cloud-native-cad-provides-%E&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/does-your-product-development-team-have-trouble-accessing-your-design-data-when-you-need-it$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/introducing-design-data-mana&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/early-team-communication-vital-to-product-innovation$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/features/collaboration&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/full-visibility-into-the-product-design-process$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/choosing-the-right-product-d&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-cloud-cad-helps-maintain-business-continunity$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/cloud-native-vs-cloud-storag&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-cloud-cad-improves-supplier-communications$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/growing-your-business-with-c&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-cloud-cad-provides-a-competitive-edge$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/growing-your-business-with-c&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-cloud-native-cad-promotes-agility-for-product-design-teams$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/cloud-native-vs-cloud-storag&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-collaboration-and-agility-lead-to-innovation$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/ebooks/accelerati&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-do-companies-rate-their-own-productivity-and-innovation$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/cloud-productivity-tools-giv&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-executives-and-frontline-engineers-view-their-teams&#x27;-strengths-and-weaknesses-differently$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-executives-and-frontline&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-onshape-helps-synapse-speed-up-product-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/why-you-want-to-fail-fast-in&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-the-right-collaboration-tools-can-make-2022-a-productive-year$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/features/collaboration&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-to-adapt-to-new-engineering-work-environments$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/engineering-career-path-advi&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-to-become-a-cad-power-user$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/cad-users-are-you-frustrated&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-to-expedite-your-time-to-market$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/consumer-product-design-can-&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-to-optimize-cad-collaboration-and-compliance$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/features/collaboration&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-to-overcome-hardware-design&#x27;s-biggest-obstacle$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-to-overcome-hardware-des&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-to-use-cloud-cad-to-accelerate-sales$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/growing-your-business-with-c&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-to-use-cloud-cad-to-enhance-your-marketing$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/growing-your-business-with-c&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/how-to-use-cloud-cad-to-maximize-customer-input$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/growing-your-business-with-c&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/improve-team-communication-with-onshape&#x2019;s-cloud-sharing-features$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/improve-team-communication-w&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/improving-business-agility-with-cloud-native-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/cloud-native-vs-cloud-storag&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/improving-remote-access-and-flexibility-the-new-reality-of-remote-work$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/the-importance-of-flexibilit&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/increase-productivity-on-the-manufacturing-floor$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/new-era-pdm-proper-design-ma&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/innovation-for-good-why-game-changing-product-developers-rely-on-onshape&#x2019;s-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/innovation-for-good-why-game&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/ipad-and-iphone-designed-for-cloud-cad-on-the-go$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/ipad-and-iphone-designed-for&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/making-it-work-integrated-pdm-with-cloud-native-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/connecting-cad-pdm-plm&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/mechanical-engineers-don&#x27;t-worry-about-job-title$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/mechanical-engineers-don\\\\&#x27;t-&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog-partner-spotlight-electra-cloud-is-the-only-electrical-schematic-software-you-can-access-anywhere$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog-partner-spotlight-electra-cl&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/parallelization-now-in-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/why-cloud-cad-is-faster-than&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/preventing-product-design-bottlenecks-which-version-is-the-latest-version-of-a-cad-file$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/data-management-comparing-ca&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/product-design-and-engineering-from-your-phone$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/under-the-hood-cad-for-mobile&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/product-designers-and-engineers-on-covid-19$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/onshape-will-help-with-your-&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/product-innovation-thomas-edison-and-&#x201C;sweating-less&#x201D;-with-the-cloud$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/product-innovation-thomas-ed&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/purifying-water-in-panama,-with-free-cloud-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/purifying-water-in-panama,-w&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/remote-cad-you-won&#x27;t-believe-what-you-can-build$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/remote-cad-you-won\\\\&#x27;t-believ&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/remote-work-redefining-the-workplace-and-product-development$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/cad-data-management-making-p&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/some-early-new-year&#x2019;s-product-development-resolutions-for-2021$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/some-early-new-year%E2%80%99&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/tackling-tight-deadines-with-shared-designs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/onshapes-best-design-and-dev&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/the-biggest-pains-of-traditional-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/why-we-started-from-scratch-&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/the-key-to-product-development-collaboration$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/reality-check-how-strong-is-&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/the-top-3-advantages-of-new-release-management$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/features/workflow&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/the-top-real-time-collaboration-tools-for-engineers-that-transform-product-development-(part-2)-$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/think-you-can&#x2019;t-afford-pdm-think-again$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/think-you-can%E2%80%99t-affo&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/using-real-time-metrics-to-manage-your-design$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/the-need-for-cad-analytics-a&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/want-to-master-cloud-cad-here&#x27;s-how$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/want-to-master-cloud-cad-her&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/want-to-start-an-onshape-user-group$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/user-group-network/&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/what-is-the-state-of-product-development-and-hardware-design-in-2020$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/new-industry-report-state-pr&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/what-is-the-state-of-product-development-and-hardware-design-in-2021$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/new-industry-report-state-pr&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/what-we&#x2019;re-talking-about-2022-trends,-customer-success,-virtual-events$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/what-we%E2%80%99re-talking-a&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/what-we&#x2019;re-talking-about-manufacturing,-render-studio,-agile-method$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/what-we%E2%80%99re-talking-a&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/what-your-digital-transformation-strategy-needs$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-saas-impacts-digital-tra&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/what&#x2019;s-more-important-design-processes,-or-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/what%E2%80%99s-more-importan&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/why-auxiliary-design-school-chose-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/resource-center/case-studies/&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/why-collaboration-is-easier-with-cloud-based-tools$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/how-cloud-cad-improves-colla&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/why-forward-thinking-companies-choose-onshape$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/growing-your-business-with-c&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/why-onshape-is-a-top-place-to-work$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/blog/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/why-product-development-teams-are-adopting-saas$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/4-benefits-of-saas-for-produ&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/why-real-time-cad-deployment-is-essential$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/top-10-tips-for-enabling-rea&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/why-tech-leaders-develop-products-in-the-cloud$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/growing-your-business-with-c&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/why-you-need-real-time-pdm-to-optimize-cad$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/connecting-cad-pdm-plm&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/en/blog/work-life-balance-and-remote-workers$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/blog/</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/blog/13-remote-work-tips-from-lea&#x2026;&#x27; to equal &#x27;/en/blog/&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt>Get the expected redirect url  /en/</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/([a-z0-9/-]+)/$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en/index.html</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/-]+)/&#x27; to equal &#x27;/en/index.html&#x27;</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule ^/?([a-z0-9/-]+)$</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        const response = yield axios.sendRequest(rewriteRule.fromLink);\\n                        res = response;\\n                    })</code></pre></dd>\\n            <dt class=\\\"error\\\">Get the expected redirect url  /en.html</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>const redirectUrl = res.request.res.responseUrl.replace(AxiosHelper_1.default.baseUrl, &#x22;&#x22;);\\n(0, chai_1.expect)(redirectUrl).to.equal(rewriteRule.expectedToLink);</code></pre></dd>\\n            <dd class=\\\"error\\\">AssertionError: expected &#x27;/en/-]+)&#x27; to equal &#x27;/en.html&#x27;</dd>\\n          </dl>\\n        </section>\\n      </dl>\\n    </section>\\n\";\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (code);\n\n//# sourceURL=webpack://redirect-testing/./report/results.html?");

/***/ }),

/***/ "./report/style.css":
/*!**************************!*\
  !*** ./report/style.css ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://redirect-testing/./report/style.css?");

/***/ }),

/***/ "./report/src/main.ts":
/*!****************************!*\
  !*** ./report/src/main.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst results_html_1 = __importDefault(__webpack_require__(/*! ../results.html */ \"./report/results.html\"));\n__webpack_require__(/*! ../style.css */ \"./report/style.css\");\n// NOTE: feel free to refactor for a more interesting framework like Vue\n// Load results into document.\nconst body = document.querySelector('body');\nif (!body) {\n    throw new Error('body does not exist! Make sure report/index.html is formatted correctly.');\n}\nbody.innerHTML = results_html_1.default;\n// Find the comparison section.\nconst suites = Array.from(body.children);\n// delete the path line.\nsuites.forEach((suite) => {\n    suite.querySelectorAll('dt').forEach((line) => {\n        if (line.innerHTML.trim().endsWith('.js')) {\n            line.style.display = 'none';\n        }\n    });\n});\nconst comparisonSection = suites.find((section) => {\n    const [header] = section.children;\n    return header.textContent === '[AUTOMATED COMPARISON TEST]';\n});\nif (!comparisonSection) {\n    throw new Error('Page Comparison suite is missing from the html results');\n}\nconst [, comparisonChildList] = comparisonSection.children;\nconst contextSections = Array\n    .from(comparisonChildList.children)\n    .filter((contextSection) => contextSection.tagName === 'SECTION')\n    .filter((contextSection) => {\n    const [, descriptionList] = contextSection.children;\n    return descriptionList.children.length;\n});\n\n\n//# sourceURL=webpack://redirect-testing/./report/src/main.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./report/src/main.ts");
/******/ 	
/******/ })()
;