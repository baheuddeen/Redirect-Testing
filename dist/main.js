/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./report/results.html":
/*!*****************************!*\
  !*** ./report/results.html ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// Module\nvar code = \"    <section class=\\\"suite\\\">\\n      <h1>Rewrite Rules</h1>\\n      <dl>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /iframe/sign-in/general$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /iframe/sign-in/general/index.html Not Equal Expected: /iframe/sign-in/general</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cache-check.png to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /global-assets/cache-check.jsp Not Equal Expected: /cache-check.png</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/resource-center/innovation-blog/* to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/resource-center/innovation-blog/* to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/innovation-blog$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/signup/?(.+)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/signup?(.+)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/([a-z][a-z])/signup?(.+)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/([a-z][a-z])/signup$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/signup$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/signup/$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/de$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/fr$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/it$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/legal$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/de/resource-center$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/fr/resource-center$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/it/resource-center$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resource-center/webinars/$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/featurescript$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-pricing$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/contact$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/tw$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/tw/$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/tw/contact$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cn/contact$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/kr/contact$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/jp/contact$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/es/contact$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/full-cloud-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/features-and-pricing$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/benefits$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /cad-blog Not Equal Expected: /en/blog/index.html</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-for-macs$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/products/education$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/education$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/products/standard$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/products/professional$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/products/enterprise$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/request-a-demo-form$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/about-us#founders$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/learn$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/edu$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/edu#edu-faq$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/video$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/roi-calculator$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/pricing$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/edu/signup$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/learn-cad-online$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/topic/webinars$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/user-group-network$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/contact-onshape-team$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/tutorials$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/education-plan$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customers$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/robots-to-the-rescue/guidelines$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/covid-19-support$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/featurescript#custom$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/featurescript#start$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customfeatures$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/edu/college-curriculum$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/topic/tutorials$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/products/free$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/faqs$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/new/signup$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/eula$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/m/privacy-policy$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/m/eula$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/api-access$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/tw/m/welcome$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/de/m/welcome$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/tw/m/contact-onshape-team$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/de/m/contact-onshape-team$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cn/m/contact-onshape-team$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/kr/m/contact-onshape-team$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cn/m/welcome$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/kr/m/welcome$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/modern-3d-cad-signup$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/modern-3d-cad-mobile-android-ppcs$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/modern-3d-cad-g2$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/products$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/product$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/products/edu$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/terms-of-use$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/demo$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/privacy$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/log-in$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/sign-in$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/login$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/legal/privacy-policy$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/m/legal$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/m/terms-of-use$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/blog$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /blog Not Equal Expected: /en/blog/index.html</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/events$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/modern-3d-cad-reddit$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/request-an-onshape-professional-trial$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/6-practices-for-highly-effective-pdm-users-a-day-in-the-life-of-a-product-development-team-10312019$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/ask-me-anything-jon-hirschtick-01302020$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/dixie-iron-works-switches-to-onshape-traceparts$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/dixie-iron-works-switches-to-onshape-outbrain$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/hirebotics-switches-to-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/hirebotics-switches-to-onshape-designworld$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/premier-custom-built-0$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/solidworks-workgroup-pdm-get-onshape-demo$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /lp/solidworks-workgroup-pdm-get-onshape-demo Not Equal Expected: /en/</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/modern-3d-cad-brand-ppcs$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/robotstotherescue$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/robots2therescue$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/introduction-to-pdm-data-management-best-practices-11142019$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/ebooks/g2-europe-regional-satisfaction-index$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/accelerating-product-development-with-the-cloud-4-takeaways-from-new-research-051420$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/managing-your-design-process-with-external-contractors-and-suppliers-052120$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/signup$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/advanced-tips-tricks-for-creating-exploded-views-in-onshape-052820$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/whats-new-in-onshape-060420$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/onshape-essential-tips-best-practices-when-importing-data-061820$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/how-engineering-teams-optimize-collaboration-with-onshape-a-panel-discussion-062520$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/creating-community-how-your-business-can-supercharge-its-online-customer-relationships-060220$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/eduenterprise$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/6-reasons-why-onshape-is-the-best-choice-for-solidworks-users-07062020$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/6-reasons-why-onshape-is-the-best-choice-for-solidworks-users-07162020$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/introducing-onshape-education-enterprise-a-new-cad-platform-for-schools-universities-072320$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/whats-new-in-onshape-072320$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/onshape-on-the-iphone-a-hands-on-tutorial-081320$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/making-the-switch-to-onshape-for-k12-education-081820$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/making-the-switch-to-onshape-for-university-education-081920$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/mapping-your-business-processes-from-solidworks-to-onshape-08192020$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/organizing-your-company-in-a-cloud-based-design-system-a-technical-exploration-061120$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/using-onshape-with-web-conferencing-tools-to-teach-cad-remotely-082520$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/why-siemens-teamcenter-users-should-consider-onshape-082620$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/onshape-essential-tips-restore-032620$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/ask-the-professorhow-to-achieve-a-truly-concurrent-development-process-011620$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/5-critical-conclusions-from-the-state-of-product-design-hardware-development-2019-08222019$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/how-engineering-teams-can-adapt-to-changing-work-environments-040120$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/whats-new-in-onshape-092420$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/onshape-for-the-university-classroom-050720$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/4-reasons-to-consider-saas-product-design-tools-for-your-company-02132020$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/top-5-product-development-improvements-to-consider-in-2020-01092020$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/signup/manifesto$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/signup/real-time-data-management$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/signup/agile-product-design-cad-platform$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/modern-3d-cad-ppcs$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/modern-3d-cad-ad-freeaccount$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/signup/real-time-deployment-and-access$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/modern-3d-cad-gmad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/first-look-at-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/modern-3d-cad-ppc-ar$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/modern-cad-finally-techwireasia$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/signup/6-things$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/cutsforth-switches-to-onshape-digitalengineering$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/cutsforth-switches-to-onshape-outbrain$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/cutsforth-switches-to-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/support$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/sitemap$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /sitemap Not Equal Expected: /en/</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/press-room$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/careers$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/jobs$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/m/contact-onshape-team$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/contact-sales$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/partners/apply$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/.well-known/apple-app-site-association$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /.well-known/apple-app-site-association.json Not Equal Expected: /.well-known/apple-app-site-association</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/ptcs-onshape-teams-up-with-first-for-robots-to-the-rescue-design-competition$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/tutorial-collaboration$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/training-working-alongside-your-existing-cad-system$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/essentials-multipart$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/what-is-the-state-of-product-development-and-hardware-design-in-2020$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/onshapes-core-values-our-statement-of-principles$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/your-time-is-worth-more-than-you-think$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/copies-copies-copies$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customers/voltea$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/finding-free-public-wifi-on-the-go$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/introducing-onshape-teams$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/tech-tip-fully-maximizing-onshape-help$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/onshape-documents-data-in-one-place$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/dont-be-fooled-by-fake-branching-merging$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/introducing-onshape-companies$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/essentials-part-studios$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/onshape-companies$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/how-google-solved-the-version-control-problem$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/introducing-the-onshape-app-store$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/topic/whats-new$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/are-you-sick-of-asking$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customers/inboard$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/author/lou-gallo$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/traditional-cad-subscriptions$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/capex-vs-opex-an-engineers-guide-to-controlling-cad-costs$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/how-onshape-saves-us-a-day-on-nearly-every-manufacturing-job$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customers/openspaceagency$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/announcing-the-state-of-product-development-and-hardware-design-2019-report$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/parametric-modeling-2.0-onshapes-modern-approach-to-configurations$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customers/auxiliary-design-school$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/onshape-now-supports-3dconnexion-3d-mice$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/onshape-for-ipad-pro$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/multipart-design$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/onshape-launches-new-learning-center-for-full-cloud-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customers/taiga-motors$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/if-you-havent-seen-onshape-in-the-last-6-months-read-this$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/how-are-companies-leveraging-the-power-of-onshape-configurations$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/stop-wasting-time-emailing-cad-files$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/onshape-now-offers-professional-grade-cad-training-for-free$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/edit-history-and-versioning$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/what-happens-during-a-modern-cad-crash$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/tech-tip-sharing-in-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/collaboration-simultaneous-editing$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/what-cad-experts-are-saying-about-design-data-management-2.0$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/tutorial-intro-assemblies-and-subassemblies$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/how-to-improve-on-traditional-cad-security-with-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/why-i-chose-an-engineering-career$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customers/scotrenewables$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/backward-compatibility-problems-belong-in-your-rear-view-mirror$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/author/neil-cooke$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/onshape-assemblies-for-solidworks-users-071018$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/merging-branches$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customers/zyci$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/avoiding-the-blue-screen-of-death-welcome-to-a-new-generation-of-cad-reliability$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/reflections-on-develop3d-live$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customers/carbon-black-global$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/browser-wars$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/creating-weldments-11-09-16$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/why-we-started-from-scratch-again-in-the-cad-business$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customers/greensight-agronomics$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/say-goodbye-to-cad-file-checkout-copies$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/happy-first-birthday-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customers/walkabout-mother-bins$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/why-i-love-engineering$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/partner-spotlight-how-to-use-simsolid-cloud-in-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/parametric-modeling-2.0-a-modern-approach-to-multi-part-design$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customers/luke$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/mit-uses-onshape-for-new-additive-manufacturing-course-for-engineers-and-executives$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/tech-tip-part-studios-vs.-assemblies$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/why-is-full-cloud-cad-such-a-big-deal-infographic$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/introducing-onshape-enterprise$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/onshape-is-the-perfect-cad-for-open-source$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customers/loxta$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/unfolding-onshape-sheet-metal$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/tech-tip-taking-advantage-of-onshapes-browser-based-tools$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/merging-branches-in-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customers/thinklabs$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/a-supermajority-of-companies-still-have-problems-locating-the-correct-version-of-design-data$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/enhancement-requests$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/3-examples-of-using-the-onshape-app$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/please-help-support-team-onshapes-ride-for-cancer-research$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/direct-editing$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customers/actronika$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customers/voxel-innovations$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/customers/perrinn$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/tech-tip-using-advanced-search-in-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/whats-new-in-onshapes-latest-update-1-2-18$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/introducing-design-data-management-2.0$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/how-taymer-international-creates-its-own-industry-specific-cad-features-for-machine-design/cad-blog/how-taymer-international-creates-its-own-industry-specific-cad-features-for-machine-design$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/using-mate-connectors$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/a-closer-look-at-onshape-enterprise-projects-role-based-access-control$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/coca-cola-uses-onshape-to-improve-beverage-equipment-at-14000-mcdonalds-restaurants$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/part-studios$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/videos/jon-hirschticks-new-generation-of-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-an-aviation-startup-chose-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/germain-racing-chooses-onshape-for-nascar-car-design$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/taymer-engineers-create-cad-features-for-design$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/hy5-designs-the-first-hydraulic-prosthetic-hand$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/how-onshape-helped-petrak-cut-design-time-by-weeks$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/how-onshape-streamlines-collaboration$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-voxel-innovates-with-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-philteds-chose-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-hydroworx-switched-from-solidworks-to-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/behind-the-scenes-of-cloud-cad-validation,-testing$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/smart-gun-engineering-to-save-lives$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/real-time-cad-deployment-expediting-agile-design$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/how-they-made-the-first-electric-skateboard$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/fighting-drought-in-california-with-cloud-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/what-built-in-pdm-and-analytics-mean-for-oil-gas$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/in-the-middle-of-nowhere-it&#x27;s-ok,-with-cloud-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/modern-cad-adaptable-to-your-needs$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/reclaim-lost-hours-with-comprehensive-edit-history$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/how-dodson-motorsport-eliminated-design-gridlock$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/how-farmbot-engineers-eliminated-design-gridlock$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/how-taiga-motors-eliminated-design-gridlock$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/how-universal-logic-ensures-accurate-machine-parts$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-nafco-designed-with-cloud-cad-from-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/how-zipaid-used-onshape-to-design-on-the-road$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-absolute-machinery-chose-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-bellaseno-chose-onshape-to-design-implants$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-ionq-chose-onshape-for-design$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-loxtra-hardware-chose-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/biotech-startup-bellaseno-chooses-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/bellaseno-chooses-onshape-for-designing-3d-printed-breast-implants$  to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from:  ^/en/resource-center/user-stories/trek-selects-onshapes-product-development-platform-to-drive-innovation$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: \\n        ^/en/resource-center/user-stories/baby-gear-manufacturer-philteds-chooses-onshape-for-consumer-product-design$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: \\n        ^/en/resource-center/user-stories/bmf-material-technology-teams-up-with-onshape-for-high-precision-manufacturing$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/case-study-template-draft$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: \\n        ^/en/resource-center/user-stories/fhe-engineers-design-safer-pressure-control-equipment-to-protect-oil-and-gas-workers$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/fhe$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/xing-mobility$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/oceangate$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/evts$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/bst-engineers-design-tough-drones-with-onshape?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/bst-engineers-design-tough-drones-with-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/how-onshape-helps-synapse-speed-up-product-design?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/why-you-want-to-fail-fast-in-product-design</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/how-onshape-helps-synapse-speed-up-product-design$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/why-you-want-to-fail-fast-in-product-design</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-formulatrix-chose-onshape?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-formulatrix-chose-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-loop-medical-chose-onshape?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-loop-medical-chose-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/actronika-uses-onshape-to-integrate-haptic-technology?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/resource-center/case-studies/actronika</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/actronika-uses-onshape-to-integrate-haptic-technology$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/resource-center/case-studies/actronika</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/hermeus-uses-onshape-for-hypersonic-jet-design?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/hermeus-uses-onshape-for-hypersonic-jet-design$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/xing-uses-onshape-for-electric-vehicle-design?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/xing-uses-onshape-for-electric-vehicle-design$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/remote-cad-you-wont-believe-what-you-can-build?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/remote-cad-you-wont-believe-what-you-can-build$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/3-traits-execs-value-most-in-a-mechanical-engineer?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/3-traits-execs-value-most-in-a-mechanical-engineer$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/mechanical-engineers-dont-worry-about-job-title?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/mechanical-engineers-dont-worry-about-job-title$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/purifying-water-in-panama-with-free-cloud-cad?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/purifying-water-in-panama-with-free-cloud-cad Not Equal Expected: /en/blog/train-the-next-generation-with-free-cloud-cad</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/purifying-water-in-panama-with-free-cloud-cad$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/purifying-water-in-panama-with-free-cloud-cad Not Equal Expected: /en/blog/train-the-next-generation-with-free-cloud-cad</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/reviving-the-worlds-first-hand-held-calculator?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/reviving-the-worlds-first-hand-held-calculator$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/how-to-design-furniture-with-custom-cad-features?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/how-to-design-furniture-with-custom-cad-features$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-auxiliary-design-school-chose-onshape?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/resource-center/case-studies/</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-auxiliary-design-school-chose-onshape$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/resource-center/case-studies/</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-gks-packaging-chose-onshape?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-gks-packaging-chose-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-viken-detection-chose-onshape?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-viken-detection-chose-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/students-choose-onshape-for-designing-prosthetics-onshape?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/students-choose-onshape-for-designing-prosthetics-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-silverside-detectors-chose-onshape?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-silverside-detectors-chose-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-greensight-agronomics-switched-to-onshape?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/why-greensight-agronomics-switched-to-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/aerospace-startup-attempts-hi-speed-space-internet?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/aerospace-startup-attempts-hi-speed-space-internet$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/how-engineer-nicholas-radzykewycz-created-an-emergency-prosthetic-horse-hoof-in-24-hours?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/how-engineer-nicholas-radzykewycz-created-an-emergency-prosthetic-horse-hoof-in-24-hours$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/formlabs-uses-onshape-cad-and-aws-to-shave-weeks-or-months-off-design-cycles?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/formlabs-uses-onshape-cad-and-aws-to-shave-weeks-or-months-off-design-cycles$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/how-cloud-cad-helps-cutsforth-keep-your-lights-on?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/how-cloud-cad-helps-cutsforth-keep-your-lights-on$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/120-cad-issues-no-one-wants-to-deal-with?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/120-cad-issues-no-one-wants-to-deal-with$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/14-things-you-need-in-a-pdm-system?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/14-things-you-need-in-a-pdm-system$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/every-day-is-backup-day?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/every-day-is-backup-day$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/cad-tech-support-has-never-been-easy-until-now?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/cad-tech-support-has-never-been-easy-until-now$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/calculating-cad-roi-onshape-vs-solidworks?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/calculating-cad-roi-onshape-vs-solidworks$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-do-pdm-systems-work?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-do-pdm-systems-work$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-onshape-makes-cad-crashes-extinct?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-onshape-makes-cad-crashes-extinct$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-create-and-modify-dwg-drawings?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-create-and-modify-dwg-drawings$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-medical-device-designers-maintain-compliance?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-medical-device-designers-maintain-compliance$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/protecting-your-cad-data-with-onshape?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/protecting-your-cad-data-with-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/looking-for-end-to-end-design-process-visibility?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/looking-for-end-to-end-design-process-visibility$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/prevent-cad-data-from-falling-into-the-wrong-hands?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/prevent-cad-data-from-falling-into-the-wrong-hands$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/improve-your-designs-aerodynamics-with-airshaper?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/improve-your-designs-aerodynamics-with-airshaper$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/go-from-cad-to-po-with-openbom?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/go-from-cad-to-po-with-openbom$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/expedite-onshape-workflows-with-creative-console?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/expedite-onshape-workflows-with-creative-console$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/saas-vs-on-premise-product-development-tools?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/saas-vs-on-premise-product-development-tools$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/think-you-cant-afford-pdm-think-again?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/think-you-cant-afford-pdm-think-again Not Equal Expected: /en/blog/built-in-pdm-software-essential-product-development</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/think-you-cant-afford-pdm-think-again$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/think-you-cant-afford-pdm-think-again Not Equal Expected: /en/blog/built-in-pdm-software-essential-product-development</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/2-strategies-for-moving-legacy-data-to-onshape?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/2-strategies-for-moving-legacy-data-to-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-does-onshape-really-work?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-does-onshape-really-work$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-onshape-delivers-safe-continuous-deployment?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-onshape-delivers-safe-continuous-deployment$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/are-your-product-designs-compliant?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/features/collaboration</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/are-your-product-designs-compliant$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/features/collaboration</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/what-is-plm-circa-2020s?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/what-is-plm-circa-2020s$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-cloud-cad-is-faster-than-desktop?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-cloud-cad-is-faster-than-desktop$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-does-3d-cad-need-pdm?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-does-3d-cad-need-pdm$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-forward-thinking-companies-choose-onshape?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/the-importance-of-data-management-in-the-cad-industry</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-forward-thinking-companies-choose-onshape$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/the-importance-of-data-management-in-the-cad-industry</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/committed-to-academic-research?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/committed-to-academic-research$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-onshapes-exploded-views-top-all-else-in-cad?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-onshapes-exploded-views-top-all-else-in-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-you-need-a-3d-mouse-for-3d-product-design?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-you-need-a-3d-mouse-for-3d-product-design$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/the-top-3-advantages-of-new-release-management?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/features/workflow</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/the-top-3-advantages-of-new-release-management$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/features/workflow</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/4-reasons-onshape-design-teams-work-faster?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/4-reasons-onshape-design-teams-work-faster Not Equal Expected: /en/blog/how-cloud-cad-improves-collaboration-with-your-extended-internal-product-design-team</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/4-reasons-onshape-design-teams-work-faster$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/4-reasons-onshape-design-teams-work-faster Not Equal Expected: /en/blog/how-cloud-cad-improves-collaboration-with-your-extended-internal-product-design-team</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/4-signs-youre-overpaying-for-your-cad-system?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/4-signs-youre-overpaying-for-your-cad-system Not Equal Expected: /en/blog/cad-shopping-heres-how-to-uncover-hidden-costs</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/4-signs-youre-overpaying-for-your-cad-system$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/4-signs-youre-overpaying-for-your-cad-system Not Equal Expected: /en/blog/cad-shopping-heres-how-to-uncover-hidden-costs</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/4-signs-you-could-use-cad-custom-features?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/4-signs-you-could-use-cad-custom-features$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/5-reasons-to-to-visit-the-onshape-learning-center?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/5-reasons-to-to-visit-the-onshape-learning-center$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/6-reasons-to-use-the-learning-center?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/6-reasons-to-use-the-learning-center$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/6-ways-cloud-cad-can-accelerate-your-success?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/the-importance-of-data-management-in-the-cad-industry</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/6-ways-cloud-cad-can-accelerate-your-success$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/the-importance-of-data-management-in-the-cad-industry</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/7-cloud-cad-features-you-wont-find-on-desktop?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/7-cloud-cad-features-you-wont-find-on-desktop Not Equal Expected: /en/blog/cloud-native-vs-cloud-storage-cad-platforms</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/7-cloud-cad-features-you-wont-find-on-desktop$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/7-cloud-cad-features-you-wont-find-on-desktop Not Equal Expected: /en/blog/cloud-native-vs-cloud-storage-cad-platforms</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/7-ways-onshape-better-protects-your-cad-data?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/7-ways-onshape-better-protects-your-cad-data$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/leveraging-the-full-power-of-modern-cad?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/leveraging-the-full-power-of-modern-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-cloud-cad-helps-solve-problems-in-space?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-cloud-cad-helps-solve-problems-in-space$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/ipad-cad-enhance-productivity-and-creativity?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/ipad-cad-enhance-productivity-and-creativity$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/investing-in-a-cad-career-try-the-education-plan?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/investing-in-a-cad-career-try-the-education-plan$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/cloud-cad-from-anywhere-on-any-device?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/cloud-cad-from-anywhere-on-any-device$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-makers-should-be-using-pro-3d-cad-software?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-makers-should-be-using-pro-3d-cad-software$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-optimize-cad-collaboration-and-compliance?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/features/collaboration</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-optimize-cad-collaboration-and-compliance$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/features/collaboration</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/the-dos-and-donts-of-comparing-cad-systems?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/the-dos-and-donts-of-comparing-cad-systems$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-adapt-to-new-engineering-work-environments?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/engineering-career-path-advice</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-adapt-to-new-engineering-work-environments$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/engineering-career-path-advice</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/4-ways-to-lose-cad-files-and-how-to-prevent-it?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/4-ways-to-lose-cad-files-and-how-to-prevent-it$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/parallelization-now-in-cloud-cad?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/why-cloud-cad-is-faster-than-desktop</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/parallelization-now-in-cloud-cad$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/why-cloud-cad-is-faster-than-desktop</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/what-your-old-cad-vendor-wont-tell-you?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/what-your-old-cad-vendor-wont-tell-you$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/design-custom-products-with-onshape-configurations?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/design-custom-products-with-onshape-configurations$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/want-to-master-cloud-cad-heres-how?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/want-to-master-cloud-cad-heres-how Not Equal Expected: /en/blog/4-things-to-know-before-adopting-cloud-native-cad</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/want-to-master-cloud-cad-heres-how$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/want-to-master-cloud-cad-heres-how Not Equal Expected: /en/blog/4-things-to-know-before-adopting-cloud-native-cad</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/the-importance-of-aesthetics-to-consumer-products?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/the-importance-of-aesthetics-to-consumer-products$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-assess-your-models-for-structural-weakness?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-assess-your-models-for-structural-weakness$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-avoid-a-consumer-product-design-failure?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-avoid-a-consumer-product-design-failure$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-choose-the-right-cad-plan-for-your-business?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-choose-the-right-cad-plan-for-your-business$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-streamline-your-transition-from-solidworks?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-streamline-your-transition-from-solidworks$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/7-traits-of-the-perfect-cad-pilot-project?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/how-to-onboard-your-first-robotics-team</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/7-traits-of-the-perfect-cad-pilot-project$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/how-to-onboard-your-first-robotics-team</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-onboard-your-first-robotics-team?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-onboard-your-first-robotics-team$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/teachers-how-to-set-up-your-onshape-classroom?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/teachers-how-to-set-up-your-onshape-classroom$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-render-photorealistic-images-like-ikea?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-render-photorealistic-images-like-ikea$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-you-need-onshape-education-enterprise?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-you-need-onshape-education-enterprise$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/product-design-and-engineering-from-your-phone?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/under-the-hood-cad-for-mobile</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/product-design-and-engineering-from-your-phone$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/under-the-hood-cad-for-mobile</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/make-beautiful-music-with-a-3d-printed-violin?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/make-beautiful-music-with-a-3d-printed-violin$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/all-the-reasons-cad-users-are-moving-to-the-cloud.html?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/all-the-reasons-cad-users-are-moving-to-the-cloud.html$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-fix-the-world-with-cloud-cad?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-fix-the-world-with-cloud-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-use-cloud-cad-to-teach-high-school-stem?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-use-cloud-cad-to-teach-high-school-stem$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/ipad-and-iphone-designed-for-cloud-cad-on-the-go?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/ipad-and-iphone-designed-for-cloud-cad-on-the-go$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/the-5-best-custom-feature-hacks-of-2019?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/the-5-best-custom-feature-hacks-of-2019$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/rethinking-sheet-metal-for-more-flexibility?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/rethinking-sheet-metal-for-more-flexibility$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/a-modern-approach-to-parametic-modeling?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/a-modern-approach-to-parametic-modeling$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/a-modern-approach-to-sheet-metal-design?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/a-modern-approach-to-sheet-metal-design$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/a-modern-approach-to-standard-content?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/a-modern-approach-to-standard-content$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/tackling-tight-deadines-with-shared-designs?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/onshapes-best-design-and-development-features-for-q3-2021</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/tackling-tight-deadines-with-shared-designs$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/onshapes-best-design-and-development-features-for-q3-2021</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-expedite-furniture-design-with-cloud-cad?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-expedite-furniture-design-with-cloud-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-expedite-your-time-to-market?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/consumer-product-design-can-reduce-time-to-market</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-expedite-your-time-to-market$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/consumer-product-design-can-reduce-time-to-market</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/the-biggest-pains-of-traditional-cad?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/why-we-started-from-scratch-in-the-cad-business</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/the-biggest-pains-of-traditional-cad$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/why-we-started-from-scratch-in-the-cad-business</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/under-the-hood-how-collaboration-works?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/under-the-hood-how-collaboration-works$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/under-the-hood-cad-performance?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/under-the-hood-cad-performance$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/under-the-hood-cad-for-mobile?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/under-the-hood-cad-for-mobile$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/under-the-hood-onshape-sketches?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/under-the-hood-onshape-sketches$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/using-cad-as-a-sales-presentation-tool?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/using-cad-as-a-sales-presentation-tool$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/using-onshape-to-boost-your-career?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/using-onshape-to-boost-your-career$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/want-to-start-an-onshape-user-group?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/user-group-network/</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/want-to-start-an-onshape-user-group$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/user-group-network/</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/whats-is-generative-design?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/whats-is-generative-design$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/what-is-onshape-bootcamp?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/what-is-onshape-bootcamp$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/whats-it-like-teaching-onshape?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/whats-it-like-teaching-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-become-a-cad-power-user?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/cad-users-are-you-frustrated-by-inadequate-tech-support</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-become-a-cad-power-user$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/cad-users-are-you-frustrated-by-inadequate-tech-support</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/increase-productivity-on-the-manufacturing-floor?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/new-era-pdm-proper-design-manufacturing</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/increase-productivity-on-the-manufacturing-floor$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/new-era-pdm-proper-design-manufacturing</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/work-life-balance-and-remote-workers?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/13-remote-work-tips-from-lead-engineers</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/work-life-balance-and-remote-workers$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/13-remote-work-tips-from-lead-engineers</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/introducing-categories-in-onshape?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/introducing-categories-in-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: \\n        ^/en/resource-center/articles/why-some-of-michigans-most-competitive-engineering-courses-switched-to-onshape?(.*)$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-some-of-michigans-most-competitive-engineering-courses-switched-to-onshape$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/train-the-next-generation-with-free-cloud-cad?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/train-the-next-generation-with-free-cloud-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-install-onshape?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-install-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/onshape-takes-the-lead-on-top-down-design?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/onshape-takes-the-lead-on-top-down-design$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/6-challenges-in-machine-design-part-1?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/6-challenges-in-machine-design-part-1$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/the-top-5-reasons-to-add-cae-to-your-cad?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/the-top-5-reasons-to-add-cae-to-your-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/overcome-the-6-biggest-machine-design-challenges?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/overcome-the-6-biggest-machine-design-challenges$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/seamlessly-integrate-onshape-and-sap-with-cideon?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/seamlessly-integrate-onshape-and-sap-with-cideon$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/optimizing-cad-with-real-time-built-in-pdm?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/optimizing-cad-with-real-time-built-in-pdm$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/perform-finite-element-analysis-on-the-cloud?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/perform-finite-element-analysis-on-the-cloud$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: \\n        ^/en/resource-center/articles/onshape-partner-spotlight-electra-cloud-is-the-only-electrical-schematic-software-you-can-access-anywhere?(.*)$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: \\n        ^/en/resource-center/articles/onshape-partner-spotlight-electra-cloud-is-the-only-electrical-schematic-software-you-can-access-anywhere$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-hardware-startups-should-use-cloud-cad?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-hardware-startups-should-use-cloud-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/onshape-partner-spotlight-duro-cloud-plm-for-distributed-hardware-teams?(.*)$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/onshape-partner-spotlight-duro-cloud-plm-for-distributed-hardware-teams$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-onshape-has-fundamentally-improved-parametric-cad?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-onshape-has-fundamentally-improved-parametric-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: \\n        ^/en/resource-center/articles/onshape-partner-spotlight-boosting-productivity-with-oneipms-integrated-project-management?(.*)$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: \\n        ^/en/resource-center/articles/onshape-partner-spotlight-boosting-productivity-with-oneipms-integrated-project-management$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: \\n        ^/en/resource-center/articles/onshape-partner-spotlight-onscales-cloud-simulation-tools-deliver-supercomputer-speed-and-power?(.*)$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: \\n        ^/en/resource-center/articles/onshape-partner-spotlight-onscales-cloud-simulation-tools-deliver-supercomputer-speed-and-power$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: \\n        ^/en/resource-center/articles/onshape-partner-spotlight-cadasio-helps-bring-your-products-technical-documentation-to-the-next-level?(.*)$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: \\n        ^/en/resource-center/articles/onshape-partner-spotlight-cadasio-helps-bring-your-products-technical-documentation-to-the-next-level$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/what-are-onshape-application-extensions?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/what-are-onshape-application-extensions$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: \\n        ^/en/resource-center/articles/15-tips-your-students-should-know-before-taking-the-certified-onshape-associate-exam?(.*)$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: \\n        ^/en/resource-center/articles/15-tips-your-students-should-know-before-taking-the-certified-onshape-associate-exam$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/onshape-partner-spotlight-improve-your-freeform-product-designs-with-phi?(.*)$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/onshape-partner-spotlight-improve-your-freeform-product-designs-with-phi$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/whats-new-in-the-onshape-app-store-spring-2021?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/whats-new-in-the-onshape-app-store-spring-2021$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/cad-blog/how-to-buy-the-best-cad-system-for-your-product-development-team?(.*)$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/cad-blog/how-to-buy-the-best-cad-system-for-your-product-development-team$\\n     to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/6-ways-to-improve-your-design-collaboration-with-cad?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/6-ways-to-improve-your-design-collaboration-with-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/would-you-be-fed-up-with-19-cad-crashes-in-a-day?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/would-you-be-fed-up-with-19-cad-crashes-in-a-day$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/what-makes-a-parametric-modeler-tick?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/what-makes-a-parametric-modeler-tick$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/purifying-water-in-panama-with-free-cloud-cad to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/purifying-water-in-panama-with-free-cloud-cad Not Equal Expected: /en/blog/train-the-next-generation-with-free-cloud-cad</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/why-product-development-teams-are-adopting-saas to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/parallelization-now-in-cloud-cad to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/why-cloud-cad-is-faster-than-desktop</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/what-is-the-state-of-product-development-and-hardware-design-in-2021 to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/what-is-the-state-of-product-development-and-hardware-design-in-2020 to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-cloud-cad-improves-supplier-communications to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/the-importance-of-data-management-in-the-cad-industry</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/remote-work-redefining-the-workplace-and-product-development to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/4-reasons-onshape-design-teams-work-faster to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/4-reasons-onshape-design-teams-work-faster Not Equal Expected: /en/blog/how-cloud-cad-improves-collaboration-with-your-extended-internal-product-design-team</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/improve-team-communication-with-onshapes-cloud-sharing-features to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/actronika-uses-onshape-to-integrate-haptic-technology to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/resource-center/case-studies/actronika</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/the-key-to-product-development-collaboration to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/why-you-need-real-time-pdm-to-optimize-cad to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/5-reasons-to-to-visit-the-onshape-learning-center to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/preventing-product-design-bottlenecks-which-version-is-the-latest-version-of-a-cad-file to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-engineering-teams-are-improving-collaboration-with-external-vendors-and-manufacturing-partners to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-to-adapt-to-new-engineering-work-environments to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/engineering-career-path-advice</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/6-reasons-to-use-the-learning-center to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/improving-business-agility-with-cloud-native-cad to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/tackling-tight-deadines-with-shared-designs to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/onshapes-best-design-and-development-features-for-q3-2021</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-executives-and-frontline-engineers-view-their-teams-strengths-and-weaknesses-differently to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-to-overcome-hardware-designs-biggest-obstacle to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-cloud-cad-helps-maintain-business-continunity to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/product-innovation-thomas-edison-and-sweating-less-with-the-cloud to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-do-companies-rate-their-own-productivity-and-innovation to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/innovation-for-good-why-game-changing-product-developers-rely-on-onshapes-cloud-cad to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/some-early-new-years-product-development-resolutions-for-2021 to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/think-you-cant-afford-pdm-think-again to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/think-you-cant-afford-pdm-think-again Not Equal Expected: /en/blog/built-in-pdm-software-essential-product-development</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/why-collaboration-is-easier-with-cloud-based-tools to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/why-automatic-upgrades-are-such-a-big-deal to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/why-onshape-is-a-top-place-to-work to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/why-auxiliary-design-school-chose-onshape to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/resource-center/case-studies/</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/full-visibility-into-the-product-design-process to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/product-design-and-engineering-from-your-phone to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/under-the-hood-cad-for-mobile</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-to-become-a-cad-power-user to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/cad-users-are-you-frustrated-by-inadequate-tech-support</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/why-tech-leaders-develop-products-in-the-cloud to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/why-real-time-cad-deployment-is-essential to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-cloud-native-cad-promotes-agility-for-product-design-teams to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/work-life-balance-and-remote-workers to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/13-remote-work-tips-from-lead-engineers</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-collaboration-and-agility-lead-to-innovation to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-onshape-helps-synapse-speed-up-product-design to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/why-you-want-to-fail-fast-in-product-design</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/3-business-questions-to-consider-when-choosing-cad-software to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/whats-more-important-design-processes-or-cad to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/the-top-3-advantages-of-new-release-management to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/features/workflow</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/want-to-start-an-onshape-user-group to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/user-group-network/</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/cloud-native-cad-provides-peace-of-mind-for-engineer to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/the-biggest-pains-of-traditional-cad to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/why-we-started-from-scratch-in-the-cad-business</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/change-or-die-why-cads-slow-to-embrace-the-cloud to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-to-expedite-your-time-to-market to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/consumer-product-design-can-reduce-time-to-market</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/14-reasons-top-manufacturers-use-cloud-cad to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-to-use-cloud-cad-to-accelerate-sales to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-cloud-cad-provides-a-competitive-edge to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/4-signs-youre-overpaying-for-your-cad-system to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/4-signs-youre-overpaying-for-your-cad-system Not Equal Expected: /en/blog/cad-shopping-heres-how-to-uncover-hidden-costs</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-to-use-cloud-cad-to-enhance-your-marketing to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/making-it-work-integrated-pdm-with-cloud-native-cad to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-to-use-cloud-cad-to-maximize-customer-input to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/the-importance-of-data-management-in-the-cad-industry</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/what-your-digital-transformation-strategy-needs to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-to-optimize-cad-collaboration-and-compliance to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/features/collaboration</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/does-your-product-development-team-have-trouble-accessing-your-design-data-when-you-need-it to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/6-ways-cloud-cad-can-accelerate-your-success to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/the-importance-of-data-management-in-the-cad-industry</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/improving-remote-access-and-flexibility-the-new-reality-of-remote-work to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/want-to-master-cloud-cad-heres-how to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/want-to-master-cloud-cad-heres-how Not Equal Expected: /en/blog/4-things-to-know-before-adopting-cloud-native-cad</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/7-traits-of-the-perfect-cad-pilot-project to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/how-to-onboard-your-first-robotics-team</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/what-were-talking-about-2022-trends-customer-success-virtual-events to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/how-the-right-collaboration-tools-can-make-2022-a-productive-year to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/7-cloud-cad-features-you-wont-find-on-desktop to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/7-cloud-cad-features-you-wont-find-on-desktop Not Equal Expected: /en/blog/cloud-native-vs-cloud-storage-cad-platforms</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/cad-software-incompatibility to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/why-forward-thinking-companies-choose-onshape to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/the-importance-of-data-management-in-the-cad-industry</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/5-additive-manufacturing-trends-in-2017 to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/using-real-time-metrics-to-manage-your-design to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/product-designers-and-engineers-on-covid-19 to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/a-year-in-review-onshape-user-group-meetings to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/the-top-real-time-collaboration-tools-for-engineers-that-transform-product-development-part-2 to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/increase-productivity-on-the-manufacturing-floor to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/blog/new-era-pdm-proper-design-manufacturing</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/early-team-communication-vital-to-product-innovation to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/what-were-talking-about-manufacturing-render-studio-agile-method to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/2-keys-to-accelerate-product-development to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/agile-development-time-for-engineers-to-catch-up to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/are-your-product-designs-compliant to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/blog/ Not Equal Expected: /en/features/collaboration</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/cloud-design-collaboration-tools-for-your-core-product-engineering-team to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: /en/blog/can-industrial-design-be-beautiful to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/9-absolutely-petrifying-things-about-traditional-cad-software$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/how-to-choose-the-right-cad-plan-for-your-business$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/how-product-development-teams-can-overcome-pdm-administrative-headaches$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/how-product-development-teams-are-improving-cad-file-collaboration$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/growing-your-business-with-cloud-native-product-development$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/cad-data-management-making-product-designs-more-accessible-in-the-new-normal$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/dont-pave-over-the-cow-path-rethinking-how-product-development-teams-approach-data-management$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/optimizing-cad-with-real-time-built-in-pdm$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/how-do-pdm-systems-work$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/why-does-3d-cad-need-pdm$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/introduction-to-onshape-for-design-professionals-webinar$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-session-transform-design-and-lifecycle-management-with-cloud-connected-cad-pdm-and-plm-102623$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/transform-design-and-lifecycle-management-with-cloud-connected-cad-pdm-and-plm-102523$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/quarterly-onshape-review-learn-whats-new-101723$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-quarterly-onshape-review-learn-whats-new-101823$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-helping-hardware-startups-grow-faster$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/efficiency-redefined-agile-design-and-lifecycle-management-with-onshape-cad-and-arena-plm-091423$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/introduction-to-onshape-for-design-professionals-091323$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-introduction-to-onshape-for-design-professionals-091423$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/3d-cad-free-trial-ad-plasma?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/3d-cad-free-trial-ad-plasma$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/professional-trial-fastlane?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/professional-trial-fastlane$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/introduction-to-onshape-for-professionals-081723$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/trial$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/quarterly-onshape-review-learn-whats-new-062723$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-quarterly-onshape-review-learn-whats-new-062923$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/intro-to-onshape-062223$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/case-studies/oceangate$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos/onshape-customer-story-oceangate$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/lp/oceangate-nam-makers-series-2021$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/oceangate-customer-video$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/5-reasons-why-desktop-cad-users-dont-renew-their-subscriptions-060123$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-5-reasons-why-desktop-cad-users-dont-renew-their-subscriptions-060623$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/enterprise$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/onshape-enterprise$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/enterprise$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/solidworks-data-migration/customer-stories$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/solidworks-data-migration/contact-sales$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/breaking-all-the-rules-of-cad-pdm-032923$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-breaking-all-the-rules-of-cad-pdm-033023$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-session-quarterly-onshape-review-learn-whats-new-032923$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/quarterly-onshape-review-learn-whats-new-032823$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/education/educator-awards/$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/education/educator-awards/ Not Equal Expected: /en/education/educator-awards/educator-awards-2023</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/education/educator-awards$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/education$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/edu$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/lp/3d-cad-free-trial-ad-model$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/nl/programs/entrepreneur$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/how-safe-is-your-cad-data$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/petrak-industries-onshapes-sharing-feature-saved-a-major-client-5-weeks-in-design-time$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/education/design-challenges$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/solidworks-data-migration$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-fraunhofer$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/resource-center/videos/onshape-webcast-lernen-sie-wie-eine-cloud-native-cad-software-ihren-design-prozess-verbessert Not Equal Expected: /en/resource-center/events/</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-witted-en?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-witted-en$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/press-release/sheet-metal$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/press-release/hermeus-chooses-onshape-for-hypersonic-jet-design$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/press-release/2019-april-03-press-release-onshape-q1-product-updates$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/navigating-design-projects-in-a-multi-cad-world$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^https://www.onshape.com/cad-blog/why-is-full-cloud-cad-such-a-big-deal-infographic  Redirects to Resource Center  redirect to$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/free?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/free$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/nature-recovery-robots/$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/education/research-symposium/$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/education/teaching-symposium/$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/simulation$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/assets/first-robotics/onshapeforfirstteams.pdf$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/enterprise-cad-software$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/onshape-arena$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/education/educators?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/education/educators$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/education/programs-and-partners?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/education/programs-and-partners$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/education/programs-and-partners/first?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/education/robotics Not Equal Expected: /en/education/</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/education/programs-and-partners/first$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/internal-lead-referral-form$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/how-an-emergency-ventilator-was-built-in-21-days$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-vectoflow-measurement-solutions?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-vectoflow-measurement-solutions$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-vectoflow-de?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-vectoflow-de$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/hubfs/academic/curriculum-resources/glasses-editing-final.html$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/hubfs/academic/curriculum-resources/molecule-assembly.html$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/hubfs/academic/curriculum-resources/gyrosphere-modeling-final.html$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/onshape-frames-fast-efficient-structural-framing-in-the-onshape-platform-031622?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/onshape-frames-fast-efficient-structural-framing-in-the-onshape-platform-031622$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/tech-tips/using-superlearners-algorithm-app-to-optimize-parts?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/tech-tips/using-superlearners-algorithm-app-to-optimize-parts$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/render-studio-photo-realistic-rendering-in-the-onshape-platform-021022?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/render-studio-photo-realistic-rendering-in-the-onshape-platform-021022$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/live$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/user-stories/$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/freetrial?(.*)$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /lp/3d-cad-free-trial-ad Not Equal Expected: /en/products/free</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/freetrial$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/tutorial/test-content-tutorial-1b$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/design-teams-overcome-blocked-collaboration$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/innovation-blog/what-is-design-gridlock-costing-your-company$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/cad-data-management-advancing-product-design-in-2022-012622?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/cad-data-management-advancing-product-design-in-2022-012622$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-conquer-old-cad-version-control-problems$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-solve-cad-software-administration-issues$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/instant-cad-access-anywhere-anytime$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-overcome-cad-crashes-and-file-corruption$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/say-goodbye-to-low-quality-customer-support$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/6-ways-to-boost-engineering-productivity-102721?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/6-ways-to-boost-engineering-productivity-102721$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/9-very-scary-things-about-old-cad-technology$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/14-things-you-need-in-a-pdm-system-part-2-of-2$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/14-things-you-need-in-a-pdm-system-part-1-of-2$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/get-started$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-first-robotics-teams-embrace-cloud-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/modern-cad-why-leading-firms-are-making-the-switch-081921?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/modern-cad-why-leading-firms-are-making-the-switch-081921$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/educators$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/features/data-management$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/improving-cad-collaboration?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/improving-cad-collaboration$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/3-ways-to-improve-your-cad-collaboration?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/3-ways-to-improve-your-cad-collaboration$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/innovation-blog/the-difference-between-cad-files-and-databases?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/innovation-blog/the-difference-between-cad-files-and-databases$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/the-difference-between-files-and-databases-and-what-it-means-for-cad-and-product-design$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-buy-the-best-cad-system-for-your-engineers?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-buy-the-best-cad-system-for-your-engineers$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/features/data-management$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/privacy-policy$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/ebooks/buyers-guide-to-modern-cad?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/ebooks/buyers-guide-to-modern-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/ebooks/the-buyers-guide-to-modern-cad-systems?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/ebooks/the-buyers-guide-to-modern-cad-systems$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/innovation-blog/the-importance-of-cad-data-management?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/innovation-blog/the-importance-of-cad-data-management$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/5-best-practices-for-highly-effective-pdm-users-on-the-cloud-062421?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/5-best-practices-for-highly-effective-pdm-users-on-the-cloud-062421$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/the-importance-of-cad-data-management?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/the-importance-of-cad-data-management$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/covid-19-support$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/webinars/$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/cad-blog/topic/tech-tips$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/how-elite-engineering-teams-are-solving-todays-collaboration-problems-040721?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/how-elite-engineering-teams-are-solving-todays-collaboration-problems-040721$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/onshape-year-in-review-sketches-parts-assemblies-drawings-010621$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/augmented-reality-for-cad-fanatics-022421?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/augmented-reality-for-cad-fanatics-022421$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/learn-how-dhl-drives-change-from-the-digital-to-the-physical-world-in-the-design-process-with-onshape-022421$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/openbom-saas-plm-for-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-onshape-has-fundamentally-improved-parametric-cad?(.*)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/privacy-center/gdpr$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/solving-the-top-5-pdm-data-management-problems-102920$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/webinars/categorizing-onshape-properties-10222020$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/edu/frc$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/features/custom-features$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/ebooks-and-whitepapers$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/learn/webinars$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/fast-interactive-photorealistic-rendering$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/resources/events$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/platform$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/professional-trial$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/features/analytics$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/features/collaboration$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/features/drawings$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/features/workflow$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/features/parts$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/features/assemblies$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/features/bill-of-materials$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/features/integrations$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/features/configurations$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/features/support$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/features/security$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/legal$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/legal/terms-of-use$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/legal/trademarks$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/legal/updates$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/demo-request$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/privacy-center$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/changelog$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/changelog/$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/mobile/welcome$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/article$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/automate-design-post-processing-with-visualcamc$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/fast,-interactive-photorealistic-rendering$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-perform-indexed-5-axis-machining$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/how-to-use-onshape-part-configurations$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/instant-cad-access-anywhere,-anytime$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/take-a-magic-leap-with-this-onshape-integration$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/the-power-of-integrated-cad-plm$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/what&#x27;s-it-like-teaching-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/articles/why-creating-a-bom-with-cloud-cad-is-so-easy$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/case-studies/ab-test$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/case-studies/button-test$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/case-studies/case-study-test-one$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/case-studies/destination-titanic-oceangate-designs-carbon-fiber-subs-for-adventure-travel1$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/case-studies/hy5$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/case-studies/test$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/ebooks/cloud-based-cad-helps-companies-implement-agile-methods$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/ebooks/hekate-test-progressive-profiling-default-content-the-state$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/ebooks/hekate-test-progressive-profiling-the-state-of-product-development-hardware-design-2020$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/ebooks/the-buyer&#x27;s-guide-to-modern-cad-systems$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/ebooks/the-buyer&#x27;s-guide-to-modern-cad-systems-download$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/ebooks/the-engineering-leader&#x2019;s-guide-to-data-management-download$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/ebooks/the-engineering-leader&#x2019;s-guide-to-data-management-test$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/_jason-test$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/10-technical-questions-when-moving-from-solidworks-to-onshape-answered-012722$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-cadasio-en$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-renderstudio-de$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-renderstudio-en$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-renderstudio-fr$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-renderstudio-it$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/israel-june$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-avidbots$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-dhl$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-fraunhofer-iem$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-de-roboter-isento-pib$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-isento-pib-robot$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-prioritizing-agility$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-renderstudio$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-prioritizingagility$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-witted-it$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/2023q1-ostechmeetup-frankfurt$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/2023q1-ostechmeetup-london$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-simulation-de$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar-simulation-fr$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/2023q2-ostechmeetup-boston$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/2023q2-ostechmeetup-paris$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/2023q3-student-user-group$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/2023q3-user-group-for-start-ups$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/2023q3-ostechmeetup-burlington$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/2023q3-ostechmeetup-hannover$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/4-reasons-to-consider-cloud-native-product-design-tools-120821$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/5-best-practices-for-highly-effective-pdm-users-on-the-cloud-080521$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/5-reasons-why-desktop-cad-users-don&#x2019;t-renew-their-subscriptions-060123$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/5-things-engineers-must-try-with-the-xometry-onshape-app-042022$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/achieving-faster-performance-with-large,-complex-assemblies-032422$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/achieving-faster-performance-with-large,-complex-assemblies-081122$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/add-freeform-surfaces-to-your-designs-with-phi-062321$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/augmented-reality-for-cad-fanatics-old$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/back-to-school-cad-resources-for-teaching-onshape-083023$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/bringing-cad-to-your-robotics-team-091322$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/index$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/cad-projects-for-your-stem-classroom-022123$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/cad-resources-for-your-classroom-083022$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/categorizing-onshape-properties-102220$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-ben-mollica$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-(jessie-hug)$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-joe-kondroski$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-justin-davis$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-ryan-radford$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/coffee-with-jess-04-20-21$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/coffee-with-onshape-branching-and-merging-032521$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/coffee-with-onshape-collaboration-022521$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/coffee-with-onshape-configurations-040821$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/coffee-with-onshape-enterprise-031121$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/coffee-with-onshape-multi-body-part-design-042221$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/coffee-with-onshape-release-management-021121$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/collaborate-with-cad-using-onshape-in-first-120221$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/de-cad-pdm-starten,-einloggen,-arbeiten$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/cad-ist-nicht-genug-die-zukunft-der-produktentwicklung-060821$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/datensicherheit-im-produktentwicklungsprozess-durch-saas$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/warum-unternehmen-von-solidworks-zu-onshape-wechseln$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/scewo-webinar$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/old_url$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/design-your-vex-robot-in-the-cloud-using-onshape-040522$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/designing-and-3d-printing-robotic-end-of-arm-tools-111721$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/designing-for-digital-fabrication-in-onshape-052422$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/designing-for-science-olympiad-events-with-onshape-011723$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/digging-deeper-into-onshape-for-education-092823$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/driving-alignment-with-high-performing-product-teams-a-panel-discussion$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/driving-alignment-with-high-performing-product-teams-a-panel-discussion-101520$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-session-quarterly-onshape-review-learn-what&#x2019;s-new-032923$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-session-transform-design-and-lifecycle-management-with-cloud-connected-cad,-pdm-and-plm-102623$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-5-reasons-why-desktop-cad-users-don&#x2019;t-renew-their-subscriptions-060623$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-how-command-tooling-systems-created-an-agile-design-process-with-built-in-pdm-020923$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-introducing-onshape-simulation-102722$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-introducing-onshape-simulation-110322$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-introducing-onshape&#x2019;s-native-connection-to-arena-plm-100622$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-onshape&#x2019;s-top-10-most-exciting-features-in-2022-113022$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-quarterly-onshape-review-learn-what&#x2019;s-new-062923$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-quarterly-onshape-review-learn-what&#x2019;s-new-101823$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/switching-from-soliworks-to-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/engineering-design,-simulation,-and-optimization-in-the-cloud-111721$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/pasando-de-solidworks-a-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/explore-onshape-fundamentals-hands-on-test-drive-103123$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/pourquoi-les-entreprises-basculent-de-solidworks-a-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events-at-amazon-lunch-and-learn-ryan-radford$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-ben-mollica-030921$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-james-french-031121$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-jessie-hug-032321$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-joe-kondroski-031021$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/cocktails-with-onshape-a-virtual-happy-hour-ryan-radford-030421$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/getting-the-most-out-of-your-onshape-education-enterprise-012423$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/happy-hour-with-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/hone-your-onshape-skills-with-the-cad-challenges-app-041823$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/how-and-why-to-make-the-switch-to-onshape-for-your-cad-curriculum-080521$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/how-command-tooling-systems-created-an-agile-design-process-with-built-in-pdm-020823$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/how-dhl-drives-change-in-their-design-process-with-onshape-071422$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/how-elite-engineering-teams-are-solving-today&#x2019;s-collaboration-problems-040721$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/how-engineering-teams-can-drive-product-innovation-with-onshape-a-technical-discussion-111820$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/how-exxentric-designs-its-popular-flywheel-training-products-with-onshape-070121$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/how-industrial-manufacturing-companies-build-agility-into-the-design-process$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/how-norden-mfg-built-a-faster,-more-efficient-machine-design-process-051122$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/qdot-net-zero$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/how-to-bring-simulation-into-your-design-engineering-curriculum-072021$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/how-to-create-and-use-onshape-custom-features-for-education-071922$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/how-to-prepare-students-for-the-onshape-associate-certification-042822$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/how-to-set-your-first-season-up-for-success-with-onshape-102121$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/how-to-use-onshape-like-a-pro-in-your-classroom-081921$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/international-design-conference$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/introducing-onshape-simulation-102622$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/introducing-onshape-simulation-110222$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/introducing-onshape&#x2019;s-native-connection-to-arena-plm-100522$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/intro-to-onshape-for-design-pros-110723$ to</h1>\\n          <dl>\\n            <dt class=\\\"error\\\">Get valid status code 200, 301, 302 or 404</dt>\\n            <dt class=\\\"error\\\">/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd class=\\\"error\\\"><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n            <dd class=\\\"error\\\">Error: Actual: /en/resource-center/events/ Not Equal Expected: /en/resource-center/</dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/perche-le-aziende-stanno-passando-da-solidworks-a-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/jess-test-first-party-cookies$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/jess-test$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/learn-how-avidbots-drives-design-collaboration-and-productivity-with-onshape-051921$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/emea-learn-how-avidbots-drives-design-collaboration-and-productivity-with-onshape-052021$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/learn-how-dhl-drives-change-from-the-digital-to-the-physical-world-in-the-design-process-with-onshape-110420$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/leveraging-cad-in-the-hyper-personalized-world-of-consumer-goods-081022$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/liveworx-23$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/make-the-switch-to-onshape-for-collegiate-racing-and-design-teams-102522$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/make48-indianapolis$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/make48-nationals-2023$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/make48-tbd$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/makerbot-cloud-based-design-for-3d-printing-medical-devices-060921$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/making-the-switch-from-autodesk-fusion-360-to-onshape-for-education-111621$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/making-the-switch-to-onshape-for-education-040821$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/massrobotics-robosource$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/maxmind-fields-test$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/next-gen-cloud-simulation-changes-the-game-for-design-engineers-093021$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/no-pain,-all-gain-with-cloud-cad-and-cae-an-onscale-onshape-webinar-111920$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/nordic-ev-summit-2023$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/nvidia-gtc-conference$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/nvidia&#x27;s-gtc-conference-training$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/taking-stem-projects-beyond-the-classroom-061721$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/onscale-cloud-cfd-a-game-changer-for-fluid-dynamics-engineers-051321$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events-essential-tips-all-about-versions-071521$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events-essential-tips-using-documents-effectively-041521$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events-frames-fast,-efficient-structural-framing-in-the-onshape-platform-031622$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events-in-engineering-bydesign-with-iteea-110921$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events-insights-understanding-student-learning-with-analytics-120821$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events-live$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events-live-&#x27;23$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/2023q4-ostechmeetup-amsterdam$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events-year-in-review-sheet-metal,-surfacing-configurations-012021$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events-year-in-review-sketches,-parts,-assemblies-drawings-010621$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events&#x2019;s-top-10-most-exciting-features-in-2022-112922$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events&#x27;s-london-tech-meetup$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events&#x27;s-nyc-tech-meetup$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events&#x27;s-oslo-tech-meetup$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events&#x27;s-toronto-tech-meetup$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/pdm-is-dead,-long-live-cloud-native-cad-and-plm-051722$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/placeholder-event$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/how-onshape-certification-can-support-cte-programs-and-unlock-funding-051121$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/prioritizing-agility-the-new-imperative-in-product-design-092321$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/product-innovation-in-an-unpredictable-market-092221$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/product-innovation-in-an-unpredictable-market-092221-b$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/product-innovation-in-the-&#x201C;new-normal&#x201D;-critical-insights-on-cloud-transformation-011321$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/quarterly-onshape-review-learn-what&#x2019;s-new-032823$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/quarterly-onshape-review-learn-what&#x2019;s-new-040622$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/quarterly-onshape-review-learn-what&#x2019;s-new-062723$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/quarterly-onshape-review-learn-what&#x2019;s-new-080422$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/quarterly-onshape-review-learn-what&#x2019;s-new-101723$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/quarterly-onshape-review-learn-what&#x2019;s-new-120921$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/research-symposium$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/revolutionize-the-creation,-presentation-and-delivery-of-product-documentation-with-cadasio-021021$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/solidworks-to-onshape-migration-made-easy-042121$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/stop-designing-today&#x27;s-high-tech-products-with-yesterday&#x27;s-cad-tools$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/switching-from-grabcad-workbench-to-onshape-for-student-teams-052323$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/test$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/test-event$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/test-ptc-event$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/test-jason$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/test-webinar-form-an-onscale-onshape-webinar-111920$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/think-like-a-startup-building-resilient-supply-chains$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/think-like-a-startup-building-resilient-supply-chains-071322$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/think-like-a-startup-fundraising-for-hardware-companies-091322$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/think-like-a-startup-mitigating-cyber-risks-011823$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/think-like-a-startup-the-definitive-storytelling-framework-041223$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/top-10-cad-features-that-enable-real-time-collaboration-031821$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/2023q3-ostechmeetup-hannover-backup$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/training-event$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/transform-design-and-lifecycle-management-with-cloud-connected-cad,-pdm-and-plm-102523$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/transforming-cad-data-management-072821$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/transforming-cad-data-management-old$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/ug-pro$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/ug-startup$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/ug-student$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/ug-women$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/using-onshape-for-science-olympiad-020322$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/using-onshape-to-design-a-vex-robot-in-the-cloud-111522$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/using-onshape-with-pltw-principles-of-engineering-102423$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/view-visual-design-history,-assembly-hierarchy,-and-manage-cross-discipline-projects-with-oneipm$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/webinar$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/product-experimentation-stefan-thomke$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/g2p-robotics-market-trends-for-2022$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/what&#x27;s-new-in-onshape-020321$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/what&#x27;s-new-in-onshape-032421$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/what&#x27;s-new-in-onshape-042821$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/what&#x27;s-new-in-onshape-052621$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/what&#x27;s-new-in-onshape-082521$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/what&#x27;s-new-in-onshape-102121$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/what&#x27;s-new-in-onshape-111220$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/why-companies-are-moving-from-file-based-cad-to-onshape-121521$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/events/your-mobile-adventure-awaits-with-phi-touch-082923$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/innovation-blog/10-ways-design-makes-or-breaks-consumer-products-test$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/innovation-blog/introducing-design-data-management-2.0$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/innovation-blog/jess-test-blog-post$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/innovation-blog/template-test$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/innovation-blog/the-power-of-cloud-collaboration-and-teamwork-in-product-innovation$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/innovation-blog/the-top-real-time-collaboration-tools-for-engineers-that-transform-product-development-(part-2)-$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/innovation-blog/why-your-cfo-wants-to-move-to-cloud-cad-blog-new$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/tech-tips/automatically-generate-matching-part-numbers-drawings$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/tech-tips/how-to-route-a-wire$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/tech-tips/no-code-needed-how-to-create-custom-cad-features$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/tech-tips/tech-tip-delegating-approvals$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/tech-tips/tech-tip-how-to-use-a-tangent-mate$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/tech-tips/tech-tip-how-to-use-linked-documents$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/tech-tips/tech-tip-let&#x27;s-build-a-frame-guide$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/tech-tips/tech-tip-secrets-of-the-shift-key$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/tech-tips/tech-tip-using-interference-detection$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/tech-tips/using-superlearner&#x2019;s-algorithm-app-to-optimize-parts$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos/advanced-part-modeling-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos/viewavidbotswebinar$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos/cadwolf-partner-spotlight$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos/cnc-machining-of-onshape-models-using-visualcamc$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos/generating-cam-toolpaths-with-visualcamc$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos/video-isento-pib-robot$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos/marine-robots-witted-en$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos/inserting-your-bill-of-materials-into-a-drawing$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos/introducing-generative-design-for-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos/lorem-ipsum-video$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos/migrate-years-of-cad-data-in-hours-with-cassini$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos-claraio$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos-and-power-surfacing$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos-customer-story-oceangate$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos-partner-webinar-solidworks-to-onshape-migration-made-easy$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos/production-machining-in-the-cloud$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos/experimentation-product-development-stefan-thomke-webinar$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos/video-1$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/videos/virtual-mockup-with-3dtagz$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/resource-center/what-is-new/test-2-whats-new$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/2-strategies-for-moving-legacy-data-to-onshape$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/3-traits-execs-value-most-in-a-mechanical-engineer$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/4-signs-you&#x27;re-overpaying-for-your-cad-system$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/7-cloud-cad-features-you-won&#x27;t-find-on-desktop$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/add-view-only-users-onshape-professional$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/aerospace-startup-attempts-hi-speed-space-internet$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/cad-data-management-making-product-designs-more-accessible-in-the-&#x201C;new-normal&#x201D;$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/cassini-makes-migrating-cad-data-to-onshape-from-solidworks-easy$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/change-or-die-why-cad&#x27;s-slow-to-embrace-the-cloud$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/cloud-native-cad-provides-&#x201C;peace-of-mind&#x201D;-for-engineer$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/don&#x2019;t-pave-over-the-cow-path-rethinking-how-product-development-teams-approach-data-management$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/growing-your-business-with-cloud-native-product-development-$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/how-executives-and-frontline-engineers-view-their-teams&#x27;-strengths-and-weaknesses-differently$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/how-to-overcome-hardware-design&#x27;s-biggest-obstacle$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/improve-team-communication-with-onshape&#x2019;s-cloud-sharing-features$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/innovation-for-good-why-game-changing-product-developers-rely-on-onshape&#x2019;s-cloud-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/ipad-and-iphone-designed-for-cloud-cad-on-the-go$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/mechanical-engineers-don&#x27;t-worry-about-job-title$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog-partner-spotlight-electra-cloud-is-the-only-electrical-schematic-software-you-can-access-anywhere$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/product-innovation-thomas-edison-and-&#x201C;sweating-less&#x201D;-with-the-cloud$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/purifying-water-in-panama,-with-free-cloud-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/remote-cad-you-won&#x27;t-believe-what-you-can-build$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/some-early-new-year&#x2019;s-product-development-resolutions-for-2021$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/the-top-real-time-collaboration-tools-for-engineers-that-transform-product-development-(part-2)-$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/think-you-can&#x2019;t-afford-pdm-think-again$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/want-to-master-cloud-cad-here&#x27;s-how$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/what-we&#x2019;re-talking-about-2022-trends,-customer-success,-virtual-events$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/what-we&#x2019;re-talking-about-manufacturing,-render-studio,-agile-method$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/en/blog/what&#x2019;s-more-important-design-processes,-or-cad$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n        <section class=\\\"suite\\\">\\n          <h1>Test Suit For Rule from: ^/$ to</h1>\\n          <dl>\\n            <dt>Get valid status code 200, 301, 302 or 404</dt>\\n            <dt>/var/www/html/Redirect-Testing/build/index.js</dt>\\n            <dd><pre><code>__awaiter(this, void 0, void 0, function* () {\\n                        var _a, _b, _c, _d;\\n                        const resTest = yield axios.sendRequestTest(rewriteRule.fromLink);\\n                        const resLive = yield axios.customAxiosLive(rewriteRule.fromLink);\\n                        const testLoc = (_b = (_a = resTest === null || resTest === void 0 ? void 0 : resTest.request) === null || _a === void 0 ? void 0 : _a.res) === null || _b === void 0 ? void 0 : _b.responseUrl;\\n                        const liveLoc = (_d = (_c = resLive === null || resLive === void 0 ? void 0 : resLive.request) === null || _c === void 0 ? void 0 : _c.res) === null || _d === void 0 ? void 0 : _d.responseUrl;\\n                        // console.log(testLoc, liveLoc);\\n                        if (liveLoc &#x26;&#x26; !testLoc) {\\n                            throw new Error(&#x60;No Redirect detected For Test Env&#x60;);\\n                        }\\n                        if (testLoc &#x26;&#x26; liveLoc) {\\n                            const testUrl = new URL(testLoc);\\n                            const liveUrl = new URL(liveLoc);\\n                            if (testUrl.pathname != liveUrl.pathname) {\\n                                throw new Error(&#x60;Actual: ${testUrl.pathname} Not Equal Expected: ${liveUrl.pathname}&#x60;);\\n                            }\\n                            if (liveUrl.search &#x26;&#x26; liveUrl.search != testUrl.search) {\\n                                throw new Error(&#x60;Wrong Query Params Actual: ${testUrl.search} Not Equal Expected: ${liveUrl.search}&#x60;);\\n                            }\\n                        }\\n                    })</code></pre></dd>\\n          </dl>\\n        </section>\\n      </dl>\\n    </section>\\n\";\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (code);\n\n//# sourceURL=webpack://redirect-testing/./report/results.html?");

/***/ }),

/***/ "./report/style.css":
/*!**************************!*\
  !*** ./report/style.css ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://redirect-testing/./report/style.css?");

/***/ }),

/***/ "./report/src/main.ts":
/*!****************************!*\
  !*** ./report/src/main.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst results_html_1 = __importDefault(__webpack_require__(/*! ../results.html */ \"./report/results.html\"));\n__webpack_require__(/*! ../style.css */ \"./report/style.css\");\n// NOTE: feel free to refactor for a more interesting framework like Vue\n// Load results into document.\nconst body = document.querySelector('body');\nif (!body) {\n    throw new Error('body does not exist! Make sure report/index.html is formatted correctly.');\n}\nbody.innerHTML = results_html_1.default;\n// Find the comparison section.\nconst suites = Array.from(body.children);\n// delete the path line.\nsuites.forEach((suite) => {\n    suite.querySelectorAll('dt').forEach((line) => {\n        if (line.innerHTML.trim().endsWith('.js')) {\n            line.style.display = 'none';\n        }\n    });\n});\nconst comparisonSection = suites.find((section) => {\n    const [header] = section.children;\n    return header.textContent === '[AUTOMATED COMPARISON TEST]';\n});\nif (!comparisonSection) {\n    throw new Error('Page Comparison suite is missing from the html results');\n}\nconst [, comparisonChildList] = comparisonSection.children;\nconst contextSections = Array\n    .from(comparisonChildList.children)\n    .filter((contextSection) => contextSection.tagName === 'SECTION')\n    .filter((contextSection) => {\n    const [, descriptionList] = contextSection.children;\n    return descriptionList.children.length;\n});\n\n\n//# sourceURL=webpack://redirect-testing/./report/src/main.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./report/src/main.ts");
/******/ 	
/******/ })()
;